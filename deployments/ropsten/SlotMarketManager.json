{
  "address": "0xf1E3FC4573335B00e4e2D128185e7C410A24f73C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSlotMarketProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSlotMarketProxy",
          "type": "address"
        }
      ],
      "name": "SlotMarketProxyChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProxyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_slotMarketProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setProxyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSlotMarketProxy",
          "type": "address"
        }
      ],
      "name": "setSlotMarketProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slotMarketProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf66b841a93bd50cfed128f0a63e3a4f9f054648749303c2dea5aa82401600a75",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0xf1E3FC4573335B00e4e2D128185e7C410A24f73C",
    "transactionIndex": 0,
    "gasUsed": "964846",
    "logsBloom": "0x
    "blockHash": "0x4e0ba27fb7a9401631dd0c66760cd4bf051c55d05a1f36bbeb150caa559c7e19",
    "transactionHash": "0xf66b841a93bd50cfed128f0a63e3a4f9f054648749303c2dea5aa82401600a75",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10692483,
        "transactionHash": "0xf66b841a93bd50cfed128f0a63e3a4f9f054648749303c2dea5aa82401600a75",
        "address": "0xf1E3FC4573335B00e4e2D128185e7C410A24f73C",
        "topics": [
          "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a52422bb8c29e4d55243d310fb6bae793162452e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4e0ba27fb7a9401631dd0c66760cd4bf051c55d05a1f36bbeb150caa559c7e19"
      }
    ],
    "blockNumber": 10692483,
    "cumulativeGasUsed": "964846",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c2047ea3ebd11a71bd1ec286aad6032e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSlotMarketProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSlotMarketProxy\",\"type\":\"address\"}],\"name\":\"SlotMarketProxyChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slotMarketProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSlotMarketProxy\",\"type\":\"address\"}],\"name\":\"setSlotMarketProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotMarketProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"params\":{\"_admin\":\"Admin address\",\"_slotMarketProxy\":\"SlotMarket proxy contract address\"}},\"setAdmin(address)\":{\"details\":\"Can only be executed by admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"setProxyAdmin(address)\":{\"params\":{\"newAdmin\":\"new admin address\"}},\"setSlotMarketProxy(address)\":{\"details\":\"Can only be executed by admin\",\"params\":{\"newSlotMarketProxy\":\"new slot market proxy address\"}},\"upgrade(address)\":{\"params\":{\"newImplementation\":\"new implementation address\"}},\"upgradeAndCall(address,bytes)\":{\"params\":{\"data\":\"Bytes-encoded function to call\",\"newImplementation\":\"new implementation address\"}}},\"title\":\"SlotMarketManager\",\"version\":1},\"userdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"notice\":\"New admin event\"},\"SlotMarketProxyChanged(address,address)\":{\"notice\":\"New slot market proxy event\"}},\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"SlotMarketManager admin\"},\"constructor\":{\"notice\":\"Construct new SlotMarketManager contract, setting msg.sender as admin\"},\"getProxyAdmin()\":{\"notice\":\"Public getter for SlotMarket Proxy admin address\"},\"getProxyImplementation()\":{\"notice\":\"Public getter for SlotMarket Proxy implementation contract address\"},\"initialize(address,address)\":{\"notice\":\"Initialize contract\"},\"setAdmin(address)\":{\"notice\":\"Set new admin for this contract\"},\"setProxyAdmin(address)\":{\"notice\":\"Set new admin for SlotMarket proxy contract\"},\"setSlotMarketProxy(address)\":{\"notice\":\"Set new slot market proxy contract\"},\"slotMarketProxy()\":{\"notice\":\"SlotMarketProxy address\"},\"upgrade(address)\":{\"notice\":\"Set new implementation for SlotMarket proxy contract\"},\"upgradeAndCall(address,bytes)\":{\"notice\":\"Set new implementation for SlotMarket proxy contract + call function after\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SlotMarketManager.sol\":\"SlotMarketManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/SlotMarketManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n  Copyright 2021 Archer DAO: Chris Piatt (chris@archerdao.io).\\n*/\\n\\nimport \\\"./lib/Initializable.sol\\\";\\n\\n/**\\n * @title SlotMarketManager\\n */\\ncontract SlotMarketManager is Initializable {\\n\\n    /// @notice SlotMarketManager admin\\n    address public admin;\\n\\n    /// @notice SlotMarketProxy address\\n    address public slotMarketProxy;\\n\\n    /// @notice Admin modifier\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    /// @notice New admin event\\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /// @notice New slot market proxy event\\n    event SlotMarketProxyChanged(address indexed oldSlotMarketProxy, address indexed newSlotMarketProxy);\\n\\n    /**\\n     * @notice Construct new SlotMarketManager contract, setting msg.sender as admin\\n     */\\n    constructor() {\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Initialize contract\\n     * @param _slotMarketProxy SlotMarket proxy contract address\\n     * @param _admin Admin address\\n     */\\n    function initialize(\\n        address _slotMarketProxy,\\n        address _admin\\n    ) external initializer onlyAdmin {\\n        emit AdminChanged(admin, _admin);\\n        admin = _admin;\\n\\n        slotMarketProxy = _slotMarketProxy;\\n        emit SlotMarketProxyChanged(address(0), _slotMarketProxy);\\n    }\\n\\n    /**\\n     * @notice Set new admin for this contract\\n     * @dev Can only be executed by admin\\n     * @param newAdmin new admin address\\n     */\\n    function setAdmin(\\n        address newAdmin\\n    ) external onlyAdmin {\\n        emit AdminChanged(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @notice Set new slot market proxy contract\\n     * @dev Can only be executed by admin\\n     * @param newSlotMarketProxy new slot market proxy address\\n     */\\n    function setSlotMarketProxy(\\n        address newSlotMarketProxy\\n    ) external onlyAdmin {\\n        emit SlotMarketProxyChanged(slotMarketProxy, newSlotMarketProxy);\\n        slotMarketProxy = newSlotMarketProxy;\\n    }\\n\\n    /**\\n     * @notice Public getter for SlotMarket Proxy implementation contract address\\n     */\\n    function getProxyImplementation() public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = slotMarketProxy.staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @notice Public getter for SlotMarket Proxy admin address\\n     */\\n    function getProxyAdmin() public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = slotMarketProxy.staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @notice Set new admin for SlotMarket proxy contract\\n     * @param newAdmin new admin address\\n     */\\n    function setProxyAdmin(\\n        address newAdmin\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"changeAdmin(address)\\\")) = 0x8f283970\\n        (bool success, ) = slotMarketProxy.call(abi.encodeWithSelector(hex\\\"8f283970\\\", newAdmin));\\n        require(success, \\\"setProxyAdmin failed\\\");\\n    }\\n\\n    /**\\n     * @notice Set new implementation for SlotMarket proxy contract\\n     * @param newImplementation new implementation address\\n     */\\n    function upgrade(\\n        address newImplementation\\n    ) external onlyAdmin {\\n        // bytes4(keccak256(\\\"upgradeTo(address)\\\")) = 0x3659cfe6\\n        (bool success, ) = slotMarketProxy.call(abi.encodeWithSelector(hex\\\"3659cfe6\\\", newImplementation));\\n        require(success, \\\"upgrade failed\\\");\\n    }\\n\\n    /**\\n     * @notice Set new implementation for SlotMarket proxy contract + call function after\\n     * @param newImplementation new implementation address\\n     * @param data Bytes-encoded function to call\\n     */\\n    function upgradeAndCall(\\n        address newImplementation,\\n        bytes memory data\\n    ) external payable onlyAdmin {\\n        // bytes4(keccak256(\\\"upgradeToAndCall(address,bytes)\\\")) = 0x4f1ef286\\n        (bool success, ) = slotMarketProxy.call{value: msg.value}(abi.encodeWithSelector(hex\\\"4f1ef286\\\", newImplementation, data));\\n        require(success, \\\"upgradeAndCall failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0ab2d5087d0a9a96fc79680344cff8384397ba6e14760acd300798cea436c933\",\"license\":\"MIT\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xbf8dc250aa07ec2837ce70f902e3964a22b749a26160e39865f85f659dc48b66\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc445e701fc984ebd4faf7aa82e40cd0068f5893a31c1557ca86c74fec69f1e8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805462010000600160b01b031916336201000081029190911782556040519091907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f908290a3611033806100686000396000f3fe6080604052600436106100b15760003560e01c8063704b6c021161006957806390e4b7201161004e57806390e4b720146101b6578063d9e659d8146101cb578063f851a440146101eb576100b1565b8063704b6c02146101815780638b3240a0146101a1576100b1565b80632a6a833b1161009a5780632a6a833b1461012e57806347c0266114610141578063485cc95514610161576100b1565b80630900f010146100b6578063171d99af146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610d9b565b61021e565b005b3480156100e457600080fd5b506001546101059073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d661013c366004610e12565b610407565b34801561014d57600080fd5b506100d661015c366004610d9b565b6105f3565b34801561016d57600080fd5b506100d661017c366004610dda565b6107d3565b34801561018d57600080fd5b506100d661019c366004610d9b565b610a62565b3480156101ad57600080fd5b50610105610b82565b3480156101c257600080fd5b50610105610c37565b3480156101d757600080fd5b506100d66101e6366004610d9b565b610c86565b3480156101f757600080fd5b506000546101059062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146102aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff83811660248301526000921690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052516103569190610eef565b6000604051808303816000865af19150503d8060008114610393576040519150601f19603f3d011682016040523d82523d6000602084013e610398565b606091505b5050905080610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f75706772616465206661696c656400000000000000000000000000000000000060448201526064016102a1565b5050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461048e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff169034906104c09086908690602401610f0b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4f1ef28600000000000000000000000000000000000000000000000000000000179052516105419190610eef565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f75706772616465416e6443616c6c206661696c6564000000000000000000000060448201526064016102a1565b505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461067a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405173ffffffffffffffffffffffffffffffffffffffff83811660248301526000921690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8f28397000000000000000000000000000000000000000000000000000000000179052516107269190610eef565b6000604051808303816000865af19150503d8060008114610763576040519150601f19603f3d011682016040523d82523d6000602084013e610768565b606091505b5050905080610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f73657450726f787941646d696e206661696c656400000000000000000000000060448201526064016102a1565b600054610100900460ff16806107ec575060005460ff16155b610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102a1565b600054610100900460ff161580156108b757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808616936201000090930416917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff80851662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091178255600180549186167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216821790556040519091907f9ad2abc7c4f384abb2c11bab0283d12432ae574c67a0ba27f3e74d1a2e12215f908290a380156105ee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610ae9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516936201000090930416917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6001546040517ff851a4400000000000000000000000000000000000000000000000000000000081526000918291829173ffffffffffffffffffffffffffffffffffffffff16906004015b600060405180830381855afa9150503d8060008114610c08576040519150601f19603f3d011682016040523d82523d6000602084013e610c0d565b606091505b509150915081610c1c57600080fd5b80806020019051810190610c309190610dbe565b9250505090565b6001546040517f5c60da1b0000000000000000000000000000000000000000000000000000000081526000918291829173ffffffffffffffffffffffffffffffffffffffff1690600401610bcd565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f9ad2abc7c4f384abb2c11bab0283d12432ae574c67a0ba27f3e74d1a2e12215f90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600060208284031215610dac578081fd5b8135610db781610fd8565b9392505050565b600060208284031215610dcf578081fd5b8151610db781610fd8565b60008060408385031215610dec578081fd5b8235610df781610fd8565b91506020830135610e0781610fd8565b809150509250929050565b60008060408385031215610e24578182fd5b8235610e2f81610fd8565b9150602083013567ffffffffffffffff80821115610e4b578283fd5b818501915085601f830112610e5e578283fd5b813581811115610e7057610e70610fa9565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610eb657610eb6610fa9565b81604052828152886020848701011115610ece578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008251610f01818460208701610f79565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff84168252604060208301528251806040840152610f46816060850160208701610f79565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b60005b83811015610f94578181015183820152602001610f7c565b83811115610fa3576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ffa57600080fd5b5056fea26469706673582212209f6c858267b522b95f54015ee3435bff6d92d2013beffebeeb5b7f848bf0221864736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100b15760003560e01c8063704b6c021161006957806390e4b7201161004e57806390e4b720146101b6578063d9e659d8146101cb578063f851a440146101eb576100b1565b8063704b6c02146101815780638b3240a0146101a1576100b1565b80632a6a833b1161009a5780632a6a833b1461012e57806347c0266114610141578063485cc95514610161576100b1565b80630900f010146100b6578063171d99af146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610d9b565b61021e565b005b3480156100e457600080fd5b506001546101059073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d661013c366004610e12565b610407565b34801561014d57600080fd5b506100d661015c366004610d9b565b6105f3565b34801561016d57600080fd5b506100d661017c366004610dda565b6107d3565b34801561018d57600080fd5b506100d661019c366004610d9b565b610a62565b3480156101ad57600080fd5b50610105610b82565b3480156101c257600080fd5b50610105610c37565b3480156101d757600080fd5b506100d66101e6366004610d9b565b610c86565b3480156101f757600080fd5b506000546101059062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146102aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60015460405173ffffffffffffffffffffffffffffffffffffffff83811660248301526000921690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052516103569190610eef565b6000604051808303816000865af19150503d8060008114610393576040519150601f19603f3d011682016040523d82523d6000602084013e610398565b606091505b5050905080610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f75706772616465206661696c656400000000000000000000000000000000000060448201526064016102a1565b5050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461048e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff169034906104c09086908690602401610f0b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4f1ef28600000000000000000000000000000000000000000000000000000000179052516105419190610eef565b60006040518083038185875af1925050503d806000811461057e576040519150601f19603f3d011682016040523d82523d6000602084013e610583565b606091505b50509050806105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f75706772616465416e6443616c6c206661696c6564000000000000000000000060448201526064016102a1565b505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461067a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405173ffffffffffffffffffffffffffffffffffffffff83811660248301526000921690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8f28397000000000000000000000000000000000000000000000000000000000179052516107269190610eef565b6000604051808303816000865af19150503d8060008114610763576040519150601f19603f3d011682016040523d82523d6000602084013e610768565b606091505b5050905080610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f73657450726f787941646d696e206661696c656400000000000000000000000060448201526064016102a1565b600054610100900460ff16806107ec575060005460ff16155b610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016102a1565b600054610100900460ff161580156108b757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808616936201000090930416917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff80851662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091178255600180549186167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216821790556040519091907f9ad2abc7c4f384abb2c11bab0283d12432ae574c67a0ba27f3e74d1a2e12215f908290a380156105ee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610ae9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516936201000090930416917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f91a36000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6001546040517ff851a4400000000000000000000000000000000000000000000000000000000081526000918291829173ffffffffffffffffffffffffffffffffffffffff16906004015b600060405180830381855afa9150503d8060008114610c08576040519150601f19603f3d011682016040523d82523d6000602084013e610c0d565b606091505b509150915081610c1c57600080fd5b80806020019051810190610c309190610dbe565b9250505090565b6001546040517f5c60da1b0000000000000000000000000000000000000000000000000000000081526000918291829173ffffffffffffffffffffffffffffffffffffffff1690600401610bcd565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e000000000000000000000000000000000000000000000060448201526064016102a1565b60015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f9ad2abc7c4f384abb2c11bab0283d12432ae574c67a0ba27f3e74d1a2e12215f90600090a3600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600060208284031215610dac578081fd5b8135610db781610fd8565b9392505050565b600060208284031215610dcf578081fd5b8151610db781610fd8565b60008060408385031215610dec578081fd5b8235610df781610fd8565b91506020830135610e0781610fd8565b809150509250929050565b60008060408385031215610e24578182fd5b8235610e2f81610fd8565b9150602083013567ffffffffffffffff80821115610e4b578283fd5b818501915085601f830112610e5e578283fd5b813581811115610e7057610e70610fa9565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610eb657610eb6610fa9565b81604052828152886020848701011115610ece578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008251610f01818460208701610f79565b9190910192915050565b600073ffffffffffffffffffffffffffffffffffffffff84168252604060208301528251806040840152610f46816060850160208701610f79565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b60005b83811015610f94578181015183820152602001610f7c565b83811115610fa3576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ffa57600080fd5b5056fea26469706673582212209f6c858267b522b95f54015ee3435bff6d92d2013beffebeeb5b7f848bf0221864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address,address)": {
        "params": {
          "_admin": "Admin address",
          "_slotMarketProxy": "SlotMarket proxy contract address"
        }
      },
      "setAdmin(address)": {
        "details": "Can only be executed by admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "setProxyAdmin(address)": {
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "setSlotMarketProxy(address)": {
        "details": "Can only be executed by admin",
        "params": {
          "newSlotMarketProxy": "new slot market proxy address"
        }
      },
      "upgrade(address)": {
        "params": {
          "newImplementation": "new implementation address"
        }
      },
      "upgradeAndCall(address,bytes)": {
        "params": {
          "data": "Bytes-encoded function to call",
          "newImplementation": "new implementation address"
        }
      }
    },
    "title": "SlotMarketManager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "notice": "New admin event"
      },
      "SlotMarketProxyChanged(address,address)": {
        "notice": "New slot market proxy event"
      }
    },
    "kind": "user",
    "methods": {
      "admin()": {
        "notice": "SlotMarketManager admin"
      },
      "constructor": {
        "notice": "Construct new SlotMarketManager contract, setting msg.sender as admin"
      },
      "getProxyAdmin()": {
        "notice": "Public getter for SlotMarket Proxy admin address"
      },
      "getProxyImplementation()": {
        "notice": "Public getter for SlotMarket Proxy implementation contract address"
      },
      "initialize(address,address)": {
        "notice": "Initialize contract"
      },
      "setAdmin(address)": {
        "notice": "Set new admin for this contract"
      },
      "setProxyAdmin(address)": {
        "notice": "Set new admin for SlotMarket proxy contract"
      },
      "setSlotMarketProxy(address)": {
        "notice": "Set new slot market proxy contract"
      },
      "slotMarketProxy()": {
        "notice": "SlotMarketProxy address"
      },
      "upgrade(address)": {
        "notice": "Set new implementation for SlotMarket proxy contract"
      },
      "upgradeAndCall(address,bytes)": {
        "notice": "Set new implementation for SlotMarket proxy contract + call function after"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4067,
        "contract": "contracts/SlotMarketManager.sol:SlotMarketManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4070,
        "contract": "contracts/SlotMarketManager.sol:SlotMarketManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1677,
        "contract": "contracts/SlotMarketManager.sol:SlotMarketManager",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1680,
        "contract": "contracts/SlotMarketManager.sol:SlotMarketManager",
        "label": "slotMarketProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}