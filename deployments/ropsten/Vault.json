{
  "address": "0x1c040f37D504b5DfF1A61Aa27E8286367ACc09D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "durationInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cliffInDays",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "oldDuration",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newDuration",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newCliff",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        }
      ],
      "name": "LockExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPowerRemoved",
          "type": "uint256"
        }
      ],
      "name": "UnlockedTokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activeLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLockIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActiveLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "allLocks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "vestingDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.Lock[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimUnlockedTokenAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDaysToAdd",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDaysToAdd",
          "type": "uint16"
        }
      ],
      "name": "extendLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "lockBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "vestingDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "votingPower",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.Lock",
              "name": "lock",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.LockBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "contract ILockManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingPower",
          "type": "bool"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "grantVotingPower",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "lockTokensWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenLocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "vestingDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8661c81d8690a8691f8421bb4088b0cb695c1d1453e3e456326fe6527837d4a",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0x1c040f37D504b5DfF1A61Aa27E8286367ACc09D2",
    "transactionIndex": 0,
    "gasUsed": "3749385",
    "logsBloom": "0x
    "blockHash": "0x6f0bdbfe2023e88d141ae2c98da2371dada30baa4e1b71f1b7a3764c6e0135c9",
    "transactionHash": "0xc8661c81d8690a8691f8421bb4088b0cb695c1d1453e3e456326fe6527837d4a",
    "logs": [],
    "blockNumber": 10692329,
    "cumulativeGasUsed": "3749385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xed4D0430499bbF6F56710Eebd87DEF693E6B69B4"
  ],
  "solcInputHash": "9b228480b86a17f9c201c188a1dfb6af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"durationInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"oldDuration\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newDuration\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newCliff\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"LockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPowerRemoved\",\"type\":\"uint256\"}],\"name\":\"UnlockedTokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLockIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActiveLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"}],\"name\":\"claimAllUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimUnlockedTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDaysToAdd\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDaysToAdd\",\"type\":\"uint16\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.LockBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"grantVotingPower\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"lockTokensWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"vestingDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for locking up tokens for set periods of time  + optionally providing locked tokens with voting power\",\"kind\":\"dev\",\"methods\":{\"activeLockBalances(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock balances\"}},\"activeLockIds(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the active lock ids\"}},\"activeLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"allActiveLockBalances()\":{\"returns\":{\"_0\":\"the active lock balances\"}},\"allActiveLockIds()\":{\"returns\":{\"_0\":\"the lock ids\"}},\"allActiveLocks()\":{\"returns\":{\"_0\":\"the locks\"}},\"allLocks(address)\":{\"params\":{\"receiver\":\"The address that has locked balances\"},\"returns\":{\"_0\":\"the locks\"}},\"claimAllUnlockedTokens(uint256[])\":{\"details\":\"Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"locks\":\"The lock ids for unlocked token balances\"}},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"details\":\"Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"amounts\":\"The amount of each unlocked token to claim\",\"locks\":\"The lock ids for unlocked token balances\"}},\"claimableBalance(uint256)\":{\"details\":\"Returns 0 if cliff duration has not ended\",\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"extendLock(uint256,uint16,uint16)\":{\"params\":{\"cliffDaysToAdd\":\"The number of days to add to cliff duration\",\"lockId\":\"The lock id for a locked token balance\",\"vestingDaysToAdd\":\"The number of days to add to vesting duration\"}},\"lockBalance(uint256)\":{\"params\":{\"lockId\":\"The lock ID\"},\"returns\":{\"balance\":\"the lock balance\"}},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The cliff duration in days\",\"grantVotingPower\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"startTime\":\"The unix timestamp when the lock period will start\",\"vestingDurationInDays\":\"The vesting period in days\"}},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)\":{\"details\":\"It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\",\"params\":{\"amount\":\"The amount of tokens being locked\",\"cliffDurationInDays\":\"The lock cliff duration in days\",\"deadline\":\"The time at which to expire the signature\",\"grantVotingPower\":\"if true, give user voting power from tokens\",\"locker\":\"The account that is locking tokens\",\"r\":\"Half of the ECDSA signature pair\",\"receiver\":\"The account that will be able to retrieve unlocked tokens\",\"s\":\"Half of the ECDSA signature pair\",\"startTime\":\"The unix timestamp when the lock period will start\",\"token\":\"Address of token to lock\",\"v\":\"The recovery byte of the signature\",\"vestingDurationInDays\":\"The lock period in days\"}},\"tokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has unlocked balances\",\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token` for `receiver`\"}},\"totalTokenBalance(address)\":{\"params\":{\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token`\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate lock periods specified in days to seconds\"}},\"title\":\"Vault\",\"version\":1},\"userdoc\":{\"events\":{\"LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)\":{\"notice\":\"Event emitted when a new lock is created\"},\"LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)\":{\"notice\":\"Event emitted when lock duration extended\"},\"UnlockedTokensClaimed(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an unlocked balance\"}},\"kind\":\"user\",\"methods\":{\"activeLockBalances(address)\":{\"notice\":\"Get all active token lock balances for receiver\"},\"activeLockIds(address)\":{\"notice\":\"Get all active token lock ids for receiver\"},\"activeLocks(address)\":{\"notice\":\"Get all active token locks for receiver\"},\"allActiveLockBalances()\":{\"notice\":\"Get all active token lock balances\"},\"allActiveLockIds()\":{\"notice\":\"Get all active token lock ids\"},\"allActiveLocks()\":{\"notice\":\"Get all active token locks\"},\"allLocks(address)\":{\"notice\":\"Get all token locks for receiver\"},\"claimAllUnlockedTokens(uint256[])\":{\"notice\":\"Allows receiver to claim all of their unlocked tokens for a set of locks\"},\"claimUnlockedTokenAmounts(uint256[],uint256[])\":{\"notice\":\"Allows receiver to claim a portion of their unlocked tokens for a given lock\"},\"claimableBalance(uint256)\":{\"notice\":\"Get claimable balance for a given lock id\"},\"constructor\":{\"notice\":\"Create a new Vault contract\"},\"extendLock(uint256,uint16,uint16)\":{\"notice\":\"Allows receiver extend lock periods for a given lock\"},\"lockBalance(uint256)\":{\"notice\":\"Get lock balance for a given lock id\"},\"lockIds(address,uint256)\":{\"notice\":\"Mapping of address to lock id\"},\"lockManager()\":{\"notice\":\"lockManager contract\"},\"lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)\":{\"notice\":\"Lock tokens, optionally providing voting power\"},\"lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Lock tokens, using permit for approval\"},\"numLocks()\":{\"notice\":\"Number of locks\"},\"tokenBalance(address,address)\":{\"notice\":\"Get token balance of receiver\"},\"tokenLocks(uint256)\":{\"notice\":\"Mapping of lock id > token locks\"},\"totalTokenBalance(address)\":{\"notice\":\"Get total token balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title Vault\\n * @dev Contract for locking up tokens for set periods of time \\n * + optionally providing locked tokens with voting power\\n */\\ncontract Vault {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice lockManager contract\\n    ILockManager public lockManager;\\n\\n    /// @notice Lock definition\\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    /// @notice Lock balance definition\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    ///@notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    /// @dev Used to translate lock periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of lock id > token locks\\n    mapping (uint256 => Lock) public tokenLocks;\\n\\n    /// @notice Mapping of address to lock id\\n    mapping (address => uint256[]) public lockIds;\\n\\n    ///@notice Number of locks\\n    uint256 public numLocks;\\n\\n    /// @notice Event emitted when a new lock is created\\n    event LockCreated(address indexed token, address indexed locker, address indexed receiver, uint256 lockId, uint256 amount, uint48 startTime, uint16 durationInDays, uint16 cliffInDays, uint256 votingPower);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an unlocked balance\\n    event UnlockedTokensClaimed(address indexed receiver, address indexed token, uint256 indexed lockId, uint256 amountClaimed, uint256 votingPowerRemoved);\\n\\n    /// @notice Event emitted when lock duration extended\\n    event LockExtended(uint256 indexed lockId, uint16 indexed oldDuration, uint16 indexed newDuration, uint16 oldCliff, uint16 newCliff, uint48 startTime);\\n\\n    /**\\n     * @notice Create a new Vault contract\\n     */\\n    constructor(address _lockManager) {\\n        lockManager = ILockManager(_lockManager);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, optionally providing voting power\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    )\\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokens: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokens: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokens: vesting duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokens: amount not > 0\\\");\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Lock tokens, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token to lock\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The lock period in days\\n     * @param cliffDurationInDays The lock cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function lockTokensWithPermit(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(vestingDurationInDays > 0, \\\"Vault::lockTokensWithPermit: vesting duration must be > 0\\\");\\n        require(vestingDurationInDays <= 25*365, \\\"Vault::lockTokensWithPermit: vesting duration more than 25 years\\\");\\n        require(vestingDurationInDays >= cliffDurationInDays, \\\"Vault::lockTokensWithPermit: duration < cliff\\\");\\n        require(amount > 0, \\\"Vault::lockTokensWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IERC20(token).permit(locker, address(this), amount, deadline, v, r, s);\\n        _lockTokens(token, locker, receiver, startTime, amount, vestingDurationInDays, cliffDurationInDays, grantVotingPower);\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids\\n     * @return the lock ids\\n     */\\n    function allActiveLockIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks\\n     * @return the locks\\n     */\\n    function allActiveLocks() external view returns(Lock[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lock;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances\\n     * @return the active lock balances\\n     */\\n    function allActiveLockBalances() external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active locks\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory lock = tokenLocks[i];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock ids for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock ids\\n     */\\n    function activeLockIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = receiverLockIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function allLocks(address receiver) external view returns(Lock[] memory){\\n        uint256[] memory allLockIds = lockIds[receiver];\\n        Lock[] memory result = new Lock[](allLockIds.length);\\n        for (uint256 i; i < allLockIds.length; i++) {\\n            result[i] = tokenLocks[allLockIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token locks for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the locks\\n     */\\n    function activeLocks(address receiver) external view returns(Lock[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Lock[] memory result = new Lock[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = tokenLocks[receiverLockIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token lock balances for receiver\\n     * @param receiver The address that has locked balances\\n     * @return the active lock balances\\n     */\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n\\n        // Get number of active locks\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        LockBalance[] memory result = new LockBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory lock = tokenLocks[receiverLockIds[i]];\\n            if(lock.amount != lock.amountClaimed) {\\n                result[j] = lockBalance(receiverLockIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numLocks; i++) {\\n            Lock memory tokenLock = tokenLocks[i];\\n            if(tokenLock.token == token && tokenLock.amount != tokenLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount + tokenLock.amount;\\n                balance.votingPower = balance.votingPower + tokenLock.votingPower;\\n                if(block.timestamp > tokenLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + tokenLock.amountClaimed;\\n\\n                    uint256 elapsedTime = block.timestamp - tokenLock.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= tokenLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= tokenLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount + tokenLock.amount - tokenLock.amountClaimed;\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(tokenLock.vestingDurationInDays) * SECONDS_PER_DAY;\\n                            uint256 vestingAmountPerSec = tokenLock.amount / vestingDurationInSecs;\\n                            uint256 amountVested = vestingAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountVested - tokenLock.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has unlocked balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverLockIds = lockIds[receiver];\\n        for (uint256 i; i < receiverLockIds.length; i++) {\\n            Lock memory receiverLock = tokenLocks[receiverLockIds[i]];\\n            if(receiverLock.token == token && receiverLock.amount != receiverLock.amountClaimed){\\n                balance.totalAmount = balance.totalAmount + receiverLock.amount;\\n                balance.votingPower = balance.votingPower + receiverLock.votingPower;\\n                if(block.timestamp > receiverLock.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + receiverLock.amountClaimed;\\n\\n                    uint256 elapsedTime = block.timestamp - receiverLock.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= receiverLock.cliffDurationInDays\\n                    ) {\\n                        if (elapsedDays >= receiverLock.vestingDurationInDays) {\\n                            balance.claimableAmount = balance.claimableAmount + receiverLock.amount - receiverLock.amountClaimed;\\n                        } else {\\n                            uint256 vestingDurationInSecs = uint256(receiverLock.vestingDurationInDays) * SECONDS_PER_DAY;\\n                            uint256 vestingAmountPerSec = receiverLock.amount / vestingDurationInSecs;\\n                            uint256 amountVested = vestingAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountVested - receiverLock.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get lock balance for a given lock id\\n     * @param lockId The lock ID\\n     * @return balance the lock balance\\n     */\\n    function lockBalance(uint256 lockId) public view returns (LockBalance memory balance) {\\n        balance.id = lockId;\\n        balance.claimableAmount = claimableBalance(lockId);\\n        balance.lock = tokenLocks[lockId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given lock id\\n     * @dev Returns 0 if cliff duration has not ended\\n     * @param lockId The lock ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 lockId) public view returns (uint256) {\\n        Lock storage lock = tokenLocks[lockId];\\n\\n        // For locks created with a future start date, that hasn't been reached, return 0\\n        if (block.timestamp < lock.startTime) {\\n            return 0;\\n        }\\n\\n        uint256 elapsedTime = block.timestamp - lock.startTime;\\n        uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n        \\n        if (elapsedDays < lock.cliffDurationInDays) {\\n            return 0;\\n        } \\n        \\n        if (elapsedDays >= lock.vestingDurationInDays) {\\n            return lock.amount - lock.amountClaimed;\\n        } else {\\n            uint256 vestingDurationInSecs = uint256(lock.vestingDurationInDays) * SECONDS_PER_DAY;\\n            uint256 vestingAmountPerSec = lock.amount / vestingDurationInSecs;\\n            uint256 amountVested = vestingAmountPerSec * elapsedTime;\\n            return amountVested - lock.amountClaimed;\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their unlocked tokens for a set of locks\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     */\\n    function claimAllUnlockedTokens(uint256[] memory locks) external {\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount > 0, \\\"Vault::claimAllUnlockedTokens: claimableAmount is 0\\\");\\n            _claimTokens(locks[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their unlocked tokens for a given lock\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param locks The lock ids for unlocked token balances\\n     * @param amounts The amount of each unlocked token to claim\\n     */\\n    function claimUnlockedTokenAmounts(uint256[] memory locks, uint256[] memory amounts) external {\\n        require(locks.length == amounts.length, \\\"Vault::claimUnlockedTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < locks.length; i++) {\\n            uint256 claimableAmount = claimableBalance(locks[i]);\\n            require(claimableAmount >= amounts[i], \\\"Vault::claimUnlockedTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(locks[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver extend lock periods for a given lock\\n     * @param lockId The lock id for a locked token balance\\n     * @param vestingDaysToAdd The number of days to add to vesting duration\\n     * @param cliffDaysToAdd The number of days to add to cliff duration\\n     */\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external {\\n        Lock storage lock = tokenLocks[lockId];\\n        require(msg.sender == lock.receiver, \\\"Vault::extendLock: msg.sender must be receiver\\\");\\n        uint16 oldVestingDuration = lock.vestingDurationInDays;\\n        uint16 newVestingDuration = _add16(oldVestingDuration, vestingDaysToAdd, \\\"Vault::extendLock: vesting max days exceeded\\\");\\n        uint16 oldCliffDuration = lock.cliffDurationInDays;\\n        uint16 newCliffDuration = _add16(oldCliffDuration, cliffDaysToAdd, \\\"Vault::extendLock: cliff max days exceeded\\\");\\n        require(newCliffDuration <= 10*365, \\\"Vault::extendLock: cliff more than 10 years\\\");\\n        require(newVestingDuration <= 25*365, \\\"Vault::extendLock: vesting duration more than 25 years\\\");\\n        require(newVestingDuration >= newCliffDuration, \\\"Vault::extendLock: duration < cliff\\\");\\n        lock.vestingDurationInDays = newVestingDuration;\\n        emit LockExtended(lockId, oldVestingDuration, newVestingDuration, oldCliffDuration, newCliffDuration, lock.startTime);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of lockTokens\\n     * @param locker The account that is locking tokens\\n     * @param receiver The account that will be able to retrieve unlocked tokens\\n     * @param startTime The unix timestamp when the lock period will start\\n     * @param amount The amount of tokens being locked\\n     * @param vestingDurationInDays The vesting period in days\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param grantVotingPower if true, give user voting power from tokens\\n     */\\n    function _lockTokens(\\n        address token,\\n        address locker,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint16 vestingDurationInDays,\\n        uint16 cliffDurationInDays,\\n        bool grantVotingPower\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the vault contract\\n        IERC20(token).safeTransferFrom(locker, address(this), amount);\\n\\n        uint48 lockStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n        uint256 votingPowerGranted;\\n        \\n        // Grant voting power, if specified\\n        if(grantVotingPower) {\\n            votingPowerGranted = lockManager.grantVotingPower(receiver, token, amount);\\n        }\\n\\n        // Create lock\\n        Lock memory lock = Lock({\\n            token: token,\\n            receiver: receiver,\\n            startTime: lockStartTime,\\n            vestingDurationInDays: vestingDurationInDays,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0,\\n            votingPower: votingPowerGranted\\n        });\\n\\n        tokenLocks[numLocks] = lock;\\n        lockIds[receiver].push(numLocks);\\n        emit LockCreated(token, locker, receiver, numLocks, amount, lockStartTime, vestingDurationInDays, cliffDurationInDays, votingPowerGranted);\\n        \\n        // Increment lock id\\n        numLocks++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param lockId The lock id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 lockId, uint256 claimAmount) internal {\\n        Lock storage lock = tokenLocks[lockId];\\n        uint256 votingPowerRemoved;\\n\\n        // Remove voting power, if exists\\n        if (lock.votingPower > 0) {\\n            votingPowerRemoved = lockManager.removeVotingPower(lock.receiver, lock.token, claimAmount);\\n            lock.votingPower = lock.votingPower - votingPowerRemoved;\\n        }\\n\\n        // Update claimed amount\\n        lock.amountClaimed = lock.amountClaimed + claimAmount;\\n\\n        // Release tokens\\n        IERC20(lock.token).safeTransfer(lock.receiver, claimAmount);\\n        emit UnlockedTokensClaimed(lock.receiver, lock.token, lockId, claimAmount, votingPowerRemoved);\\n    }\\n\\n    /**\\n     * @notice Adds uint16 to uint16 safely\\n     * @param a First number\\n     * @param b Second number\\n     * @param errorMessage Error message to use if numbers cannot be added\\n     * @return uint16 number\\n     */\\n    function _add16(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\n        uint16 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n}\",\"keccak256\":\"0xdb193eed09f386b49aaf8f5dd11d197444683812d3ddd15affe5be9a2ca33468\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x37d98e2e322314b6fdb33f7e7e73e4e836eb7c3410d16a6b8bbcae3d65129043\",\"license\":\"MIT\"},\"contracts/interfaces/ILockManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockManager {\\n    struct LockedStake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n    function calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n    function grantVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerGranted);\\n    function removeVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerRemoved);\\n}\",\"keccak256\":\"0x97e5871f0e670c74aafff3dcba78f437f8b4981c7ce617b6c6886433072f7130\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x2970a703e286952cbcd3e454e351e2b83f405223bf71139359a6f0831834160b\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x9e33e3e7cf29521693c0c74f531404f73119ffc525984f30dd2a8af3dcc13899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063946ca949116100cd578063d422cf5811610081578063f339c50411610066578063f339c5041461043f578063f54659921461045f578063f742a1fa1461047257600080fd5b8063d422cf5814610423578063d7da8bc21461042c57600080fd5b8063ada748a5116100b2578063ada748a5146103ea578063ba4a051b146103fd578063bed5df7c1461041057600080fd5b8063946ca94914610281578063acca30a2146103a557600080fd5b80634a176a4b11610124578063791ba92111610109578063791ba9211461024857806385d3374f1461025b5780638f2049981461026e57600080fd5b80634a176a4b1461022057806354ac185e1461023357600080fd5b806319ac0d901161015557806319ac0d90146101d55780631c1a4710146101ea5780633c4926d41461020b57600080fd5b80631049334f146101715780631091e807146101c0575b600080fd5b61018461017f366004613b62565b610485565b6040516101b791908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b6101c86107a6565b6040516101b79190613ffb565b6101e86101e3366004613b95565b610a43565b005b6101fd6101f8366004613cf5565b610cb4565b6040519081526020016101b7565b610213610ce5565b6040516101b79190613ef4565b61021361022e366004613b47565b610fe5565b61023b6113c6565b6040516101b79190613f43565b61023b610256366004613b47565b6116bf565b6101fd610269366004613dd5565b611922565b6101e861027c366004613e07565b611aa9565b61034061028f366004613dd5565b60016020819052600091825260409091208054918101546002820154600383015460049093015473ffffffffffffffffffffffffffffffffffffffff9485169483169365ffffffffffff740100000000000000000000000000000000000000008504169361ffff7a01000000000000000000000000000000000000000000000000000082048116947c0100000000000000000000000000000000000000000000000000000000909204169290919088565b6040805173ffffffffffffffffffffffffffffffffffffffff998a16815298909716602089015265ffffffffffff9095169587019590955261ffff92831660608701529116608085015260a084015260c083019190915260e0820152610100016101b7565b6000546103c59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b6101e86103f8366004613d1f565b611e6b565b61023b61040b366004613b47565b611f67565b6101c861041e366004613b47565b61241c565b6101fd60035481565b6101e861043a366004613d54565b612786565b61045261044d366004613dd5565b612939565b6040516101b79190614084565b61018461046d366004613b47565b612a88565b6101e8610480366004613c29565b612d0c565b6104b06040518060800160405280600081526020016000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602090815260408083208054825181850281018501909352808352919290919083018282801561051d57602002820191906000526020600020905b815481526020019060010190808311610509575b5050505050905060005b815181101561079e57600060016000848481518110610548576105486141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff90811680835260018401548083169684019690965265ffffffffffff740100000000000000000000000000000000000000008704169483019490945261ffff7a0100000000000000000000000000000000000000000000000000008604811660608401527c01000000000000000000000000000000000000000000000000000000009095049094166080820152600282015460a0820152600382015460c082015260049091015460e0820152925090871614801561064b57508060c001518160a0015114155b1561078b5760a0810151845161066191906140bf565b845260e0810151606085015161067791906140bf565b6060850152604081015165ffffffffffff1642111561078b578060c0015184604001516106a491906140bf565b6040808601919091528101516000906106c59065ffffffffffff164261414f565b905060006106d662015180836140d7565b9050826080015161ffff16811061078857826060015161ffff168110610723578260c001518360a00151876020015161070f91906140bf565b610719919061414f565b6020870152610788565b600062015180846060015161ffff1661073c9190614112565b90506000818560a0015161075091906140d7565b9050600061075e8583614112565b90508560c00151818a6020015161077591906140bf565b61077f919061414f565b60208a01525050505b50505b508061079681614192565b915050610527565b505092915050565b60606000805b6003548110156108be57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529091146108ab57826108a781614192565b9350505b50806108b681614192565b9150506107ac565b5060008167ffffffffffffffff8111156108da576108da614229565b604051908082528060200260200182016040528015610903578160200160208202803683370190505b5090506000805b600354811015610a3a57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610a275781848481518110610a0e57610a0e6141fa565b602090810291909101015282610a2381614192565b9350505b5080610a3281614192565b91505061090a565b50909392505050565b60008361ffff1611610adc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460448201527f696f6e206d757374206265203e2030000000000000000000000000000000000060648201526084015b60405180910390fd5b6123a58361ffff161115610b72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460448201527f696f6e206d6f7265207468616e203235207965617273000000000000000000006064820152608401610ad3565b8161ffff168361ffff161015610c0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5661756c743a3a6c6f636b546f6b656e733a2076657374696e6720647572617460448201527f696f6e203c20636c6966660000000000000000000000000000000000000000006064820152608401610ad3565b60008411610c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5661756c743a3a6c6f636b546f6b656e733a20616d6f756e74206e6f74203e2060448201527f30000000000000000000000000000000000000000000000000000000000000006064820152608401610ad3565b610caa888888888888888861302a565b5050505050505050565b60026020528160005260406000208181548110610cd057600080fd5b90600052602060002001600091509150505481565b60606000805b600354811015610dfd57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610dea5782610de681614192565b9350505b5080610df581614192565b915050610ceb565b5060008167ffffffffffffffff811115610e1957610e19614229565b604051908082528060200260200182016040528015610ea557816020015b610e926040805160608082018352600080835260208084018290528451610100810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e0820152909182015290565b815260200190600190039081610e375790505b5090506000805b600354811015610a3a57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909114610fd257610fa682612939565b848481518110610fb857610fb86141fa565b60200260200101819052508280610fce90614192565b9350505b5080610fdd81614192565b915050610eac565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561105657602002820191906000526020600020905b815481526020019060010190808311611042575b5050505050905060005b815181101561119657600060016000848481518110611081576110816141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014611183578361117f81614192565b9450505b508061118e81614192565b915050611060565b5060008267ffffffffffffffff8111156111b2576111b2614229565b60405190808252806020026020018201604052801561123e57816020015b61122b6040805160608082018352600080835260208084018290528451610100810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e0820152909182015290565b8152602001906001900390816111d05790505b5090506000805b83518110156113bb57600060016000868481518110611266576112666141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909250146113a85761137c85838151811061136f5761136f6141fa565b6020026020010151612939565b84848151811061138e5761138e6141fa565b602002602001018190525082806113a490614192565b9350505b50806113b381614192565b915050611245565b509095945050505050565b60606000805b6003548110156114de57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529091146114cb57826114c781614192565b9350505b50806114d681614192565b9150506113cc565b5060008167ffffffffffffffff8111156114fa576114fa614229565b60405190808252806020026020018201604052801561158757816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816115185790505b5090506000805b600354811015610a3a57600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff9081168252938201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404169382019390935261ffff7a0100000000000000000000000000000000000000000000000000008304811660608301527c01000000000000000000000000000000000000000000000000000000009092049091166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529091146116ac5780848481518110611692576116926141fa565b602002602001018190525082806116a890614192565b9350505b50806116b781614192565b91505061158e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949383018282801561172b57602002820191906000526020600020905b815481526020019060010190808311611717575b505050505090506000815167ffffffffffffffff81111561174e5761174e614229565b6040519080825280602002602001820160405280156117db57816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161176c5790505b50905060005b825181101561191a5760016000848381518110611800576118006141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e082015282518390839081106118fc576118fc6141fa565b6020026020010181905250808061191290614192565b9150506117e1565b509392505050565b600081815260016020819052604082209081015474010000000000000000000000000000000000000000900465ffffffffffff164210156119665750600092915050565b60018101546000906119989074010000000000000000000000000000000000000000900465ffffffffffff164261414f565b905060006119a962015180836140d7565b60018401549091507c0100000000000000000000000000000000000000000000000000000000900461ffff168110156119e757506000949350505050565b60018301547a010000000000000000000000000000000000000000000000000000900461ffff168110611a315782600301548360020154611a28919061414f565b95945050505050565b6001830154600090611a699062015180907a010000000000000000000000000000000000000000000000000000900461ffff16614112565b90506000818560020154611a7d91906140d7565b90506000611a8b8583614112565b9050856003015481611a9d919061414f565b98975050505050505050565b60008381526001602081905260409091209081015473ffffffffffffffffffffffffffffffffffffffff163314611b62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5661756c743a3a657874656e644c6f636b3a206d73672e73656e646572206d7560448201527f73742062652072656365697665720000000000000000000000000000000000006064820152608401610ad3565b600081600101601a9054906101000a900461ffff1690506000611b9e82866040518060600160405280602c815260200161426a602c913961341a565b9050600083600101601c9054906101000a900461ffff1690506000611bdc82876040518060600160405280602a8152602001614296602a913961341a565b9050610e428161ffff161115611c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5661756c743a3a657874656e644c6f636b3a20636c696666206d6f726520746860448201527f616e2031302079656172730000000000000000000000000000000000000000006064820152608401610ad3565b6123a58361ffff161115611d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5661756c743a3a657874656e644c6f636b3a2076657374696e6720647572617460448201527f696f6e206d6f7265207468616e203235207965617273000000000000000000006064820152608401610ad3565b8061ffff168361ffff161015611da2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5661756c743a3a657874656e644c6f636b3a206475726174696f6e203c20636c60448201527f69666600000000000000000000000000000000000000000000000000000000006064820152608401610ad3565b6001850180547fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff167a01000000000000000000000000000000000000000000000000000061ffff868116918202929092179283905560408051868416815285841660208201527401000000000000000000000000000000000000000090940465ffffffffffff169084015291908616908a907f230404042daed14abd1b9cba00060fea5fc11a5aad4f4a2efb7bf2de5d0f92bf9060600160405180910390a45050505050505050565b60005b8151811015611f63576000611e9b838381518110611e8e57611e8e6141fa565b6020026020010151611922565b905060008111611f2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5661756c743a3a636c61696d416c6c556e6c6f636b6564546f6b656e733a206360448201527f6c61696d61626c65416d6f756e742069732030000000000000000000000000006064820152608401610ad3565b611f50838381518110611f4257611f426141fa565b602002602001015182613479565b5080611f5b81614192565b915050611e6e565b5050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015611fd857602002820191906000526020600020905b815481526020019060010190808311611fc4575b5050505050905060005b815181101561211857600060016000848481518110612003576120036141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e083015290925014612105578361210181614192565b9450505b508061211081614192565b915050611fe2565b5060008267ffffffffffffffff81111561213457612134614229565b6040519080825280602002602001820160405280156121c157816020015b604080516101008101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816121525790505b5090506000805b83518110156113bb576000600160008684815181106121e9576121e96141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529092501461240957600160008684815181106122f3576122f36141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a0820152600382015460c082015260049091015460e082015284518590859081106123ef576123ef6141fa565b6020026020010181905250828061240590614192565b9350505b508061241481614192565b9150506121c8565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561248d57602002820191906000526020600020905b815481526020019060010190808311612479575b5050505050905060005b81518110156125cd576000600160008484815181106124b8576124b86141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e0830152909250146125ba57836125b681614192565b9450505b50806125c581614192565b915050612497565b5060008267ffffffffffffffff8111156125e9576125e9614229565b604051908082528060200260200182016040528015612612578160200160208202803683370190505b5090506000805b83518110156113bb5760006001600086848151811061263a5761263a6141fa565b6020908102919091018101518252818101929092526040908101600020815161010081018352815473ffffffffffffffffffffffffffffffffffffffff908116825260018301549081169482019490945265ffffffffffff740100000000000000000000000000000000000000008504169281019290925261ffff7a0100000000000000000000000000000000000000000000000000008404811660608401527c01000000000000000000000000000000000000000000000000000000009093049092166080820152600282015460a08201819052600383015460c0830181905260049093015460e08301529092501461277357848281518110612740576127406141fa565b602002602001015184848151811061275a5761275a6141fa565b60209081029190910101528261276f81614192565b9350505b508061277e81614192565b915050612619565b8051825114612817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360448201527f3a20617272617973206d7573742062652073616d65206c656e677468000000006064820152608401610ad3565b60005b825181101561293457600061283a848381518110611e8e57611e8e6141fa565b905082828151811061284e5761284e6141fa565b60200260200101518110156128e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f5661756c743a3a636c61696d556e6c6f636b6564546f6b656e416d6f756e747360448201527f3a20636c61696d61626c65416d6f756e74203c20616d6f756e740000000000006064820152608401610ad3565b6129218483815181106128fa576128fa6141fa565b6020026020010151848481518110612914576129146141fa565b6020026020010151613479565b508061292c81614192565b91505061281a565b505050565b6129946040805160608082018352600080835260208084018290528451610100810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e0820152909182015290565b8181526129a082611922565b60208083019190915260009283526001808252604093849020845161010081018652815473ffffffffffffffffffffffffffffffffffffffff9081168252928201549283169381019390935265ffffffffffff740100000000000000000000000000000000000000008304168386015261ffff7a0100000000000000000000000000000000000000000000000000008304811660608501527c01000000000000000000000000000000000000000000000000000000009092049091166080830152600281015460a0830152600381015460c08301526004015460e08201529181019190915290565b612ab36040518060800160405280600081526020016000815260200160008152602001600081525090565b60005b600354811015612d0657600081815260016020818152604092839020835161010081018552815473ffffffffffffffffffffffffffffffffffffffff908116808352948301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504169582019590955261ffff7a0100000000000000000000000000000000000000000000000000008404811660608301527c01000000000000000000000000000000000000000000000000000000009093049092166080830152600281015460a0830152600381015460c08301526004015460e0820152918516148015612bb357508060c001518160a0015114155b15612cf35760a08101518351612bc991906140bf565b835260e08101516060840151612bdf91906140bf565b6060840152604081015165ffffffffffff16421115612cf3578060c001518360400151612c0c91906140bf565b604080850191909152810151600090612c2d9065ffffffffffff164261414f565b90506000612c3e62015180836140d7565b9050826080015161ffff168110612cf057826060015161ffff168110612c8b578260c001518360a001518660200151612c7791906140bf565b612c81919061414f565b6020860152612cf0565b600062015180846060015161ffff16612ca49190614112565b90506000818560a00151612cb891906140d7565b90506000612cc68583614112565b90508560c00151818960200151612cdd91906140bf565b612ce7919061414f565b60208901525050505b50505b5080612cfe81614192565b915050612ab6565b50919050565b60008761ffff1611612da0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2076657360448201527f74696e67206475726174696f6e206d757374206265203e2030000000000000006064820152608401610ad3565b6123a58761ffff161115612e3857604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2076657360448201527f74696e67206475726174696f6e206d6f7265207468616e2032352079656172736064820152608401610ad3565b8561ffff168761ffff161015612ed0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a2064757260448201527f6174696f6e203c20636c696666000000000000000000000000000000000000006064820152608401610ad3565b60008811612f60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5661756c743a3a6c6f636b546f6b656e73576974685065726d69743a20616d6f60448201527f756e74206e6f74203e20300000000000000000000000000000000000000000006064820152608401610ad3565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c81166004830152306024830152604482018a90526064820186905260ff8516608483015260a4820184905260c482018390528d169063d505accf9060e401600060405180830381600087803b158015612ff457600080fd5b505af1158015613008573d6000803e3d6000fd5b5050505061301c8c8c8c8c8c8c8c8c61302a565b505050505050505050505050565b61304c73ffffffffffffffffffffffffffffffffffffffff8916883087613609565b600065ffffffffffff8616156130625785613064565b425b905060008215613125576000546040517fbc61256e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528c81166024830152604482018990529091169063bc61256e90606401602060405180830381600087803b1580156130ea57600080fd5b505af11580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190613dee565b90505b60006040518061010001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1681526020018761ffff1681526020018661ffff168152602001888152602001600081526020018381525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550606082015181600101601a6101000a81548161ffff021916908361ffff160217905550608082015181600101601c6101000a81548161ffff021916908361ffff16021790555060a0820151816002015560c0820151816003015560e08201518160040155905050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f61a86a91d761a7322a10c3ff0cda14501ac0d019f088b470cb222e5e94747e896003548b888c8c8a6040516133f096959493929190958652602086019490945265ffffffffffff92909216604085015261ffff908116606085015216608083015260a082015260c00190565b60405180910390a46003805490600061340883614192565b91905055505050505050505050505050565b6000806134278486614099565b90508461ffff168161ffff161015839061346e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad39190614033565b5090505b9392505050565b600082815260016020526040812060048101549091901561356657600054600183015483546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810186905291169063bc3e1b7a90606401602060405180830381600087803b15801561351657600080fd5b505af115801561352a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354e9190613dee565b9050808260040154613560919061414f565b60048301555b82826003015461357691906140bf565b6003830155600182015482546135a69173ffffffffffffffffffffffffffffffffffffffff9182169116856136eb565b815460018301546040805186815260208101859052879373ffffffffffffffffffffffffffffffffffffffff9081169316917fbac91588ea67037e676b74f37797bcae8524aab9a7ba7431a24a72e6f29bc197910160405180910390a450505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526136e59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613741565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526129349084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401613663565b60006137a3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661384d9092919063ffffffff16565b80519091501561293457808060200190518101906137c19190613db8565b612934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610ad3565b606061385c8484600085613864565b949350505050565b6060824710156138f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610ad3565b843b61395e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ad3565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516139879190613ed8565b60006040518083038185875af1925050503d80600081146139c4576040519150601f19603f3d011682016040523d82523d6000602084013e6139c9565b606091505b50915091506139d98282866139e4565b979650505050505050565b606083156139f3575081613472565b825115613a035782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad39190614033565b803573ffffffffffffffffffffffffffffffffffffffff81168114613a5b57600080fd5b919050565b600082601f830112613a7157600080fd5b8135602067ffffffffffffffff80831115613a8e57613a8e614229565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613ad157613ad1614229565b60405284815283810192508684018288018501891015613af057600080fd5b600092505b85831015613b13578035845292840192600192909201918401613af5565b50979650505050505050565b803561ffff81168114613a5b57600080fd5b803565ffffffffffff81168114613a5b57600080fd5b600060208284031215613b5957600080fd5b61347282613a37565b60008060408385031215613b7557600080fd5b613b7e83613a37565b9150613b8c60208401613a37565b90509250929050565b600080600080600080600080610100898b031215613bb257600080fd5b613bbb89613a37565b9750613bc960208a01613a37565b9650613bd760408a01613a37565b9550613be560608a01613b31565b945060808901359350613bfa60a08a01613b1f565b9250613c0860c08a01613b1f565b915060e0890135613c1881614258565b809150509295985092959890939650565b6000806000806000806000806000806000806101808d8f031215613c4c57600080fd5b613c558d613a37565b9b50613c6360208e01613a37565b9a50613c7160408e01613a37565b9950613c7f60608e01613b31565b985060808d01359750613c9460a08e01613b1f565b9650613ca260c08e01613b1f565b955060e08d0135613cb281614258565b94506101008d013593506101208d013560ff81168114613cd157600080fd5b809350506101408d013591506101608d013590509295989b509295989b509295989b565b60008060408385031215613d0857600080fd5b613d1183613a37565b946020939093013593505050565b600060208284031215613d3157600080fd5b813567ffffffffffffffff811115613d4857600080fd5b61385c84828501613a60565b60008060408385031215613d6757600080fd5b823567ffffffffffffffff80821115613d7f57600080fd5b613d8b86838701613a60565b93506020850135915080821115613da157600080fd5b50613dae85828601613a60565b9150509250929050565b600060208284031215613dca57600080fd5b815161347281614258565b600060208284031215613de757600080fd5b5035919050565b600060208284031215613e0057600080fd5b5051919050565b600080600060608486031215613e1c57600080fd5b83359250613e2c60208501613b1f565b9150613e3a60408501613b1f565b90509250925092565b80518252602081015160208301526040810151612934604084018273ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525065ffffffffffff6040820151166040830152606081015161ffff8082166060850152806080840151166080850152505060a081015160a083015260c081015160c083015260e081015160e08301525050565b60008251613eea818460208701614166565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015613f3757613f23838551613e43565b928401926101409290920191600101613f10565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613f3757613fe783855173ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525065ffffffffffff6040820151166040830152606081015161ffff8082166060850152806080840151166080850152505060a081015160a083015260c081015160c083015260e081015160e08301525050565b928401926101009290920191600101613f5f565b6020808252825182820181905260009190848201906040850190845b81811015613f3757835183529284019291840191600101614017565b6020815260008251806020840152614052816040850160208701614166565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b61014081016140938284613e43565b92915050565b600061ffff8083168185168083038211156140b6576140b66141cb565b01949350505050565b600082198211156140d2576140d26141cb565b500190565b60008261410d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561414a5761414a6141cb565b500290565b600082821015614161576141616141cb565b500390565b60005b83811015614181578181015183820152602001614169565b838111156136e55750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141c4576141c46141cb565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461426657600080fd5b5056fe5661756c743a3a657874656e644c6f636b3a2076657374696e67206d617820646179732065786365656465645661756c743a3a657874656e644c6f636b3a20636c696666206d61782064617973206578636565646564a2646970667358221220e2c4315494f1eee8235cc2a6e8b836943870c6f695b837a68ba02d1000bbec3964736f6c63430008060033",
  "devdoc": {
    "details": "Contract for locking up tokens for set periods of time  + optionally providing locked tokens with voting power",
    "kind": "dev",
    "methods": {
      "activeLockBalances(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "activeLockIds(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the active lock ids"
        }
      },
      "activeLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "allActiveLockBalances()": {
        "returns": {
          "_0": "the active lock balances"
        }
      },
      "allActiveLockIds()": {
        "returns": {
          "_0": "the lock ids"
        }
      },
      "allActiveLocks()": {
        "returns": {
          "_0": "the locks"
        }
      },
      "allLocks(address)": {
        "params": {
          "receiver": "The address that has locked balances"
        },
        "returns": {
          "_0": "the locks"
        }
      },
      "claimAllUnlockedTokens(uint256[])": {
        "details": "Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "details": "Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "amounts": "The amount of each unlocked token to claim",
          "locks": "The lock ids for unlocked token balances"
        }
      },
      "claimableBalance(uint256)": {
        "details": "Returns 0 if cliff duration has not ended",
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "extendLock(uint256,uint16,uint16)": {
        "params": {
          "cliffDaysToAdd": "The number of days to add to cliff duration",
          "lockId": "The lock id for a locked token balance",
          "vestingDaysToAdd": "The number of days to add to vesting duration"
        }
      },
      "lockBalance(uint256)": {
        "params": {
          "lockId": "The lock ID"
        },
        "returns": {
          "balance": "the lock balance"
        }
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The cliff duration in days",
          "grantVotingPower": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "startTime": "The unix timestamp when the lock period will start",
          "vestingDurationInDays": "The vesting period in days"
        }
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)": {
        "details": "It is up to the frontend developer to ensure the token implements permit - otherwise this will fail",
        "params": {
          "amount": "The amount of tokens being locked",
          "cliffDurationInDays": "The lock cliff duration in days",
          "deadline": "The time at which to expire the signature",
          "grantVotingPower": "if true, give user voting power from tokens",
          "locker": "The account that is locking tokens",
          "r": "Half of the ECDSA signature pair",
          "receiver": "The account that will be able to retrieve unlocked tokens",
          "s": "Half of the ECDSA signature pair",
          "startTime": "The unix timestamp when the lock period will start",
          "token": "Address of token to lock",
          "v": "The recovery byte of the signature",
          "vestingDurationInDays": "The lock period in days"
        }
      },
      "tokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has unlocked balances",
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token` for `receiver`"
        }
      },
      "totalTokenBalance(address)": {
        "params": {
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token`"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate lock periods specified in days to seconds"
      }
    },
    "title": "Vault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LockCreated(address,address,address,uint256,uint256,uint48,uint16,uint16,uint256)": {
        "notice": "Event emitted when a new lock is created"
      },
      "LockExtended(uint256,uint16,uint16,uint16,uint16,uint48)": {
        "notice": "Event emitted when lock duration extended"
      },
      "UnlockedTokensClaimed(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an unlocked balance"
      }
    },
    "kind": "user",
    "methods": {
      "activeLockBalances(address)": {
        "notice": "Get all active token lock balances for receiver"
      },
      "activeLockIds(address)": {
        "notice": "Get all active token lock ids for receiver"
      },
      "activeLocks(address)": {
        "notice": "Get all active token locks for receiver"
      },
      "allActiveLockBalances()": {
        "notice": "Get all active token lock balances"
      },
      "allActiveLockIds()": {
        "notice": "Get all active token lock ids"
      },
      "allActiveLocks()": {
        "notice": "Get all active token locks"
      },
      "allLocks(address)": {
        "notice": "Get all token locks for receiver"
      },
      "claimAllUnlockedTokens(uint256[])": {
        "notice": "Allows receiver to claim all of their unlocked tokens for a set of locks"
      },
      "claimUnlockedTokenAmounts(uint256[],uint256[])": {
        "notice": "Allows receiver to claim a portion of their unlocked tokens for a given lock"
      },
      "claimableBalance(uint256)": {
        "notice": "Get claimable balance for a given lock id"
      },
      "constructor": {
        "notice": "Create a new Vault contract"
      },
      "extendLock(uint256,uint16,uint16)": {
        "notice": "Allows receiver extend lock periods for a given lock"
      },
      "lockBalance(uint256)": {
        "notice": "Get lock balance for a given lock id"
      },
      "lockIds(address,uint256)": {
        "notice": "Mapping of address to lock id"
      },
      "lockManager()": {
        "notice": "lockManager contract"
      },
      "lockTokens(address,address,address,uint48,uint256,uint16,uint16,bool)": {
        "notice": "Lock tokens, optionally providing voting power"
      },
      "lockTokensWithPermit(address,address,address,uint48,uint256,uint16,uint16,bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Lock tokens, using permit for approval"
      },
      "numLocks()": {
        "notice": "Number of locks"
      },
      "tokenBalance(address,address)": {
        "notice": "Get token balance of receiver"
      },
      "tokenLocks(uint256)": {
        "notice": "Mapping of lock id > token locks"
      },
      "totalTokenBalance(address)": {
        "notice": "Get total token balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3933,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILockManager)7393"
      },
      {
        "astId": 3977,
        "contract": "contracts/Vault.sol:Vault",
        "label": "tokenLocks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Lock)3950_storage)"
      },
      {
        "astId": 3983,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3986,
        "contract": "contracts/Vault.sol:Vault",
        "label": "numLocks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(ILockManager)7393": {
        "encoding": "inplace",
        "label": "contract ILockManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Lock)3950_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)3950_storage"
      },
      "t_struct(Lock)3950_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Lock",
        "members": [
          {
            "astId": 3935,
            "contract": "contracts/Vault.sol:Vault",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3937,
            "contract": "contracts/Vault.sol:Vault",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3939,
            "contract": "contracts/Vault.sol:Vault",
            "label": "startTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 3941,
            "contract": "contracts/Vault.sol:Vault",
            "label": "vestingDurationInDays",
            "offset": 26,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 3943,
            "contract": "contracts/Vault.sol:Vault",
            "label": "cliffDurationInDays",
            "offset": 28,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 3945,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3947,
            "contract": "contracts/Vault.sol:Vault",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3949,
            "contract": "contracts/Vault.sol:Vault",
            "label": "votingPower",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}