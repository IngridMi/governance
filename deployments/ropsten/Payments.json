{
  "address": "0xda1A74Bf39895905988E1bd9D5F2179706E28326",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationInSecs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cliffInDays",
          "type": "uint16"
        }
      ],
      "name": "PaymentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        }
      ],
      "name": "PaymentStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePaymentBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePaymentIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePaymentBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePaymentIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "allPayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "payments",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllAvailableTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "payments",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimAvailableTokenAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        }
      ],
      "name": "createPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "createPaymentWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "name": "paymentBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paymentIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        }
      ],
      "name": "stopPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPayments",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x41153fc3c454e1fb92664970a20d3226f4834212e1fe9420f74301dbd2af2a19",
  "receipt": {
    "to": null,
    "from": "0xFDf8BE775bb5e2Ba1983dC7b26A655321502E104",
    "contractAddress": "0xda1A74Bf39895905988E1bd9D5F2179706E28326",
    "transactionIndex": 15,
    "gasUsed": "3260717",
    "logsBloom": "0x
    "blockHash": "0xbd42fe170829a26885636683f675da476c5b67f75dc5145fe7496291472f17ce",
    "transactionHash": "0x41153fc3c454e1fb92664970a20d3226f4834212e1fe9420f74301dbd2af2a19",
    "logs": [],
    "blockNumber": 10912890,
    "cumulativeGasUsed": "6671985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "21474cc2819a0478274fbfd429831d35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInSecs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"}],\"name\":\"PaymentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"PaymentStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allPayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"}],\"name\":\"claimAllAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimAvailableTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"}],\"name\":\"createPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createPaymentWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"paymentBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"}],\"name\":\"stopPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPayments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for streaming token payments for set periods of time \",\"kind\":\"dev\",\"methods\":{\"activePaymentBalances(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the active payment balances\"}},\"activePaymentIds(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the active payment ids\"}},\"activePayments(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the payments\"}},\"allActivePaymentBalances()\":{\"returns\":{\"_0\":\"the active payment balances\"}},\"allActivePaymentIds()\":{\"returns\":{\"_0\":\"the payment ids\"}},\"allActivePayments()\":{\"returns\":{\"_0\":\"the payments\"}},\"allPayments(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the payments\"}},\"claimAllAvailableTokens(uint256[])\":{\"details\":\"Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"payments\":\"The payment ids for available token balances\"}},\"claimAvailableTokenAmounts(uint256[],uint256[])\":{\"details\":\"Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"amounts\":\"The amount of each available token to claim\",\"payments\":\"The payment ids for available token balances\"}},\"claimableBalance(uint256)\":{\"details\":\"Returns 0 if cliff duration has not ended\",\"params\":{\"paymentId\":\"The payment ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"createPayment(address,address,address,uint48,uint256,uint256,uint16)\":{\"params\":{\"amount\":\"The amount of tokens being paid\",\"cliffDurationInDays\":\"The cliff duration in days\",\"payer\":\"The account that is paymenting tokens\",\"paymentDurationInSecs\":\"The payment period in seconds\",\"receiver\":\"The account that will be able to retrieve available tokens\",\"startTime\":\"The unix timestamp when the payment period will start\"}},\"createPaymentWithPermit(address,address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"details\":\"It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\",\"params\":{\"amount\":\"The amount of tokens being paid\",\"cliffDurationInDays\":\"The payment cliff duration in days\",\"deadline\":\"The time at which to expire the signature\",\"payer\":\"The account that is paymenting tokens\",\"paymentDurationInSecs\":\"The payment period in seconds\",\"r\":\"Half of the ECDSA signature pair\",\"receiver\":\"The account that will be able to retrieve available tokens\",\"s\":\"Half of the ECDSA signature pair\",\"startTime\":\"The unix timestamp when the payment period will start\",\"token\":\"Address of token to payment\",\"v\":\"The recovery byte of the signature\"}},\"paymentBalance(uint256)\":{\"params\":{\"paymentId\":\"The payment ID\"},\"returns\":{\"balance\":\"the payment balance\"}},\"stopPayment(uint256,uint48)\":{\"params\":{\"paymentId\":\"The payment id for a payment\",\"stopTime\":\"Timestamp to stop payment, if 0 use current block.timestamp\"}},\"tokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has available balances\",\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token` for `receiver`\"}},\"totalTokenBalance(address)\":{\"params\":{\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token`\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate payment periods specified in days to seconds\"}},\"title\":\"Payments\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentCreated(address,address,address,uint256,uint256,uint48,uint256,uint16)\":{\"notice\":\"Event emitted when a new payment is created\"},\"PaymentStopped(uint256,uint256,uint48,uint48)\":{\"notice\":\"Event emitted when payment stopped\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an available balance\"}},\"kind\":\"user\",\"methods\":{\"activePaymentBalances(address)\":{\"notice\":\"Get all active token payment balances for receiver\"},\"activePaymentIds(address)\":{\"notice\":\"Get all active token payment ids for receiver\"},\"activePayments(address)\":{\"notice\":\"Get all active token payments for receiver\"},\"allActivePaymentBalances()\":{\"notice\":\"Get all active token payment balances\"},\"allActivePaymentIds()\":{\"notice\":\"Get all active token payment ids\"},\"allActivePayments()\":{\"notice\":\"Get all active token payments\"},\"allPayments(address)\":{\"notice\":\"Get all token payments for receiver\"},\"claimAllAvailableTokens(uint256[])\":{\"notice\":\"Allows receiver to claim all of their available tokens for a set of payments\"},\"claimAvailableTokenAmounts(uint256[],uint256[])\":{\"notice\":\"Allows receiver to claim a portion of their available tokens for a given payment\"},\"claimableBalance(uint256)\":{\"notice\":\"Get claimable balance for a given payment id\"},\"createPayment(address,address,address,uint48,uint256,uint256,uint16)\":{\"notice\":\"Create payment, optionally providing voting power\"},\"createPaymentWithPermit(address,address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Create payment, using permit for approval\"},\"numPayments()\":{\"notice\":\"Number of payments\"},\"paymentBalance(uint256)\":{\"notice\":\"Get payment balance for a given payment id\"},\"paymentIds(address,uint256)\":{\"notice\":\"Mapping of address to payment id\"},\"stopPayment(uint256,uint48)\":{\"notice\":\"Allows payer or receiver to stop existing payments for a given paymentId\"},\"tokenBalance(address,address)\":{\"notice\":\"Get token balance of receiver\"},\"tokenPayments(uint256)\":{\"notice\":\"Mapping of payment id > token payments\"},\"totalTokenBalance(address)\":{\"notice\":\"Get total token balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payments.sol\":\"Payments\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/Payments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Payments\\n * @dev Contract for streaming token payments for set periods of time \\n */\\ncontract Payments is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Payment definition\\n    struct Payment {\\n        address token;\\n        address receiver;\\n        address payer;\\n        uint48 startTime;\\n        uint48 stopTime;\\n        uint16 cliffDurationInDays;\\n        uint256 paymentDurationInSecs;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n    }\\n\\n    /// @notice Payment balance definition\\n    struct PaymentBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Payment payment;\\n    }\\n\\n    /// @notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    /// @dev Used to translate payment periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of payment id > token payments\\n    mapping (uint256 => Payment) public tokenPayments;\\n\\n    /// @notice Mapping of address to payment id\\n    mapping (address => uint256[]) public paymentIds;\\n\\n    /// @notice Number of payments\\n    uint256 public numPayments;\\n\\n    /// @notice Event emitted when a new payment is created\\n    event PaymentCreated(address indexed token, address indexed payer, address indexed receiver, uint256 paymentId, uint256 amount, uint48 startTime, uint256 durationInSecs, uint16 cliffInDays);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an available balance\\n    event TokensClaimed(address indexed receiver, address indexed token, uint256 indexed paymentId, uint256 amountClaimed);\\n\\n    /// @notice Event emitted when payment stopped\\n    event PaymentStopped(uint256 indexed paymentId, uint256 indexed originalDuration, uint48 stopTime, uint48 startTime);\\n\\n    /**\\n     * @notice Create payment, optionally providing voting power\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function createPayment(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    )\\n        external\\n    {\\n        require(paymentDurationInSecs > 0, \\\"Payments::createPayment: payment duration must be > 0\\\");\\n        require(paymentDurationInSecs <= 25*365*SECONDS_PER_DAY, \\\"Payments::createPayment: payment duration more than 25 years\\\");\\n        require(paymentDurationInSecs >= SECONDS_PER_DAY*cliffDurationInDays, \\\"Payments::createPayment: payment duration < cliff\\\");\\n        require(amount > 0, \\\"Payments::createPayment: amount not > 0\\\");\\n        _createPayment(token, payer, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Create payment, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token to payment\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The payment cliff duration in days\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function createPaymentWithPermit(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external\\n    {\\n        require(paymentDurationInSecs > 0, \\\"Payments::createPaymentWithPermit: payment duration must be > 0\\\");\\n        require(paymentDurationInSecs <= 25*365*SECONDS_PER_DAY, \\\"Payments::createPaymentWithPermit: payment duration more than 25 years\\\");\\n        require(paymentDurationInSecs >= SECONDS_PER_DAY*cliffDurationInDays, \\\"Payments::createPaymentWithPermit: duration < cliff\\\");\\n        require(amount > 0, \\\"Payments::createPaymentWithPermit: amount not > 0\\\");\\n\\n        // Set approval using permit signature\\n        IERC20Permit(token).permit(payer, address(this), amount, deadline, v, r, s);\\n        _createPayment(token, payer, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids\\n     * @return the payment ids\\n     */\\n    function allActivePaymentIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments\\n     * @return the payments\\n     */\\n    function allActivePayments() external view returns(Payment[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = tokenPayments[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances\\n     * @return the active payment balances\\n     */\\n    function allActivePaymentBalances() external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = paymentBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment ids\\n     */\\n    function activePaymentIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = receiverPaymentIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function allPayments(address receiver) external view returns(Payment[] memory){\\n        uint256[] memory allPaymentIds = paymentIds[receiver];\\n        Payment[] memory result = new Payment[](allPaymentIds.length);\\n        for (uint256 i; i < allPaymentIds.length; i++) {\\n            result[i] = tokenPayments[allPaymentIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function activePayments(address receiver) external view returns(Payment[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = tokenPayments[receiverPaymentIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment balances\\n     */\\n    function activePaymentBalances(address receiver) external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = paymentBalance(receiverPaymentIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numPayments; i++) {\\n            Payment memory tokenPayment = tokenPayments[i];\\n            if(tokenPayment.token == token && tokenPayment.startTime != tokenPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + tokenPayment.amount;\\n                if(block.timestamp > tokenPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + tokenPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = tokenPayment.stopTime > 0 && tokenPayment.stopTime < block.timestamp ? tokenPayment.stopTime - tokenPayment.startTime : block.timestamp - tokenPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= tokenPayment.cliffDurationInDays\\n                    ) {\\n                        if (tokenPayment.stopTime == 0 && elapsedTime >= tokenPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + tokenPayment.amount - tokenPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = tokenPayment.amount / tokenPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - tokenPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has available balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            Payment memory receiverPayment = tokenPayments[receiverPaymentIds[i]];\\n            if(receiverPayment.token == token && receiverPayment.startTime != receiverPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + receiverPayment.amount;\\n                if(block.timestamp > receiverPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + receiverPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = receiverPayment.stopTime > 0 && receiverPayment.stopTime < block.timestamp ? receiverPayment.stopTime - receiverPayment.startTime : block.timestamp - receiverPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= receiverPayment.cliffDurationInDays\\n                    ) {\\n                        if (receiverPayment.stopTime == 0 && elapsedTime >= receiverPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + receiverPayment.amount - receiverPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = receiverPayment.amount / receiverPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - receiverPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get payment balance for a given payment id\\n     * @param paymentId The payment ID\\n     * @return balance the payment balance\\n     */\\n    function paymentBalance(uint256 paymentId) public view returns (PaymentBalance memory balance) {\\n        balance.id = paymentId;\\n        balance.claimableAmount = claimableBalance(paymentId);\\n        balance.payment = tokenPayments[paymentId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given payment id\\n     * @dev Returns 0 if cliff duration has not ended\\n     * @param paymentId The payment ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 paymentId) public view returns (uint256) {\\n        Payment storage payment = tokenPayments[paymentId];\\n\\n        // For payments created with a future start date or payments stopped before starting, that hasn't been reached, return 0\\n        if (block.timestamp < payment.startTime || payment.startTime == payment.stopTime) {\\n            return 0;\\n        }\\n\\n        \\n        uint256 elapsedTime = payment.stopTime > 0 && payment.stopTime < block.timestamp ? payment.stopTime - payment.startTime : block.timestamp - payment.startTime;\\n        uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n        \\n        if (elapsedDays < payment.cliffDurationInDays) {\\n            return 0;\\n        }\\n\\n        if (payment.stopTime == 0 && elapsedTime >= payment.paymentDurationInSecs) {\\n            return payment.amount - payment.amountClaimed;\\n        }\\n        \\n        uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n        uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n        return amountAvailable - payment.amountClaimed;\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their available tokens for a set of payments\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     */\\n    function claimAllAvailableTokens(uint256[] memory payments) external nonReentrant {\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount > 0, \\\"Payments::claimAllAvailableTokens: claimableAmount is 0\\\");\\n            _claimTokens(payments[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their available tokens for a given payment\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     * @param amounts The amount of each available token to claim\\n     */\\n    function claimAvailableTokenAmounts(uint256[] memory payments, uint256[] memory amounts) external nonReentrant {\\n        require(payments.length == amounts.length, \\\"Payments::claimAvailableTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount >= amounts[i], \\\"Payments::claimAvailableTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(payments[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows payer or receiver to stop existing payments for a given paymentId\\n     * @param paymentId The payment id for a payment\\n     * @param stopTime Timestamp to stop payment, if 0 use current block.timestamp\\n     */\\n    function stopPayment(uint256 paymentId, uint48 stopTime) external nonReentrant {\\n        Payment storage payment = tokenPayments[paymentId];\\n        require(msg.sender == payment.payer || msg.sender == payment.receiver, \\\"Payments::stopPayment: msg.sender must be payer or receiver\\\");\\n        require(payment.stopTime == 0, \\\"Payments::stopPayment: payment already stopped\\\");\\n        stopTime = stopTime == 0 ? uint48(block.timestamp) : stopTime;\\n        require(stopTime < payment.startTime + payment.paymentDurationInSecs, \\\"Payments::stopPayment: stop time > payment duration\\\");\\n        if(stopTime > payment.startTime) {\\n            payment.stopTime = stopTime;\\n            uint256 newPaymentDuration = stopTime - payment.startTime;\\n            uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n            uint256 newPaymentAmount = paymentAmountPerSec * newPaymentDuration;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount - newPaymentAmount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, stopTime, payment.startTime);\\n        } else {\\n            payment.stopTime = payment.startTime;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, payment.startTime, payment.startTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal implementation of createPayment\\n     * @param payer The account that is paymenting tokens\\n     * @param receiver The account that will be able to retrieve available tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function _createPayment(\\n        address token,\\n        address payer,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the payment contract\\n        IERC20(token).safeTransferFrom(payer, address(this), amount);\\n\\n        uint48 paymentStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n\\n        // Create payment\\n        Payment memory payment = Payment({\\n            token: token,\\n            receiver: receiver,\\n            payer: payer,\\n            startTime: paymentStartTime,\\n            stopTime: 0,\\n            paymentDurationInSecs: paymentDurationInSecs,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0\\n        });\\n\\n        tokenPayments[numPayments] = payment;\\n        paymentIds[receiver].push(numPayments);\\n        emit PaymentCreated(token, payer, receiver, numPayments, amount, paymentStartTime, paymentDurationInSecs, cliffDurationInDays);\\n        \\n        // Increment payment id\\n        numPayments++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param paymentId The payment id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 paymentId, uint256 claimAmount) internal {\\n        Payment storage payment = tokenPayments[paymentId];\\n\\n        // Update claimed amount\\n        payment.amountClaimed = payment.amountClaimed + claimAmount;\\n\\n        // Release tokens\\n        IERC20(payment.token).safeTransfer(payment.receiver, claimAmount);\\n        emit TokensClaimed(payment.receiver, payment.token, paymentId, claimAmount);\\n    }\\n}\",\"keccak256\":\"0x05e391286e37bbcb5e3052e8f96ff287783e2b097cc9b23aeaa302f801b44879\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xfb353702aea34a243a22fdf36ed4f3808a620620fb5ccb9ed0b4b50ce4973a6b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x2970a703e286952cbcd3e454e351e2b83f405223bf71139359a6f0831834160b\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x389cc752255da30d02387f928f7f544d5848862150896db2ad2034bd662f8b62\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x9e33e3e7cf29521693c0c74f531404f73119ffc525984f30dd2a8af3dcc13899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556139fc806100256000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80636068eec8116100cd578063c2080cf811610081578063ef2c57fc11610066578063ef2c57fc146103e8578063f5465992146103f0578063f9c186861461040357600080fd5b8063c2080cf8146102ba578063e87b4b48146102cd57600080fd5b806397ff3758116100b257806397ff375814610267578063b343c64314610287578063ba638ca3146102a757600080fd5b80636068eec81461024157806385d3374f1461025457600080fd5b806337c9ef43116101245780634812160c116101095780634812160c146101fb5780634b3ac3d01461021b57806358e086821461022e57600080fd5b806337c9ef43146101d35780634108983f146101e857600080fd5b80630a93b84f146101565780631049334f1461017f5780632279fa4c146101b457806331e48f88146101cb575b600080fd5b61016961016436600461335e565b61040b565b60405161017691906136d6565b60405180910390f35b61019261018d366004613379565b610621565b6040805182518152602080840151908201529181015190820152606001610176565b6101bd60035481565b604051908152602001610176565b61016961096c565b6101e66101e13660046133ac565b610acf565b005b6101e66101f6366004613424565b610d4a565b61020e61020936600461335e565b611096565b6040516101769190613725565b6101e661022936600461353e565b611365565b6101e661023c366004613501565b611591565b6101e661024f3660046135dd565b6116f7565b6101bd6102623660046135c4565b611c7c565b61027a61027536600461335e565b611ed2565b6040516101769190613768565b61029a6102953660046135c4565b61205c565b60405161017691906137f1565b61020e6102b536600461335e565b6121a5565b6101bd6102c83660046134d7565b612402565b6103786102db3660046135c4565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015473ffffffffffffffffffffffffffffffffffffffff96871696948516959484169465ffffffffffff7401000000000000000000000000000000000000000086048116957a0100000000000000000000000000000000000000000000000000009004169361ffff16929189565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a0152969098169587019590955265ffffffffffff938416606087015291909216608085015261ffff90911660a084015260c083015260e082015261010081019190915261012001610176565b61027a612433565b6101926103fe36600461335e565b612519565b61020e6127c7565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561047c57602002820191906000526020600020905b815481526020019060010190808311610468575b5050505050905060005b81518110156104d95760006104b38383815181106104a6576104a6613968565b6020026020010151611c7c565b11156104c757826104c381613900565b9350505b806104d181613900565b915050610486565b5060008267ffffffffffffffff8111156104f5576104f5613997565b60405190808252806020026020018201604052801561058957816020015b6105766040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8152602001906001900390816105135790505b5090506000805b83518110156106165760006105b08583815181106104a6576104a6613968565b1115610604576105d88482815181106105cb576105cb613968565b602002602001015161205c565b8383815181106105ea576105ea613968565b6020026020010181905250818061060090613900565b9250505b8061060e81613900565b915050610590565b509095945050505050565b61064560405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320805482518185028101850190935280835291929091908301828280156106b257602002820191906000526020600020905b81548152602001906001019080831161069e575b5050505050905060005b8151811015610964576000600160008484815181106106dd576106dd613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff908116808352600184015482169583019590955260028301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504811660608401527a0100000000000000000000000000000000000000000000000000009094049093166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e0820152600690910154610100820152925087161480156107e15750806080015165ffffffffffff16816060015165ffffffffffff1614155b156109515760e081015184516107f79190613806565b8452606081015165ffffffffffff164211156109515780610100015184604001516108229190613806565b6040850152608081015160009065ffffffffffff1615801590610850575042826080015165ffffffffffff16105b61087057606082015161086b9065ffffffffffff1642613896565b61088d565b8160600151826080015161088491906138ad565b65ffffffffffff165b9050600061089e620151808361381e565b90508260a0015161ffff16811061094e57608083015165ffffffffffff161580156108cd57508260c001518210155b15610900578261010001518360e0015187602001516108ec9190613806565b6108f69190613896565b602087015261094e565b60008360c001518460e00151610916919061381e565b905060006109248483613859565b905084610100015181896020015161093c9190613806565b6109469190613896565b602089015250505b50505b508061095c81613900565b9150506106bc565b505092915050565b60606000805b6003548110156109ad57600061098782611c7c565b111561099b578161099781613900565b9250505b806109a581613900565b915050610972565b5060008167ffffffffffffffff8111156109c9576109c9613997565b604051908082528060200260200182016040528015610a5d57816020015b610a4a6040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8152602001906001900390816109e75790505b5090506000805b600354811015610ac6576000610a7982611c7c565b1115610ab457610a888161205c565b838381518110610a9a57610a9a613968565b60200260200101819052508180610ab090613900565b9250505b80610abe81613900565b915050610a64565b50909392505050565b60008211610b64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e206d757374206265203e2030000000000000000000000060648201526084015b60405180910390fd5b610b73620151806123a5613859565b821115610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e206d6f7265207468616e203235207965617273000000006064820152608401610b5b565b610c1361ffff821662015180613859565b821015610ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e203c20636c6966660000000000000000000000000000006064820152608401610b5b565b60008311610d32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5061796d656e74733a3a6372656174655061796d656e743a20616d6f756e742060448201527f6e6f74203e2030000000000000000000000000000000000000000000000000006064820152608401610b5b565b610d41878787878787876129e9565b50505050505050565b60008611610dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a207061796d656e74206475726174696f6e206d757374206265203e2030006064820152608401610b5b565b610de9620151806123a5613859565b861115610e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a207061796d656e74206475726174696f6e206d6f7265207468616e20323560648201527f2079656172730000000000000000000000000000000000000000000000000000608482015260a401610b5b565b610eaf61ffff861662015180613859565b861015610f3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a206475726174696f6e203c20636c696666000000000000000000000000006064820152608401610b5b565b60008711610fce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a20616d6f756e74206e6f74203e20300000000000000000000000000000006064820152608401610b5b565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152306024830152604482018990526064820186905260ff8516608483015260a4820184905260c482018390528c169063d505accf9060e401600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505050506110898b8b8b8b8b8b8b6129e9565b5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561110757602002820191906000526020600020905b8154815260200190600101908083116110f3575b5050505050905060005b81518110156111575760006111318383815181106104a6576104a6613968565b1115611145578261114181613900565b9350505b8061114f81613900565b915050611111565b5060008267ffffffffffffffff81111561117357611173613997565b60405190808252806020026020018201604052801561120857816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816111915790505b5090506000805b835181101561061657600061122f8583815181106104a6576104a6613968565b1115611353576001600085838151811061124b5761124b613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e0820152600690910154610100820152835184908490811061133957611339613968565b6020026020010181905250818061134f90613900565b9250505b8061135d81613900565b91505061120f565b600260005414156113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b6002600055805182511461146a57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20617272617973206d7573742062652073616d65206c656e6774686064820152608401610b5b565b60005b825181101561158757600061148d8483815181106104a6576104a6613968565b90508282815181106114a1576114a1613968565b6020026020010151811015611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e7400006064820152608401610b5b565b61157484838151811061154d5761154d613968565b602002602001015184848151811061156757611567613968565b6020026020010151612d7f565b508061157f81613900565b91505061146d565b5050600160005550565b600260005414156115fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b600260009081555b81518110156116ee5760006116268383815181106104a6576104a6613968565b9050600081116116b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5061796d656e74733a3a636c61696d416c6c417661696c61626c65546f6b656e60448201527f733a20636c61696d61626c65416d6f756e7420697320300000000000000000006064820152608401610b5b565b6116db8383815181106116cd576116cd613968565b602002602001015182612d7f565b50806116e681613900565b915050611606565b50506001600055565b60026000541415611764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b600260008181558381526001602052604090209081015473ffffffffffffffffffffffffffffffffffffffff163314806117b75750600181015473ffffffffffffffffffffffffffffffffffffffff1633145b611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f5061796d656e74733a3a73746f705061796d656e743a206d73672e73656e646560448201527f72206d757374206265207061796572206f7220726563656976657200000000006064820152608401610b5b565b60028101547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16156118fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a73746f705061796d656e743a207061796d656e74206160448201527f6c72656164792073746f707065640000000000000000000000000000000000006064820152608401610b5b565b65ffffffffffff82161561190f5781611911565b425b600482015460028301549193506119479174010000000000000000000000000000000000000000900465ffffffffffff16613806565b8265ffffffffffff16106119dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a73746f705061796d656e743a2073746f702074696d6560448201527f203e207061796d656e74206475726174696f6e000000000000000000000000006064820152608401610b5b565b600281015465ffffffffffff7401000000000000000000000000000000000000000090910481169083161115611b795760028101805465ffffffffffff8085167a0100000000000000000000000000000000000000000000000000000279ffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911791829055600091611a87917401000000000000000000000000000000000000000090910416846138ad565b65ffffffffffff169050600082600401548360050154611aa7919061381e565b90506000611ab58383613859565b60028501546005860154919250611b099173ffffffffffffffffffffffffffffffffffffffff90911690611aea908490613896565b865473ffffffffffffffffffffffffffffffffffffffff169190612e29565b600484015460028501546040805165ffffffffffff898116825274010000000000000000000000000000000000000000909304909216602083015288917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a3505050611587565b6002810180547a01000000000000000000000000000000000000000000000000000065ffffffffffff740100000000000000000000000000000000000000008304160279ffffffffffffffffffffffffffffffffffffffffffffffffffff8216811790925560058301548354611c0e9373ffffffffffffffffffffffffffffffffffffffff9182169390821691161790612e29565b60048101546002820154604080517401000000000000000000000000000000000000000090920465ffffffffffff16808352602083015285917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a35050600160005550565b6000818152600160205260408120600281015474010000000000000000000000000000000000000000900465ffffffffffff16421080611d005750600281015474010000000000000000000000000000000000000000810465ffffffffffff9081167a01000000000000000000000000000000000000000000000000000090920416145b15611d0e5750600092915050565b60028101546000907a010000000000000000000000000000000000000000000000000000900465ffffffffffff1615801590611d7457506002820154427a01000000000000000000000000000000000000000000000000000090910465ffffffffffff16105b611dac576002820154611da79074010000000000000000000000000000000000000000900465ffffffffffff1642613896565b611e04565b6002820154611dfb9065ffffffffffff7401000000000000000000000000000000000000000082048116917a0100000000000000000000000000000000000000000000000000009004166138ad565b65ffffffffffff165b90506000611e15620151808361381e565b600384015490915061ffff16811015611e3357506000949350505050565b60028301547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16158015611e6f575082600401548210155b15611e915782600601548360050154611e889190613896565b95945050505050565b600083600401548460050154611ea7919061381e565b90506000611eb58483613859565b9050846006015481611ec79190613896565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015611f4357602002820191906000526020600020905b815481526020019060010190808311611f2f575b5050505050905060005b8151811015611f93576000611f6d8383815181106104a6576104a6613968565b1115611f815782611f7d81613900565b9350505b80611f8b81613900565b915050611f4d565b5060008267ffffffffffffffff811115611faf57611faf613997565b604051908082528060200260200182016040528015611fd8578160200160208202803683370190505b5090506000805b8351811015610616576000611fff8583815181106104a6576104a6613968565b111561204a5783818151811061201757612017613968565b602002602001015183838151811061203157612031613968565b60209081029190910101528161204681613900565b9250505b8061205481613900565b915050611fdf565b6120bf6040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8181526120cb82611c7c565b60208083019190915260009283526001808252604093849020845161012081018652815473ffffffffffffffffffffffffffffffffffffffff90811682529282015483169381019390935260028101549182168386015265ffffffffffff740100000000000000000000000000000000000000008304811660608501527a0100000000000000000000000000000000000000000000000000009092049091166080830152600381015461ffff1660a0830152600481015460c0830152600581015460e0830152600601546101008201529181019190915290565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949383018282801561221157602002820191906000526020600020905b8154815260200190600101908083116121fd575b505050505090506000815167ffffffffffffffff81111561223457612234613997565b6040519080825280602002602001820160405280156122c957816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816122525790505b50905060005b82518110156123fa57600160008483815181106122ee576122ee613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015282518390839081106123dc576123dc613968565b602002602001018190525080806123f290613900565b9150506122cf565b509392505050565b6002602052816000526040600020818154811061241e57600080fd5b90600052602060002001600091509150505481565b60606000805b60035481101561247457600061244e82611c7c565b1115612462578161245e81613900565b9250505b8061246c81613900565b915050612439565b5060008167ffffffffffffffff81111561249057612490613997565b6040519080825280602002602001820160405280156124b9578160200160208202803683370190505b5090506000805b600354811015610ac65760006124d582611c7c565b111561250757808383815181106124ee576124ee613968565b60209081029190910101528161250381613900565b9250505b8061251181613900565b9150506124c0565b61253d60405180606001604052806000815260200160008152602001600081525090565b60005b6003548110156127c157600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff9081168083529483015481169382019390935260028201548084169582019590955265ffffffffffff740100000000000000000000000000000000000000008604811660608301527a0100000000000000000000000000000000000000000000000000009095049094166080850152600381015461ffff1660a0850152600481015460c0850152600581015460e085015260060154610100840152851614801561263e5750806080015165ffffffffffff16816060015165ffffffffffff1614155b156127ae5760e081015183516126549190613806565b8352606081015165ffffffffffff164211156127ae57806101000151836040015161267f9190613806565b6040840152608081015160009065ffffffffffff16158015906126ad575042826080015165ffffffffffff16105b6126cd5760608201516126c89065ffffffffffff1642613896565b6126ea565b816060015182608001516126e191906138ad565b65ffffffffffff165b905060006126fb620151808361381e565b90508260a0015161ffff1681106127ab57608083015165ffffffffffff1615801561272a57508260c001518210155b1561275d578261010001518360e0015186602001516127499190613806565b6127539190613896565b60208601526127ab565b60008360c001518460e00151612773919061381e565b905060006127818483613859565b90508461010001518188602001516127999190613806565b6127a39190613896565b602088015250505b50505b50806127b981613900565b915050612540565b50919050565b60606000805b6003548110156128085760006127e282611c7c565b11156127f657816127f281613900565b9250505b8061280081613900565b9150506127cd565b5060008167ffffffffffffffff81111561282457612824613997565b6040519080825280602002602001820160405280156128b957816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816128425790505b5090506000805b600354811015610ac65760006128d582611c7c565b11156129d757600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff90811682529382015484169281019290925260028101549283169382019390935265ffffffffffff740100000000000000000000000000000000000000008304811660608301527a0100000000000000000000000000000000000000000000000000009092049091166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015283518490849081106129bd576129bd613968565b602002602001018190525081806129d390613900565b9250505b806129e181613900565b9150506128c0565b612a0b73ffffffffffffffffffffffffffffffffffffffff8816873086612f02565b600065ffffffffffff851615612a215784612a23565b425b905060006040518061012001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018365ffffffffffff168152602001600065ffffffffffff1681526020018461ffff168152602001858152602001868152602001600081525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550608082015181600201601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160030160006101000a81548161ffff021916908361ffff16021790555060c0820151816004015560e082015181600501556101008201518160060155905050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc79ad252141c555f8bc2366645b742a84d8d746c04c665a657db846f14a9143860035489878a8a604051612d57959493929190948552602085019390935265ffffffffffff919091166040840152606083015261ffff16608082015260a00190565b60405180910390a460038054906000612d6f83613900565b9190505550505050505050505050565b60008281526001602052604090206006810154612d9d908390613806565b600682015560018101548154612dcd9173ffffffffffffffffffffffffffffffffffffffff918216911684612e29565b80546001820154604051848152859273ffffffffffffffffffffffffffffffffffffffff9081169216907fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de69060200160405180910390a4505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612efd9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612f66565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612f609085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e7b565b50505050565b6000612fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130729092919063ffffffff16565b805190915015612efd5780806020019051810190612fe691906135a2565b612efd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b5b565b6060613081848460008561308b565b90505b9392505050565b60608247101561311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b5b565b843b613185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b5b565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131ae91906136ba565b60006040518083038185875af1925050503d80600081146131eb576040519150601f19603f3d011682016040523d82523d6000602084013e6131f0565b606091505b5091509150611ec78282866060831561320a575081613084565b82511561321a5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b91906137a0565b803573ffffffffffffffffffffffffffffffffffffffff8116811461327257600080fd5b919050565b600082601f83011261328857600080fd5b8135602067ffffffffffffffff808311156132a5576132a5613997565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156132e8576132e8613997565b6040528481528381019250868401828801850189101561330757600080fd5b600092505b8583101561332a57803584529284019260019290920191840161330c565b50979650505050505050565b803561ffff8116811461327257600080fd5b803565ffffffffffff8116811461327257600080fd5b60006020828403121561337057600080fd5b6130848261324e565b6000806040838503121561338c57600080fd5b6133958361324e565b91506133a36020840161324e565b90509250929050565b600080600080600080600060e0888a0312156133c757600080fd5b6133d08861324e565b96506133de6020890161324e565b95506133ec6040890161324e565b94506133fa60608901613348565b93506080880135925060a0880135915061341660c08901613336565b905092959891949750929550565b60008060008060008060008060008060006101608c8e03121561344657600080fd5b61344f8c61324e565b9a5061345d60208d0161324e565b995061346b60408d0161324e565b985061347960608d01613348565b975060808c0135965060a08c0135955061349560c08d01613336565b945060e08c013593506101008c013560ff811681146134b357600080fd5b809350506101208c013591506101408c013590509295989b509295989b9093969950565b600080604083850312156134ea57600080fd5b6134f38361324e565b946020939093013593505050565b60006020828403121561351357600080fd5b813567ffffffffffffffff81111561352a57600080fd5b61353684828501613277565b949350505050565b6000806040838503121561355157600080fd5b823567ffffffffffffffff8082111561356957600080fd5b61357586838701613277565b9350602085013591508082111561358b57600080fd5b5061359885828601613277565b9150509250929050565b6000602082840312156135b457600080fd5b8151801515811461308457600080fd5b6000602082840312156135d657600080fd5b5035919050565b600080604083850312156135f057600080fd5b823591506133a360208401613348565b80518252602081015160208301526040810151612efd60408401825b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151613669606084018265ffffffffffff169052565b506080810151613683608084018265ffffffffffff169052565b5060a081015161369960a084018261ffff169052565b5060c0818101519083015260e0808201519083015261010090810151910152565b600082516136cc8184602087016138d4565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561371957613705838551613600565b9284019261016092909201916001016136f2565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156137195761375483855161361c565b928401926101209290920191600101613741565b6020808252825182820181905260009190848201906040850190845b8181101561371957835183529284019291840191600101613784565b60208152600082518060208401526137bf8160408501602087016138d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b61016081016138008284613600565b92915050565b6000821982111561381957613819613939565b500190565b600082613854577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561389157613891613939565b500290565b6000828210156138a8576138a8613939565b500390565b600065ffffffffffff838116908316818110156138cc576138cc613939565b039392505050565b60005b838110156138ef5781810151838201526020016138d7565b83811115612f605750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561393257613932613939565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122062d468d4ce2ec97e20ddec9ec69c6f1fc8a05b360e75e063a3406f71c58574b364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80636068eec8116100cd578063c2080cf811610081578063ef2c57fc11610066578063ef2c57fc146103e8578063f5465992146103f0578063f9c186861461040357600080fd5b8063c2080cf8146102ba578063e87b4b48146102cd57600080fd5b806397ff3758116100b257806397ff375814610267578063b343c64314610287578063ba638ca3146102a757600080fd5b80636068eec81461024157806385d3374f1461025457600080fd5b806337c9ef43116101245780634812160c116101095780634812160c146101fb5780634b3ac3d01461021b57806358e086821461022e57600080fd5b806337c9ef43146101d35780634108983f146101e857600080fd5b80630a93b84f146101565780631049334f1461017f5780632279fa4c146101b457806331e48f88146101cb575b600080fd5b61016961016436600461335e565b61040b565b60405161017691906136d6565b60405180910390f35b61019261018d366004613379565b610621565b6040805182518152602080840151908201529181015190820152606001610176565b6101bd60035481565b604051908152602001610176565b61016961096c565b6101e66101e13660046133ac565b610acf565b005b6101e66101f6366004613424565b610d4a565b61020e61020936600461335e565b611096565b6040516101769190613725565b6101e661022936600461353e565b611365565b6101e661023c366004613501565b611591565b6101e661024f3660046135dd565b6116f7565b6101bd6102623660046135c4565b611c7c565b61027a61027536600461335e565b611ed2565b6040516101769190613768565b61029a6102953660046135c4565b61205c565b60405161017691906137f1565b61020e6102b536600461335e565b6121a5565b6101bd6102c83660046134d7565b612402565b6103786102db3660046135c4565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015473ffffffffffffffffffffffffffffffffffffffff96871696948516959484169465ffffffffffff7401000000000000000000000000000000000000000086048116957a0100000000000000000000000000000000000000000000000000009004169361ffff16929189565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a0152969098169587019590955265ffffffffffff938416606087015291909216608085015261ffff90911660a084015260c083015260e082015261010081019190915261012001610176565b61027a612433565b6101926103fe36600461335e565b612519565b61020e6127c7565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561047c57602002820191906000526020600020905b815481526020019060010190808311610468575b5050505050905060005b81518110156104d95760006104b38383815181106104a6576104a6613968565b6020026020010151611c7c565b11156104c757826104c381613900565b9350505b806104d181613900565b915050610486565b5060008267ffffffffffffffff8111156104f5576104f5613997565b60405190808252806020026020018201604052801561058957816020015b6105766040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8152602001906001900390816105135790505b5090506000805b83518110156106165760006105b08583815181106104a6576104a6613968565b1115610604576105d88482815181106105cb576105cb613968565b602002602001015161205c565b8383815181106105ea576105ea613968565b6020026020010181905250818061060090613900565b9250505b8061060e81613900565b915050610590565b509095945050505050565b61064560405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320805482518185028101850190935280835291929091908301828280156106b257602002820191906000526020600020905b81548152602001906001019080831161069e575b5050505050905060005b8151811015610964576000600160008484815181106106dd576106dd613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff908116808352600184015482169583019590955260028301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504811660608401527a0100000000000000000000000000000000000000000000000000009094049093166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e0820152600690910154610100820152925087161480156107e15750806080015165ffffffffffff16816060015165ffffffffffff1614155b156109515760e081015184516107f79190613806565b8452606081015165ffffffffffff164211156109515780610100015184604001516108229190613806565b6040850152608081015160009065ffffffffffff1615801590610850575042826080015165ffffffffffff16105b61087057606082015161086b9065ffffffffffff1642613896565b61088d565b8160600151826080015161088491906138ad565b65ffffffffffff165b9050600061089e620151808361381e565b90508260a0015161ffff16811061094e57608083015165ffffffffffff161580156108cd57508260c001518210155b15610900578261010001518360e0015187602001516108ec9190613806565b6108f69190613896565b602087015261094e565b60008360c001518460e00151610916919061381e565b905060006109248483613859565b905084610100015181896020015161093c9190613806565b6109469190613896565b602089015250505b50505b508061095c81613900565b9150506106bc565b505092915050565b60606000805b6003548110156109ad57600061098782611c7c565b111561099b578161099781613900565b9250505b806109a581613900565b915050610972565b5060008167ffffffffffffffff8111156109c9576109c9613997565b604051908082528060200260200182016040528015610a5d57816020015b610a4a6040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8152602001906001900390816109e75790505b5090506000805b600354811015610ac6576000610a7982611c7c565b1115610ab457610a888161205c565b838381518110610a9a57610a9a613968565b60200260200101819052508180610ab090613900565b9250505b80610abe81613900565b915050610a64565b50909392505050565b60008211610b64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e206d757374206265203e2030000000000000000000000060648201526084015b60405180910390fd5b610b73620151806123a5613859565b821115610c02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e206d6f7265207468616e203235207965617273000000006064820152608401610b5b565b610c1361ffff821662015180613859565b821015610ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5061796d656e74733a3a6372656174655061796d656e743a207061796d656e7460448201527f206475726174696f6e203c20636c6966660000000000000000000000000000006064820152608401610b5b565b60008311610d32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5061796d656e74733a3a6372656174655061796d656e743a20616d6f756e742060448201527f6e6f74203e2030000000000000000000000000000000000000000000000000006064820152608401610b5b565b610d41878787878787876129e9565b50505050505050565b60008611610dda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a207061796d656e74206475726174696f6e206d757374206265203e2030006064820152608401610b5b565b610de9620151806123a5613859565b861115610e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a207061796d656e74206475726174696f6e206d6f7265207468616e20323560648201527f2079656172730000000000000000000000000000000000000000000000000000608482015260a401610b5b565b610eaf61ffff861662015180613859565b861015610f3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a206475726174696f6e203c20636c696666000000000000000000000000006064820152608401610b5b565b60008711610fce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5061796d656e74733a3a6372656174655061796d656e74576974685065726d6960448201527f743a20616d6f756e74206e6f74203e20300000000000000000000000000000006064820152608401610b5b565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152306024830152604482018990526064820186905260ff8516608483015260a4820184905260c482018390528c169063d505accf9060e401600060405180830381600087803b15801561106257600080fd5b505af1158015611076573d6000803e3d6000fd5b505050506110898b8b8b8b8b8b8b6129e9565b5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260209081526040808320805482518185028101850190935280835260609493849392919083018282801561110757602002820191906000526020600020905b8154815260200190600101908083116110f3575b5050505050905060005b81518110156111575760006111318383815181106104a6576104a6613968565b1115611145578261114181613900565b9350505b8061114f81613900565b915050611111565b5060008267ffffffffffffffff81111561117357611173613997565b60405190808252806020026020018201604052801561120857816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816111915790505b5090506000805b835181101561061657600061122f8583815181106104a6576104a6613968565b1115611353576001600085838151811061124b5761124b613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e0820152600690910154610100820152835184908490811061133957611339613968565b6020026020010181905250818061134f90613900565b9250505b8061135d81613900565b91505061120f565b600260005414156113d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b6002600055805182511461146a57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20617272617973206d7573742062652073616d65206c656e6774686064820152608401610b5b565b60005b825181101561158757600061148d8483815181106104a6576104a6613968565b90508282815181106114a1576114a1613968565b6020026020010151811015611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e7400006064820152608401610b5b565b61157484838151811061154d5761154d613968565b602002602001015184848151811061156757611567613968565b6020026020010151612d7f565b508061157f81613900565b91505061146d565b5050600160005550565b600260005414156115fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b600260009081555b81518110156116ee5760006116268383815181106104a6576104a6613968565b9050600081116116b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5061796d656e74733a3a636c61696d416c6c417661696c61626c65546f6b656e60448201527f733a20636c61696d61626c65416d6f756e7420697320300000000000000000006064820152608401610b5b565b6116db8383815181106116cd576116cd613968565b602002602001015182612d7f565b50806116e681613900565b915050611606565b50506001600055565b60026000541415611764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b5b565b600260008181558381526001602052604090209081015473ffffffffffffffffffffffffffffffffffffffff163314806117b75750600181015473ffffffffffffffffffffffffffffffffffffffff1633145b611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f5061796d656e74733a3a73746f705061796d656e743a206d73672e73656e646560448201527f72206d757374206265207061796572206f7220726563656976657200000000006064820152608401610b5b565b60028101547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16156118fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a73746f705061796d656e743a207061796d656e74206160448201527f6c72656164792073746f707065640000000000000000000000000000000000006064820152608401610b5b565b65ffffffffffff82161561190f5781611911565b425b600482015460028301549193506119479174010000000000000000000000000000000000000000900465ffffffffffff16613806565b8265ffffffffffff16106119dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a73746f705061796d656e743a2073746f702074696d6560448201527f203e207061796d656e74206475726174696f6e000000000000000000000000006064820152608401610b5b565b600281015465ffffffffffff7401000000000000000000000000000000000000000090910481169083161115611b795760028101805465ffffffffffff8085167a0100000000000000000000000000000000000000000000000000000279ffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911791829055600091611a87917401000000000000000000000000000000000000000090910416846138ad565b65ffffffffffff169050600082600401548360050154611aa7919061381e565b90506000611ab58383613859565b60028501546005860154919250611b099173ffffffffffffffffffffffffffffffffffffffff90911690611aea908490613896565b865473ffffffffffffffffffffffffffffffffffffffff169190612e29565b600484015460028501546040805165ffffffffffff898116825274010000000000000000000000000000000000000000909304909216602083015288917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a3505050611587565b6002810180547a01000000000000000000000000000000000000000000000000000065ffffffffffff740100000000000000000000000000000000000000008304160279ffffffffffffffffffffffffffffffffffffffffffffffffffff8216811790925560058301548354611c0e9373ffffffffffffffffffffffffffffffffffffffff9182169390821691161790612e29565b60048101546002820154604080517401000000000000000000000000000000000000000090920465ffffffffffff16808352602083015285917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a35050600160005550565b6000818152600160205260408120600281015474010000000000000000000000000000000000000000900465ffffffffffff16421080611d005750600281015474010000000000000000000000000000000000000000810465ffffffffffff9081167a01000000000000000000000000000000000000000000000000000090920416145b15611d0e5750600092915050565b60028101546000907a010000000000000000000000000000000000000000000000000000900465ffffffffffff1615801590611d7457506002820154427a01000000000000000000000000000000000000000000000000000090910465ffffffffffff16105b611dac576002820154611da79074010000000000000000000000000000000000000000900465ffffffffffff1642613896565b611e04565b6002820154611dfb9065ffffffffffff7401000000000000000000000000000000000000000082048116917a0100000000000000000000000000000000000000000000000000009004166138ad565b65ffffffffffff165b90506000611e15620151808361381e565b600384015490915061ffff16811015611e3357506000949350505050565b60028301547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16158015611e6f575082600401548210155b15611e915782600601548360050154611e889190613896565b95945050505050565b600083600401548460050154611ea7919061381e565b90506000611eb58483613859565b9050846006015481611ec79190613896565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015611f4357602002820191906000526020600020905b815481526020019060010190808311611f2f575b5050505050905060005b8151811015611f93576000611f6d8383815181106104a6576104a6613968565b1115611f815782611f7d81613900565b9350505b80611f8b81613900565b915050611f4d565b5060008267ffffffffffffffff811115611faf57611faf613997565b604051908082528060200260200182016040528015611fd8578160200160208202803683370190505b5090506000805b8351811015610616576000611fff8583815181106104a6576104a6613968565b111561204a5783818151811061201757612017613968565b602002602001015183838151811061203157612031613968565b60209081029190910101528161204681613900565b9250505b8061205481613900565b915050611fdf565b6120bf6040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b8181526120cb82611c7c565b60208083019190915260009283526001808252604093849020845161012081018652815473ffffffffffffffffffffffffffffffffffffffff90811682529282015483169381019390935260028101549182168386015265ffffffffffff740100000000000000000000000000000000000000008304811660608501527a0100000000000000000000000000000000000000000000000000009092049091166080830152600381015461ffff1660a0830152600481015460c0830152600581015460e0830152600601546101008201529181019190915290565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949383018282801561221157602002820191906000526020600020905b8154815260200190600101908083116121fd575b505050505090506000815167ffffffffffffffff81111561223457612234613997565b6040519080825280602002602001820160405280156122c957816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816122525790505b50905060005b82518110156123fa57600160008483815181106122ee576122ee613968565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015282518390839081106123dc576123dc613968565b602002602001018190525080806123f290613900565b9150506122cf565b509392505050565b6002602052816000526040600020818154811061241e57600080fd5b90600052602060002001600091509150505481565b60606000805b60035481101561247457600061244e82611c7c565b1115612462578161245e81613900565b9250505b8061246c81613900565b915050612439565b5060008167ffffffffffffffff81111561249057612490613997565b6040519080825280602002602001820160405280156124b9578160200160208202803683370190505b5090506000805b600354811015610ac65760006124d582611c7c565b111561250757808383815181106124ee576124ee613968565b60209081029190910101528161250381613900565b9250505b8061251181613900565b9150506124c0565b61253d60405180606001604052806000815260200160008152602001600081525090565b60005b6003548110156127c157600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff9081168083529483015481169382019390935260028201548084169582019590955265ffffffffffff740100000000000000000000000000000000000000008604811660608301527a0100000000000000000000000000000000000000000000000000009095049094166080850152600381015461ffff1660a0850152600481015460c0850152600581015460e085015260060154610100840152851614801561263e5750806080015165ffffffffffff16816060015165ffffffffffff1614155b156127ae5760e081015183516126549190613806565b8352606081015165ffffffffffff164211156127ae57806101000151836040015161267f9190613806565b6040840152608081015160009065ffffffffffff16158015906126ad575042826080015165ffffffffffff16105b6126cd5760608201516126c89065ffffffffffff1642613896565b6126ea565b816060015182608001516126e191906138ad565b65ffffffffffff165b905060006126fb620151808361381e565b90508260a0015161ffff1681106127ab57608083015165ffffffffffff1615801561272a57508260c001518210155b1561275d578261010001518360e0015186602001516127499190613806565b6127539190613896565b60208601526127ab565b60008360c001518460e00151612773919061381e565b905060006127818483613859565b90508461010001518188602001516127999190613806565b6127a39190613896565b602088015250505b50505b50806127b981613900565b915050612540565b50919050565b60606000805b6003548110156128085760006127e282611c7c565b11156127f657816127f281613900565b9250505b8061280081613900565b9150506127cd565b5060008167ffffffffffffffff81111561282457612824613997565b6040519080825280602002602001820160405280156128b957816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816128425790505b5090506000805b600354811015610ac65760006128d582611c7c565b11156129d757600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff90811682529382015484169281019290925260028101549283169382019390935265ffffffffffff740100000000000000000000000000000000000000008304811660608301527a0100000000000000000000000000000000000000000000000000009092049091166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015283518490849081106129bd576129bd613968565b602002602001018190525081806129d390613900565b9250505b806129e181613900565b9150506128c0565b612a0b73ffffffffffffffffffffffffffffffffffffffff8816873086612f02565b600065ffffffffffff851615612a215784612a23565b425b905060006040518061012001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018365ffffffffffff168152602001600065ffffffffffff1681526020018461ffff168152602001858152602001868152602001600081525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550608082015181600201601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160030160006101000a81548161ffff021916908361ffff16021790555060c0820151816004015560e082015181600501556101008201518160060155905050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fc79ad252141c555f8bc2366645b742a84d8d746c04c665a657db846f14a9143860035489878a8a604051612d57959493929190948552602085019390935265ffffffffffff919091166040840152606083015261ffff16608082015260a00190565b60405180910390a460038054906000612d6f83613900565b9190505550505050505050505050565b60008281526001602052604090206006810154612d9d908390613806565b600682015560018101548154612dcd9173ffffffffffffffffffffffffffffffffffffffff918216911684612e29565b80546001820154604051848152859273ffffffffffffffffffffffffffffffffffffffff9081169216907fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de69060200160405180910390a4505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612efd9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612f66565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612f609085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e7b565b50505050565b6000612fc8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130729092919063ffffffff16565b805190915015612efd5780806020019051810190612fe691906135a2565b612efd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b5b565b6060613081848460008561308b565b90505b9392505050565b60608247101561311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b5b565b843b613185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b5b565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131ae91906136ba565b60006040518083038185875af1925050503d80600081146131eb576040519150601f19603f3d011682016040523d82523d6000602084013e6131f0565b606091505b5091509150611ec78282866060831561320a575081613084565b82511561321a5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b91906137a0565b803573ffffffffffffffffffffffffffffffffffffffff8116811461327257600080fd5b919050565b600082601f83011261328857600080fd5b8135602067ffffffffffffffff808311156132a5576132a5613997565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156132e8576132e8613997565b6040528481528381019250868401828801850189101561330757600080fd5b600092505b8583101561332a57803584529284019260019290920191840161330c565b50979650505050505050565b803561ffff8116811461327257600080fd5b803565ffffffffffff8116811461327257600080fd5b60006020828403121561337057600080fd5b6130848261324e565b6000806040838503121561338c57600080fd5b6133958361324e565b91506133a36020840161324e565b90509250929050565b600080600080600080600060e0888a0312156133c757600080fd5b6133d08861324e565b96506133de6020890161324e565b95506133ec6040890161324e565b94506133fa60608901613348565b93506080880135925060a0880135915061341660c08901613336565b905092959891949750929550565b60008060008060008060008060008060006101608c8e03121561344657600080fd5b61344f8c61324e565b9a5061345d60208d0161324e565b995061346b60408d0161324e565b985061347960608d01613348565b975060808c0135965060a08c0135955061349560c08d01613336565b945060e08c013593506101008c013560ff811681146134b357600080fd5b809350506101208c013591506101408c013590509295989b509295989b9093969950565b600080604083850312156134ea57600080fd5b6134f38361324e565b946020939093013593505050565b60006020828403121561351357600080fd5b813567ffffffffffffffff81111561352a57600080fd5b61353684828501613277565b949350505050565b6000806040838503121561355157600080fd5b823567ffffffffffffffff8082111561356957600080fd5b61357586838701613277565b9350602085013591508082111561358b57600080fd5b5061359885828601613277565b9150509250929050565b6000602082840312156135b457600080fd5b8151801515811461308457600080fd5b6000602082840312156135d657600080fd5b5035919050565b600080604083850312156135f057600080fd5b823591506133a360208401613348565b80518252602081015160208301526040810151612efd60408401825b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151613669606084018265ffffffffffff169052565b506080810151613683608084018265ffffffffffff169052565b5060a081015161369960a084018261ffff169052565b5060c0818101519083015260e0808201519083015261010090810151910152565b600082516136cc8184602087016138d4565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561371957613705838551613600565b9284019261016092909201916001016136f2565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156137195761375483855161361c565b928401926101209290920191600101613741565b6020808252825182820181905260009190848201906040850190845b8181101561371957835183529284019291840191600101613784565b60208152600082518060208401526137bf8160408501602087016138d4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b61016081016138008284613600565b92915050565b6000821982111561381957613819613939565b500190565b600082613854577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561389157613891613939565b500290565b6000828210156138a8576138a8613939565b500390565b600065ffffffffffff838116908316818110156138cc576138cc613939565b039392505050565b60005b838110156138ef5781810151838201526020016138d7565b83811115612f605750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561393257613932613939565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea264697066735822122062d468d4ce2ec97e20ddec9ec69c6f1fc8a05b360e75e063a3406f71c58574b364736f6c63430008060033",
  "devdoc": {
    "details": "Contract for streaming token payments for set periods of time ",
    "kind": "dev",
    "methods": {
      "activePaymentBalances(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the active payment balances"
        }
      },
      "activePaymentIds(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the active payment ids"
        }
      },
      "activePayments(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the payments"
        }
      },
      "allActivePaymentBalances()": {
        "returns": {
          "_0": "the active payment balances"
        }
      },
      "allActivePaymentIds()": {
        "returns": {
          "_0": "the payment ids"
        }
      },
      "allActivePayments()": {
        "returns": {
          "_0": "the payments"
        }
      },
      "allPayments(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the payments"
        }
      },
      "claimAllAvailableTokens(uint256[])": {
        "details": "Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "payments": "The payment ids for available token balances"
        }
      },
      "claimAvailableTokenAmounts(uint256[],uint256[])": {
        "details": "Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "amounts": "The amount of each available token to claim",
          "payments": "The payment ids for available token balances"
        }
      },
      "claimableBalance(uint256)": {
        "details": "Returns 0 if cliff duration has not ended",
        "params": {
          "paymentId": "The payment ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "createPayment(address,address,address,uint48,uint256,uint256,uint16)": {
        "params": {
          "amount": "The amount of tokens being paid",
          "cliffDurationInDays": "The cliff duration in days",
          "payer": "The account that is paymenting tokens",
          "paymentDurationInSecs": "The payment period in seconds",
          "receiver": "The account that will be able to retrieve available tokens",
          "startTime": "The unix timestamp when the payment period will start"
        }
      },
      "createPaymentWithPermit(address,address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "details": "It is up to the frontend developer to ensure the token implements permit - otherwise this will fail",
        "params": {
          "amount": "The amount of tokens being paid",
          "cliffDurationInDays": "The payment cliff duration in days",
          "deadline": "The time at which to expire the signature",
          "payer": "The account that is paymenting tokens",
          "paymentDurationInSecs": "The payment period in seconds",
          "r": "Half of the ECDSA signature pair",
          "receiver": "The account that will be able to retrieve available tokens",
          "s": "Half of the ECDSA signature pair",
          "startTime": "The unix timestamp when the payment period will start",
          "token": "Address of token to payment",
          "v": "The recovery byte of the signature"
        }
      },
      "paymentBalance(uint256)": {
        "params": {
          "paymentId": "The payment ID"
        },
        "returns": {
          "balance": "the payment balance"
        }
      },
      "stopPayment(uint256,uint48)": {
        "params": {
          "paymentId": "The payment id for a payment",
          "stopTime": "Timestamp to stop payment, if 0 use current block.timestamp"
        }
      },
      "tokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has available balances",
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token` for `receiver`"
        }
      },
      "totalTokenBalance(address)": {
        "params": {
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token`"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate payment periods specified in days to seconds"
      }
    },
    "title": "Payments",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentCreated(address,address,address,uint256,uint256,uint48,uint256,uint16)": {
        "notice": "Event emitted when a new payment is created"
      },
      "PaymentStopped(uint256,uint256,uint48,uint48)": {
        "notice": "Event emitted when payment stopped"
      },
      "TokensClaimed(address,address,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an available balance"
      }
    },
    "kind": "user",
    "methods": {
      "activePaymentBalances(address)": {
        "notice": "Get all active token payment balances for receiver"
      },
      "activePaymentIds(address)": {
        "notice": "Get all active token payment ids for receiver"
      },
      "activePayments(address)": {
        "notice": "Get all active token payments for receiver"
      },
      "allActivePaymentBalances()": {
        "notice": "Get all active token payment balances"
      },
      "allActivePaymentIds()": {
        "notice": "Get all active token payment ids"
      },
      "allActivePayments()": {
        "notice": "Get all active token payments"
      },
      "allPayments(address)": {
        "notice": "Get all token payments for receiver"
      },
      "claimAllAvailableTokens(uint256[])": {
        "notice": "Allows receiver to claim all of their available tokens for a set of payments"
      },
      "claimAvailableTokenAmounts(uint256[],uint256[])": {
        "notice": "Allows receiver to claim a portion of their available tokens for a given payment"
      },
      "claimableBalance(uint256)": {
        "notice": "Get claimable balance for a given payment id"
      },
      "createPayment(address,address,address,uint48,uint256,uint256,uint16)": {
        "notice": "Create payment, optionally providing voting power"
      },
      "createPaymentWithPermit(address,address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "notice": "Create payment, using permit for approval"
      },
      "numPayments()": {
        "notice": "Number of payments"
      },
      "paymentBalance(uint256)": {
        "notice": "Get payment balance for a given payment id"
      },
      "paymentIds(address,uint256)": {
        "notice": "Mapping of address to payment id"
      },
      "stopPayment(uint256,uint48)": {
        "notice": "Allows payer or receiver to stop existing payments for a given paymentId"
      },
      "tokenBalance(address,address)": {
        "notice": "Get token balance of receiver"
      },
      "tokenPayments(uint256)": {
        "notice": "Mapping of payment id > token payments"
      },
      "totalTokenBalance(address)": {
        "notice": "Get total token balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16254,
        "contract": "contracts/Payments.sol:Payments",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4257,
        "contract": "contracts/Payments.sol:Payments",
        "label": "tokenPayments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Payment)4232_storage)"
      },
      {
        "astId": 4263,
        "contract": "contracts/Payments.sol:Payments",
        "label": "paymentIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4266,
        "contract": "contracts/Payments.sol:Payments",
        "label": "numPayments",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Payment)4232_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Payments.Payment)",
        "numberOfBytes": "32",
        "value": "t_struct(Payment)4232_storage"
      },
      "t_struct(Payment)4232_storage": {
        "encoding": "inplace",
        "label": "struct Payments.Payment",
        "members": [
          {
            "astId": 4215,
            "contract": "contracts/Payments.sol:Payments",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4217,
            "contract": "contracts/Payments.sol:Payments",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4219,
            "contract": "contracts/Payments.sol:Payments",
            "label": "payer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4221,
            "contract": "contracts/Payments.sol:Payments",
            "label": "startTime",
            "offset": 20,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4223,
            "contract": "contracts/Payments.sol:Payments",
            "label": "stopTime",
            "offset": 26,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4225,
            "contract": "contracts/Payments.sol:Payments",
            "label": "cliffDurationInDays",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 4227,
            "contract": "contracts/Payments.sol:Payments",
            "label": "paymentDurationInSecs",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4229,
            "contract": "contracts/Payments.sol:Payments",
            "label": "amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4231,
            "contract": "contracts/Payments.sol:Payments",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}