{
  "address": "0x64F687ae3d43E6F670B37d59874407700420e684",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationInSecs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cliffInDays",
          "type": "uint16"
        }
      ],
      "name": "PaymentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        }
      ],
      "name": "PaymentStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePaymentBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePaymentIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "activePayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePaymentBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePaymentIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allActivePayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "allPayments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "startTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "stopTime",
              "type": "uint48"
            },
            {
              "internalType": "uint16",
              "name": "cliffDurationInDays",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "paymentDurationInSecs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountClaimed",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.Payment[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "payments",
          "type": "uint256[]"
        }
      ],
      "name": "claimAllAvailableTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "payments",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "claimAvailableTokenAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        }
      ],
      "name": "createPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "createPaymentWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint48[]",
          "name": "startTimes",
          "type": "uint48[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "paymentDurationsInSecs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "cliffDurationsInDays",
          "type": "uint16[]"
        }
      ],
      "name": "createPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint48[]",
          "name": "startTimes",
          "type": "uint48[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "paymentDurationsInSecs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16[]",
          "name": "cliffDurationsInDays",
          "type": "uint16[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deadlines",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "createPaymentsWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        }
      ],
      "name": "paymentBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "startTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "stopTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint16",
                  "name": "cliffDurationInDays",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "paymentDurationInSecs",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountClaimed",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Payments.Payment",
              "name": "payment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Payments.PaymentBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "paymentIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        }
      ],
      "name": "stopPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenPayments",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "startTime",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "stopTime",
          "type": "uint48"
        },
        {
          "internalType": "uint16",
          "name": "cliffDurationInDays",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "paymentDurationInSecs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Payments.TokenBalance",
          "name": "balance",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a23ec711de4a3f39e146f3af308ad153ee3a3642f9df68fb043b9f273712fab",
  "receipt": {
    "to": null,
    "from": "0xFDf8BE775bb5e2Ba1983dC7b26A655321502E104",
    "contractAddress": "0x64F687ae3d43E6F670B37d59874407700420e684",
    "transactionIndex": 41,
    "gasUsed": "3766530",
    "logsBloom": "0x
    "blockHash": "0xf150740f5132ad9afc25f67c4da5d14b851a052c706368cf7d4942e45f951276",
    "transactionHash": "0x5a23ec711de4a3f39e146f3af308ad153ee3a3642f9df68fb043b9f273712fab",
    "logs": [],
    "blockNumber": 11369206,
    "cumulativeGasUsed": "7065299",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8aebdb1642c64b0a96859780335180d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationInSecs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cliffInDays\",\"type\":\"uint16\"}],\"name\":\"PaymentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"}],\"name\":\"PaymentStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"activePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePaymentIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allActivePayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"allPayments\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"}],\"name\":\"claimAllAvailableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"payments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"claimAvailableTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"}],\"name\":\"createPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"createPaymentWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"startTimes\",\"type\":\"uint48[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentDurationsInSecs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"cliffDurationsInDays\",\"type\":\"uint16[]\"}],\"name\":\"createPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"startTimes\",\"type\":\"uint48[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentDurationsInSecs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"cliffDurationsInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"createPaymentsWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"}],\"name\":\"paymentBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.Payment\",\"name\":\"payment\",\"type\":\"tuple\"}],\"internalType\":\"struct Payments.PaymentBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paymentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"}],\"name\":\"stopPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPayments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"stopTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"cliffDurationInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"paymentDurationInSecs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Payments.TokenBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for streaming token payments for set periods of time w/ optional cliffs + ability to stop paymentsThis contract DOES NOT include support for deflationary token payments\",\"kind\":\"dev\",\"methods\":{\"activePaymentBalances(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the active payment balances\"}},\"activePaymentIds(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the active payment ids\"}},\"activePayments(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the payments\"}},\"allActivePaymentBalances()\":{\"returns\":{\"_0\":\"the active payment balances\"}},\"allActivePaymentIds()\":{\"returns\":{\"_0\":\"the payment ids\"}},\"allActivePayments()\":{\"returns\":{\"_0\":\"the payments\"}},\"allPayments(address)\":{\"params\":{\"receiver\":\"The address that has paid balances\"},\"returns\":{\"_0\":\"the payments\"}},\"claimAllAvailableTokens(uint256[])\":{\"details\":\"Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"payments\":\"The payment ids for available token balances\"}},\"claimAvailableTokenAmounts(uint256[],uint256[])\":{\"details\":\"Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this\",\"params\":{\"amounts\":\"The amount of each available token to claim\",\"payments\":\"The payment ids for available token balances\"}},\"claimableBalance(uint256)\":{\"details\":\"Returns 0 if cliff duration has not ended, payment cancelled, or payment is in the future\",\"params\":{\"paymentId\":\"The payment ID\"},\"returns\":{\"_0\":\"The amount that can be claimed\"}},\"createPayment(address,address,uint48,uint256,uint256,uint16)\":{\"params\":{\"amount\":\"The amount of tokens being paid\",\"cliffDurationInDays\":\"The cliff duration in days\",\"paymentDurationInSecs\":\"The payment period in seconds\",\"receiver\":\"The account that will receive tokens\",\"startTime\":\"The unix timestamp when the payment period will start\",\"token\":\"Address of token for payment\"}},\"createPaymentWithPermit(address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"details\":\"It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\",\"params\":{\"amount\":\"The amount of tokens being paid\",\"cliffDurationInDays\":\"The payment cliff duration in days\",\"deadline\":\"The time at which to expire the signature\",\"paymentDurationInSecs\":\"The payment period in seconds\",\"r\":\"Half of the ECDSA signature pair\",\"receiver\":\"The account that will receive tokens\",\"s\":\"Half of the ECDSA signature pair\",\"startTime\":\"The unix timestamp when the payment period will start\",\"token\":\"Address of token for payment\",\"v\":\"The recovery byte of the signature\"}},\"createPayments(address[],address[],uint48[],uint256[],uint256[],uint16[])\":{\"params\":{\"amounts\":\"The amounts of tokens being paid\",\"cliffDurationsInDays\":\"The cliff durations in days\",\"paymentDurationsInSecs\":\"The payment periods in seconds\",\"receivers\":\"The accounts that will receive tokens\",\"startTimes\":\"The unix timestamp when the payment periods will start\",\"tokens\":\"Address of tokens for payments\"}},\"createPaymentsWithPermit(address[],address[],uint48[],uint256[],uint256[],uint16[],uint256[],uint8[],bytes32[],bytes32[])\":{\"params\":{\"amounts\":\"The amounts of tokens being paid\",\"cliffDurationsInDays\":\"The cliff durations in days\",\"deadlines\":\"The times at which to expire the signatures\",\"paymentDurationsInSecs\":\"The payment periods in seconds\",\"receivers\":\"The accounts that will receive tokens\",\"rs\":\"Half of the ECDSA signature pairs\",\"ss\":\"Half of the ECDSA signature pairs\",\"startTimes\":\"The unix timestamp when the payment periods will start\",\"tokens\":\"Address of tokens for payments\",\"vs\":\"The recovery bytes of the signatures\"}},\"paymentBalance(uint256)\":{\"params\":{\"paymentId\":\"The payment ID\"},\"returns\":{\"balance\":\"the payment balance\"}},\"stopPayment(uint256,uint48)\":{\"params\":{\"paymentId\":\"The payment id for a payment\",\"stopTime\":\"Timestamp to stop payment, if 0 use current block.timestamp\"}},\"tokenBalance(address,address)\":{\"params\":{\"receiver\":\"The address that has available balances\",\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token` for `receiver`\"}},\"totalTokenBalance(address)\":{\"params\":{\"token\":\"The token to check\"},\"returns\":{\"balance\":\"the total active balance of `token`\"}}},\"stateVariables\":{\"SECONDS_PER_DAY\":{\"details\":\"Used to translate payment periods specified in days to seconds\"}},\"title\":\"Payments\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentCreated(address,address,address,uint256,uint256,uint48,uint256,uint16)\":{\"notice\":\"Event emitted when a new payment is created\"},\"PaymentStopped(uint256,uint256,uint48,uint48)\":{\"notice\":\"Event emitted when payment stopped\"},\"TokensClaimed(address,address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are claimed by a receiver from an available balance\"}},\"kind\":\"user\",\"methods\":{\"activePaymentBalances(address)\":{\"notice\":\"Get all active token payment balances for receiver\"},\"activePaymentIds(address)\":{\"notice\":\"Get all active token payment ids for receiver\"},\"activePayments(address)\":{\"notice\":\"Get all active token payments for receiver\"},\"allActivePaymentBalances()\":{\"notice\":\"Get all active token payment balances\"},\"allActivePaymentIds()\":{\"notice\":\"Get all active token payment ids\"},\"allActivePayments()\":{\"notice\":\"Get all active token payments\"},\"allPayments(address)\":{\"notice\":\"Get all token payments for receiver\"},\"claimAllAvailableTokens(uint256[])\":{\"notice\":\"Allows receiver to claim all of their available tokens for a set of payments\"},\"claimAvailableTokenAmounts(uint256[],uint256[])\":{\"notice\":\"Allows receiver to claim a portion of their available tokens for a given payment\"},\"claimableBalance(uint256)\":{\"notice\":\"Get claimable balance for a given payment id\"},\"createPayment(address,address,uint48,uint256,uint256,uint16)\":{\"notice\":\"Create payment\"},\"createPaymentWithPermit(address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Create payment, using permit for approval\"},\"createPayments(address[],address[],uint48[],uint256[],uint256[],uint16[])\":{\"notice\":\"Create multiple payments\"},\"createPaymentsWithPermit(address[],address[],uint48[],uint256[],uint256[],uint16[],uint256[],uint8[],bytes32[],bytes32[])\":{\"notice\":\"Create multiple payments, using permit for approvals\"},\"numPayments()\":{\"notice\":\"Number of payments\"},\"paymentBalance(uint256)\":{\"notice\":\"Get payment balance for a given payment id\"},\"paymentIds(address,uint256)\":{\"notice\":\"Mapping of address to payment id\"},\"stopPayment(uint256,uint48)\":{\"notice\":\"Allows payer or receiver to stop existing payments for a given paymentId\"},\"tokenBalance(address,address)\":{\"notice\":\"Get token balance of receiver\"},\"tokenPayments(uint256)\":{\"notice\":\"Mapping of payment id > token payments\"},\"totalTokenBalance(address)\":{\"notice\":\"Get total token balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payments.sol\":\"Payments\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/Payments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20Permit.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Payments\\n * @dev Contract for streaming token payments for set periods of time w/ optional cliffs + ability to stop payments\\n * @dev This contract DOES NOT include support for deflationary token payments\\n */\\ncontract Payments is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Payment definition\\n    struct Payment {\\n        address token;\\n        address receiver;\\n        address payer;\\n        uint48 startTime;\\n        uint48 stopTime;\\n        uint16 cliffDurationInDays;\\n        uint256 paymentDurationInSecs;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n    }\\n\\n    /// @notice Payment balance definition\\n    struct PaymentBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Payment payment;\\n    }\\n\\n    /// @notice Token balance definition\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n    }\\n\\n    /// @dev Used to translate payment periods specified in days to seconds\\n    uint256 constant internal SECONDS_PER_DAY = 86400;\\n    \\n    /// @notice Mapping of payment id > token payments\\n    mapping (uint256 => Payment) public tokenPayments;\\n\\n    /// @notice Mapping of address to payment id\\n    mapping (address => uint256[]) public paymentIds;\\n\\n    /// @notice Number of payments\\n    uint256 public numPayments;\\n\\n    /// @notice Event emitted when a new payment is created\\n    event PaymentCreated(address indexed token, address indexed payer, address indexed receiver, uint256 paymentId, uint256 amount, uint48 startTime, uint256 durationInSecs, uint16 cliffInDays);\\n    \\n    /// @notice Event emitted when tokens are claimed by a receiver from an available balance\\n    event TokensClaimed(address indexed receiver, address indexed token, uint256 indexed paymentId, uint256 amountClaimed);\\n\\n    /// @notice Event emitted when payment stopped\\n    event PaymentStopped(uint256 indexed paymentId, uint256 indexed originalDuration, uint48 stopTime, uint48 startTime);\\n\\n    /**\\n     * @notice Create payment\\n     * @param token Address of token for payment\\n     * @param receiver The account that will receive tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function createPayment(\\n        address token,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    )\\n        external nonReentrant\\n    {\\n        _validatePayment(paymentDurationInSecs, cliffDurationInDays, amount);\\n        _createPayment(token, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Create payment, using permit for approval\\n     * @dev It is up to the frontend developer to ensure the token implements permit - otherwise this will fail\\n     * @param token Address of token for payment\\n     * @param receiver The account that will receive tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The payment cliff duration in days\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function createPaymentWithPermit(\\n        address token,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) \\n        external nonReentrant\\n    {\\n        _validatePayment(paymentDurationInSecs, cliffDurationInDays, amount);\\n        _permit(token, amount, deadline, v, r, s);\\n        _createPayment(token, receiver, startTime, amount, paymentDurationInSecs, cliffDurationInDays);\\n    }\\n\\n    /**\\n     * @notice Create multiple payments\\n     * @param tokens Address of tokens for payments\\n     * @param receivers The accounts that will receive tokens\\n     * @param startTimes The unix timestamp when the payment periods will start\\n     * @param amounts The amounts of tokens being paid\\n     * @param paymentDurationsInSecs The payment periods in seconds\\n     * @param cliffDurationsInDays The cliff durations in days\\n     */\\n    function createPayments(\\n        address[] memory tokens,\\n        address[] memory receivers,\\n        uint48[] memory startTimes,\\n        uint256[] memory amounts,\\n        uint256[] memory paymentDurationsInSecs,\\n        uint16[] memory cliffDurationsInDays\\n    )\\n        external nonReentrant\\n    {\\n        require(\\n            tokens.length == receivers.length &&\\n            receivers.length == startTimes.length &&\\n            startTimes.length == amounts.length &&\\n            amounts.length == paymentDurationsInSecs.length &&\\n            paymentDurationsInSecs.length == cliffDurationsInDays.length, \\n            \\\"Payments::createPayments: arrays must be same length\\\"\\n        );\\n        for (uint256 i; i < tokens.length; i++) {\\n            _validatePayment(paymentDurationsInSecs[i], cliffDurationsInDays[i], amounts[i]);\\n            _createPayment(\\n                tokens[i],\\n                receivers[i],\\n                startTimes[i],\\n                amounts[i],\\n                paymentDurationsInSecs[i],\\n                cliffDurationsInDays[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Create multiple payments, using permit for approvals\\n     * @param tokens Address of tokens for payments\\n     * @param receivers The accounts that will receive tokens\\n     * @param startTimes The unix timestamp when the payment periods will start\\n     * @param amounts The amounts of tokens being paid\\n     * @param paymentDurationsInSecs The payment periods in seconds\\n     * @param cliffDurationsInDays The cliff durations in days\\n     * @param deadlines The times at which to expire the signatures\\n     * @param vs The recovery bytes of the signatures\\n     * @param rs Half of the ECDSA signature pairs\\n     * @param ss Half of the ECDSA signature pairs\\n     */\\n    function createPaymentsWithPermit(\\n        address[] memory tokens,\\n        address[] memory receivers,\\n        uint48[] memory startTimes,\\n        uint256[] memory amounts,\\n        uint256[] memory paymentDurationsInSecs,\\n        uint16[] memory cliffDurationsInDays,\\n        uint256[] memory deadlines,\\n        uint8[] memory vs, \\n        bytes32[] memory rs, \\n        bytes32[] memory ss\\n    )\\n        external nonReentrant\\n    {\\n        require(\\n            tokens.length == receivers.length &&\\n            receivers.length == startTimes.length &&\\n            startTimes.length == amounts.length &&\\n            amounts.length == paymentDurationsInSecs.length &&\\n            paymentDurationsInSecs.length == cliffDurationsInDays.length &&\\n            cliffDurationsInDays.length == deadlines.length &&\\n            deadlines.length == vs.length &&\\n            vs.length == rs.length &&\\n            rs.length == ss.length,\\n            \\\"Payments::createPaymentsWithPermit: arrays must be same length\\\"\\n        );\\n        for (uint256 i; i < tokens.length; i++) {\\n            _validatePayment(paymentDurationsInSecs[i], cliffDurationsInDays[i], amounts[i]);\\n            _permit(tokens[i], amounts[i], deadlines[i], vs[i], rs[i], ss[i]);\\n            _createPayment(\\n                tokens[i],\\n                receivers[i],\\n                startTimes[i],\\n                amounts[i],\\n                paymentDurationsInSecs[i],\\n                cliffDurationsInDays[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids\\n     * @return the payment ids\\n     */\\n    function allActivePaymentIds() external view returns(uint256[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = i;\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments\\n     * @return the payments\\n     */\\n    function allActivePayments() external view returns(Payment[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = tokenPayments[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances\\n     * @return the active payment balances\\n     */\\n    function allActivePaymentBalances() external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n\\n        // Get number of active payments\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < numPayments; i++) {\\n            if(claimableBalance(i) > 0) {\\n                result[j] = paymentBalance(i);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment ids for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment ids\\n     */\\n    function activePaymentIds(address receiver) external view returns(uint256[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        uint256[] memory result = new uint256[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = receiverPaymentIds[i];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function allPayments(address receiver) external view returns(Payment[] memory){\\n        uint256[] memory allPaymentIds = paymentIds[receiver];\\n        Payment[] memory result = new Payment[](allPaymentIds.length);\\n        for (uint256 i; i < allPaymentIds.length; i++) {\\n            result[i] = tokenPayments[allPaymentIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payments for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the payments\\n     */\\n    function activePayments(address receiver) external view returns(Payment[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        Payment[] memory result = new Payment[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = tokenPayments[receiverPaymentIds[i]];\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get all active token payment balances for receiver\\n     * @param receiver The address that has paid balances\\n     * @return the active payment balances\\n     */\\n    function activePaymentBalances(address receiver) external view returns(PaymentBalance[] memory){\\n        uint256 activeCount;\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n\\n        // Get number of active payments\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create result array of length `activeCount`\\n        PaymentBalance[] memory result = new PaymentBalance[](activeCount);\\n        uint256 j;\\n\\n        // Populate result array\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            if(claimableBalance(receiverPaymentIds[i]) > 0) {\\n                result[j] = paymentBalance(receiverPaymentIds[i]);\\n                j++;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Get total token balance\\n     * @param token The token to check\\n     * @return balance the total active balance of `token`\\n     */\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance){\\n        for (uint256 i; i < numPayments; i++) {\\n            Payment memory tokenPayment = tokenPayments[i];\\n            if(tokenPayment.token == token && tokenPayment.startTime != tokenPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + tokenPayment.amount;\\n                if(block.timestamp > tokenPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + tokenPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = tokenPayment.stopTime > 0 && tokenPayment.stopTime < block.timestamp ? tokenPayment.stopTime - tokenPayment.startTime : block.timestamp - tokenPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= tokenPayment.cliffDurationInDays\\n                    ) {\\n                        if (tokenPayment.stopTime == 0 && elapsedTime >= tokenPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + tokenPayment.amount - tokenPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = tokenPayment.amount / tokenPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - tokenPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get token balance of receiver\\n     * @param token The token to check\\n     * @param receiver The address that has available balances\\n     * @return balance the total active balance of `token` for `receiver`\\n     */\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance){\\n        uint256[] memory receiverPaymentIds = paymentIds[receiver];\\n        for (uint256 i; i < receiverPaymentIds.length; i++) {\\n            Payment memory receiverPayment = tokenPayments[receiverPaymentIds[i]];\\n            if(receiverPayment.token == token && receiverPayment.startTime != receiverPayment.stopTime){\\n                balance.totalAmount = balance.totalAmount + receiverPayment.amount;\\n                if(block.timestamp > receiverPayment.startTime) {\\n                    balance.claimedAmount = balance.claimedAmount + receiverPayment.amountClaimed;\\n\\n                    uint256 elapsedTime = receiverPayment.stopTime > 0 && receiverPayment.stopTime < block.timestamp ? receiverPayment.stopTime - receiverPayment.startTime : block.timestamp - receiverPayment.startTime;\\n                    uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n\\n                    if (\\n                        elapsedDays >= receiverPayment.cliffDurationInDays\\n                    ) {\\n                        if (receiverPayment.stopTime == 0 && elapsedTime >= receiverPayment.paymentDurationInSecs) {\\n                            balance.claimableAmount = balance.claimableAmount + receiverPayment.amount - receiverPayment.amountClaimed;\\n                        } else {\\n                            uint256 paymentAmountPerSec = receiverPayment.amount / receiverPayment.paymentDurationInSecs;\\n                            uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n                            balance.claimableAmount = balance.claimableAmount + amountAvailable - receiverPayment.amountClaimed;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get payment balance for a given payment id\\n     * @param paymentId The payment ID\\n     * @return balance the payment balance\\n     */\\n    function paymentBalance(uint256 paymentId) public view returns (PaymentBalance memory balance) {\\n        balance.id = paymentId;\\n        balance.claimableAmount = claimableBalance(paymentId);\\n        balance.payment = tokenPayments[paymentId];\\n    }\\n\\n    /**\\n     * @notice Get claimable balance for a given payment id\\n     * @dev Returns 0 if cliff duration has not ended, payment cancelled, or payment is in the future\\n     * @param paymentId The payment ID\\n     * @return The amount that can be claimed\\n     */\\n    function claimableBalance(uint256 paymentId) public view returns (uint256) {\\n        Payment storage payment = tokenPayments[paymentId];\\n\\n        // For payments created with a future start date or payments stopped before starting, return 0\\n        if (block.timestamp < payment.startTime || payment.startTime == payment.stopTime) {\\n            return 0;\\n        }\\n\\n        \\n        uint256 elapsedTime = payment.stopTime > 0 && payment.stopTime < block.timestamp ? payment.stopTime - payment.startTime : block.timestamp - payment.startTime;\\n        uint256 elapsedDays = elapsedTime / SECONDS_PER_DAY;\\n        \\n        if (elapsedDays < payment.cliffDurationInDays) {\\n            return 0;\\n        }\\n\\n        if (payment.stopTime == 0 && elapsedTime >= payment.paymentDurationInSecs) {\\n            return payment.amount - payment.amountClaimed;\\n        }\\n        \\n        uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n        uint256 amountAvailable = paymentAmountPerSec * elapsedTime;\\n        return amountAvailable - payment.amountClaimed;\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim all of their available tokens for a set of payments\\n     * @dev Errors if no tokens are claimable\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     */\\n    function claimAllAvailableTokens(uint256[] memory payments) external nonReentrant {\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount > 0, \\\"Payments::claimAllAvailableTokens: claimableAmount is 0\\\");\\n            _claimTokens(payments[i], claimableAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows receiver to claim a portion of their available tokens for a given payment\\n     * @dev Errors if token amounts provided are > claimable amounts\\n     * @dev It is advised receivers check they are entitled to claim via `claimableBalance` before calling this\\n     * @param payments The payment ids for available token balances\\n     * @param amounts The amount of each available token to claim\\n     */\\n    function claimAvailableTokenAmounts(uint256[] memory payments, uint256[] memory amounts) external nonReentrant {\\n        require(payments.length == amounts.length, \\\"Payments::claimAvailableTokenAmounts: arrays must be same length\\\");\\n        for (uint i = 0; i < payments.length; i++) {\\n            uint256 claimableAmount = claimableBalance(payments[i]);\\n            require(claimableAmount >= amounts[i], \\\"Payments::claimAvailableTokenAmounts: claimableAmount < amount\\\");\\n            _claimTokens(payments[i], amounts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows payer or receiver to stop existing payments for a given paymentId\\n     * @param paymentId The payment id for a payment\\n     * @param stopTime Timestamp to stop payment, if 0 use current block.timestamp\\n     */\\n    function stopPayment(uint256 paymentId, uint48 stopTime) external nonReentrant {\\n        Payment storage payment = tokenPayments[paymentId];\\n        require(msg.sender == payment.payer || msg.sender == payment.receiver, \\\"Payments::stopPayment: msg.sender must be payer or receiver\\\");\\n        require(payment.stopTime == 0, \\\"Payments::stopPayment: payment already stopped\\\");\\n        stopTime = stopTime == 0 ? uint48(block.timestamp) : stopTime;\\n        require(stopTime < payment.startTime + payment.paymentDurationInSecs, \\\"Payments::stopPayment: stop time > payment duration\\\");\\n        if(stopTime > payment.startTime) {\\n            payment.stopTime = stopTime;\\n            uint256 newPaymentDuration = stopTime - payment.startTime;\\n            uint256 paymentAmountPerSec = payment.amount / payment.paymentDurationInSecs;\\n            uint256 newPaymentAmount = paymentAmountPerSec * newPaymentDuration;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount - newPaymentAmount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, stopTime, payment.startTime);\\n        } else {\\n            payment.stopTime = payment.startTime;\\n            IERC20(payment.token).safeTransfer(payment.payer, payment.amount);\\n            emit PaymentStopped(paymentId, payment.paymentDurationInSecs, payment.startTime, payment.startTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that payment has valid terms\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     * @param amount The amount of tokens being paid\\n     */\\n    function _validatePayment(uint256 paymentDurationInSecs, uint16 cliffDurationInDays, uint256 amount) internal pure {\\n        require(paymentDurationInSecs > 0, \\\"Payments::_validatePayment: payment duration must be > 0\\\");\\n        require(paymentDurationInSecs <= 25*365*SECONDS_PER_DAY, \\\"Payments::_validatePayment: payment duration more than 25 years\\\");\\n        require(paymentDurationInSecs >= SECONDS_PER_DAY*cliffDurationInDays, \\\"Payments::_validatePayment: payment duration < cliff\\\");\\n        require(amount > 0, \\\"Payments::_validatePayment: amount not > 0\\\");\\n    }\\n\\n    /**\\n     * @notice Internal implementation of createPayment\\n     * @param receiver The account that will receive tokens\\n     * @param startTime The unix timestamp when the payment period will start\\n     * @param amount The amount of tokens being paid\\n     * @param paymentDurationInSecs The payment period in seconds\\n     * @param cliffDurationInDays The cliff duration in days\\n     */\\n    function _createPayment(\\n        address token,\\n        address receiver,\\n        uint48 startTime,\\n        uint256 amount,\\n        uint256 paymentDurationInSecs,\\n        uint16 cliffDurationInDays\\n    ) internal {\\n\\n        // Transfer the tokens under the control of the payment contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint48 paymentStartTime = startTime == 0 ? uint48(block.timestamp) : startTime;\\n\\n        // Create payment\\n        Payment memory payment = Payment({\\n            token: token,\\n            receiver: receiver,\\n            payer: msg.sender,\\n            startTime: paymentStartTime,\\n            stopTime: 0,\\n            paymentDurationInSecs: paymentDurationInSecs,\\n            cliffDurationInDays: cliffDurationInDays,\\n            amount: amount,\\n            amountClaimed: 0\\n        });\\n\\n        tokenPayments[numPayments] = payment;\\n        paymentIds[receiver].push(numPayments);\\n        emit PaymentCreated(token, msg.sender, receiver, numPayments, amount, paymentStartTime, paymentDurationInSecs, cliffDurationInDays);\\n        \\n        // Increment payment id\\n        numPayments++;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of token claims\\n     * @param paymentId The payment id for claim\\n     * @param claimAmount The amount to claim\\n     */\\n    function _claimTokens(uint256 paymentId, uint256 claimAmount) internal {\\n        Payment storage payment = tokenPayments[paymentId];\\n        require(msg.sender == payment.receiver, \\\"Payments::_claimTokens: msg.sender != receiver\\\");\\n\\n        // Update claimed amount\\n        payment.amountClaimed = payment.amountClaimed + claimAmount;\\n\\n        // Release tokens\\n        IERC20(payment.token).safeTransfer(payment.receiver, claimAmount);\\n        emit TokensClaimed(payment.receiver, payment.token, paymentId, claimAmount);\\n    }\\n\\n    /**\\n     * @notice Permit contract to use tokens\\n     * @param token Address of the token to permit\\n     * @param amount Amount to permit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _permit(\\n        address token,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) internal {\\n        IERC20Permit(token).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    }\\n}\",\"keccak256\":\"0x481080fc4f137a824214c9035a39528682b2a12ea906f42b167e2e6ed40a424d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xfb353702aea34a243a22fdf36ed4f3808a620620fb5ccb9ed0b4b50ce4973a6b\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x2970a703e286952cbcd3e454e351e2b83f405223bf71139359a6f0831834160b\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x389cc752255da30d02387f928f7f544d5848862150896db2ad2034bd662f8b62\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x9e33e3e7cf29521693c0c74f531404f73119ffc525984f30dd2a8af3dcc13899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055614323806100256000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80639006b7ef116100d8578063c2080cf81161008c578063ef2c57fc11610066578063ef2c57fc14610434578063f54659921461043c578063f9c186861461044f57600080fd5b8063c2080cf8146102f3578063e52af72a14610306578063e87b4b481461031957600080fd5b8063ad60cc2e116100bd578063ad60cc2e146102ad578063b343c643146102c0578063ba638ca3146102e057600080fd5b80639006b7ef1461027a57806397ff37581461028d57600080fd5b80634812160c1161012f57806358e086821161011457806358e08682146102415780636068eec81461025457806385d3374f1461026757600080fd5b80634812160c1461020e5780634b3ac3d01461022e57600080fd5b806312dffc0f1161016057806312dffc0f146101da5780632279fa4c146101ef57806331e48f881461020657600080fd5b80630a93b84f1461017c5780631049334f146101a5575b600080fd5b61018f61018a3660046139c0565b610457565b60405161019c9190613f8a565b60405180910390f35b6101b86101b33660046139db565b61066d565b604080518251815260208084015190820152918101519082015260600161019c565b6101ed6101e8366004613b35565b6109b8565b005b6101f860035481565b60405190815260200161019c565b61018f610c1a565b61022161021c3660046139c0565b610d7d565b60405161019c9190613fd9565b6101ed61023c366004613df2565b61104c565b6101ed61024f366004613db5565b611278565b6101ed610262366004613e91565b6113de565b6101f8610275366004613e78565b611963565b6101ed610288366004613a0e565b611bb9565b6102a061029b3660046139c0565b611c51565b60405161019c919061401c565b6101ed6102bb366004613a74565b611ddb565b6102d36102ce366004613e78565b611e85565b60405161019c91906140a5565b6102216102ee3660046139c0565b611fce565b6101f8610301366004613b0b565b61222b565b6101ed610314366004613c2a565b61225c565b6103c4610327366004613e78565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015473ffffffffffffffffffffffffffffffffffffffff96871696948516959484169465ffffffffffff7401000000000000000000000000000000000000000086048116957a0100000000000000000000000000000000000000000000000000009004169361ffff16929189565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a0152969098169587019590955265ffffffffffff938416606087015291909216608085015261ffff90911660a084015260c083015260e08201526101008101919091526101200161019c565b6102a061257b565b6101b861044a3660046139c0565b612661565b61022161290f565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949384939291908301828280156104c857602002820191906000526020600020905b8154815260200190600101908083116104b4575b5050505050905060005b81518110156105255760006104ff8383815181106104f2576104f261428f565b6020026020010151611963565b1115610513578261050f81614227565b9350505b8061051d81614227565b9150506104d2565b5060008267ffffffffffffffff811115610541576105416142be565b6040519080825280602002602001820160405280156105d557816020015b6105c26040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b81526020019060019003908161055f5790505b5090506000805b83518110156106625760006105fc8583815181106104f2576104f261428f565b1115610650576106248482815181106106175761061761428f565b6020026020010151611e85565b8383815181106106365761063661428f565b6020026020010181905250818061064c90614227565b9250505b8061065a81614227565b9150506105dc565b509095945050505050565b61069160405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320805482518185028101850190935280835291929091908301828280156106fe57602002820191906000526020600020905b8154815260200190600101908083116106ea575b5050505050905060005b81518110156109b0576000600160008484815181106107295761072961428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff908116808352600184015482169583019590955260028301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504811660608401527a0100000000000000000000000000000000000000000000000000009094049093166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e08201526006909101546101008201529250871614801561082d5750806080015165ffffffffffff16816060015165ffffffffffff1614155b1561099d5760e08101518451610843919061412d565b8452606081015165ffffffffffff1642111561099d57806101000151846040015161086e919061412d565b6040850152608081015160009065ffffffffffff161580159061089c575042826080015165ffffffffffff16105b6108bc5760608201516108b79065ffffffffffff16426141bd565b6108d9565b816060015182608001516108d091906141d4565b65ffffffffffff165b905060006108ea6201518083614145565b90508260a0015161ffff16811061099a57608083015165ffffffffffff1615801561091957508260c001518210155b1561094c578261010001518360e001518760200151610938919061412d565b61094291906141bd565b602087015261099a565b60008360c001518460e001516109629190614145565b905060006109708483614180565b9050846101000151818960200151610988919061412d565b61099291906141bd565b602089015250505b50505b50806109a881614227565b915050610708565b505092915050565b60026000541415610a2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005584518651148015610a41575083518551145b8015610a4e575082518451145b8015610a5b575081518351145b8015610a68575080518251145b610af4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5061796d656e74733a3a6372656174655061796d656e74733a2061727261797360448201527f206d7573742062652073616d65206c656e6774680000000000000000000000006064820152608401610a21565b60005b8651811015610c0c57610b56838281518110610b1557610b1561428f565b6020026020010151838381518110610b2f57610b2f61428f565b6020026020010151868481518110610b4957610b4961428f565b6020026020010151612b31565b610bfa878281518110610b6b57610b6b61428f565b6020026020010151878381518110610b8557610b8561428f565b6020026020010151878481518110610b9f57610b9f61428f565b6020026020010151878581518110610bb957610bb961428f565b6020026020010151878681518110610bd357610bd361428f565b6020026020010151878781518110610bed57610bed61428f565b6020026020010151612d94565b80610c0481614227565b915050610af7565b505060016000555050505050565b60606000805b600354811015610c5b576000610c3582611963565b1115610c495781610c4581614227565b9250505b80610c5381614227565b915050610c20565b5060008167ffffffffffffffff811115610c7757610c776142be565b604051908082528060200260200182016040528015610d0b57816020015b610cf86040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b815260200190600190039081610c955790505b5090506000805b600354811015610d74576000610d2782611963565b1115610d6257610d3681611e85565b838381518110610d4857610d4861428f565b60200260200101819052508180610d5e90614227565b9250505b80610d6c81614227565b915050610d12565b50909392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015610dee57602002820191906000526020600020905b815481526020019060010190808311610dda575b5050505050905060005b8151811015610e3e576000610e188383815181106104f2576104f261428f565b1115610e2c5782610e2881614227565b9350505b80610e3681614227565b915050610df8565b5060008267ffffffffffffffff811115610e5a57610e5a6142be565b604051908082528060200260200182016040528015610eef57816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610e785790505b5090506000805b8351811015610662576000610f168583815181106104f2576104f261428f565b111561103a5760016000858381518110610f3257610f3261428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015283518490849081106110205761102061428f565b6020026020010181905250818061103690614227565b9250505b8061104481614227565b915050610ef6565b600260005414156110b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055805182511461115157604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20617272617973206d7573742062652073616d65206c656e6774686064820152608401610a21565b60005b825181101561126e5760006111748483815181106104f2576104f261428f565b90508282815181106111885761118861428f565b602002602001015181101561121f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e7400006064820152608401610a21565b61125b8483815181106112345761123461428f565b602002602001015184848151811061124e5761124e61428f565b6020026020010151613129565b508061126681614227565b915050611154565b5050600160005550565b600260005414156112e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260009081555b81518110156113d557600061130d8383815181106104f2576104f261428f565b90506000811161139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5061796d656e74733a3a636c61696d416c6c417661696c61626c65546f6b656e60448201527f733a20636c61696d61626c65416d6f756e7420697320300000000000000000006064820152608401610a21565b6113c28383815181106113b4576113b461428f565b602002602001015182613129565b50806113cd81614227565b9150506112ed565b50506001600055565b6002600054141561144b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260008181558381526001602052604090209081015473ffffffffffffffffffffffffffffffffffffffff1633148061149e5750600181015473ffffffffffffffffffffffffffffffffffffffff1633145b61152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f5061796d656e74733a3a73746f705061796d656e743a206d73672e73656e646560448201527f72206d757374206265207061796572206f7220726563656976657200000000006064820152608401610a21565b60028101547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16156115e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a73746f705061796d656e743a207061796d656e74206160448201527f6c72656164792073746f707065640000000000000000000000000000000000006064820152608401610a21565b65ffffffffffff8216156115f657816115f8565b425b6004820154600283015491935061162e9174010000000000000000000000000000000000000000900465ffffffffffff1661412d565b8265ffffffffffff16106116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a73746f705061796d656e743a2073746f702074696d6560448201527f203e207061796d656e74206475726174696f6e000000000000000000000000006064820152608401610a21565b600281015465ffffffffffff74010000000000000000000000000000000000000000909104811690831611156118605760028101805465ffffffffffff8085167a0100000000000000000000000000000000000000000000000000000279ffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179182905560009161176e917401000000000000000000000000000000000000000090910416846141d4565b65ffffffffffff16905060008260040154836005015461178e9190614145565b9050600061179c8383614180565b600285015460058601549192506117f09173ffffffffffffffffffffffffffffffffffffffff909116906117d19084906141bd565b865473ffffffffffffffffffffffffffffffffffffffff16919061327e565b600484015460028501546040805165ffffffffffff898116825274010000000000000000000000000000000000000000909304909216602083015288917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a350505061126e565b6002810180547a01000000000000000000000000000000000000000000000000000065ffffffffffff740100000000000000000000000000000000000000008304160279ffffffffffffffffffffffffffffffffffffffffffffffffffff82168117909255600583015483546118f59373ffffffffffffffffffffffffffffffffffffffff918216939082169116179061327e565b60048101546002820154604080517401000000000000000000000000000000000000000090920465ffffffffffff16808352602083015285917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a35050600160005550565b6000818152600160205260408120600281015474010000000000000000000000000000000000000000900465ffffffffffff164210806119e75750600281015474010000000000000000000000000000000000000000810465ffffffffffff9081167a01000000000000000000000000000000000000000000000000000090920416145b156119f55750600092915050565b60028101546000907a010000000000000000000000000000000000000000000000000000900465ffffffffffff1615801590611a5b57506002820154427a01000000000000000000000000000000000000000000000000000090910465ffffffffffff16105b611a93576002820154611a8e9074010000000000000000000000000000000000000000900465ffffffffffff16426141bd565b611aeb565b6002820154611ae29065ffffffffffff7401000000000000000000000000000000000000000082048116917a0100000000000000000000000000000000000000000000000000009004166141d4565b65ffffffffffff165b90506000611afc6201518083614145565b600384015490915061ffff16811015611b1a57506000949350505050565b60028301547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16158015611b56575082600401548210155b15611b785782600601548360050154611b6f91906141bd565b95945050505050565b600083600401548460050154611b8e9190614145565b90506000611b9c8483614180565b9050846006015481611bae91906141bd565b979650505050505050565b60026000541415611c26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055611c36828285612b31565b611c44868686868686612d94565b5050600160005550505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015611cc257602002820191906000526020600020905b815481526020019060010190808311611cae575b5050505050905060005b8151811015611d12576000611cec8383815181106104f2576104f261428f565b1115611d005782611cfc81614227565b9350505b80611d0a81614227565b915050611ccc565b5060008267ffffffffffffffff811115611d2e57611d2e6142be565b604051908082528060200260200182016040528015611d57578160200160208202803683370190505b5090506000805b8351811015610662576000611d7e8583815181106104f2576104f261428f565b1115611dc957838181518110611d9657611d9661428f565b6020026020010151838381518110611db057611db061428f565b602090810291909101015281611dc581614227565b9250505b80611dd381614227565b915050611d5e565b60026000541415611e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055611e58868689612b31565b611e668a8886868686613352565b611e748a8a8a8a8a8a612d94565b505060016000555050505050505050565b611ee86040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b818152611ef482611963565b60208083019190915260009283526001808252604093849020845161012081018652815473ffffffffffffffffffffffffffffffffffffffff90811682529282015483169381019390935260028101549182168386015265ffffffffffff740100000000000000000000000000000000000000008304811660608501527a0100000000000000000000000000000000000000000000000000009092049091166080830152600381015461ffff1660a0830152600481015460c0830152600581015460e0830152600601546101008201529181019190915290565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949383018282801561203a57602002820191906000526020600020905b815481526020019060010190808311612026575b505050505090506000815167ffffffffffffffff81111561205d5761205d6142be565b6040519080825280602002602001820160405280156120f257816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161207b5790505b50905060005b825181101561222357600160008483815181106121175761211761428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015282518390839081106122055761220561428f565b6020026020010181905250808061221b90614227565b9150506120f8565b509392505050565b6002602052816000526040600020818154811061224757600080fd5b90600052602060002001600091509150505481565b600260005414156122c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260005588518a511480156122e0575087518951145b80156122ed575086518851145b80156122fa575085518751145b8015612307575084518651145b8015612314575083518551145b8015612321575082518451145b801561232e575081518351145b801561233b575080518251145b6123c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a6372656174655061796d656e7473576974685065726d60448201527f69743a20617272617973206d7573742062652073616d65206c656e67746800006064820152608401610a21565b60005b8a518110156125695761241c8782815181106123e8576123e861428f565b60200260200101518783815181106124025761240261428f565b60200260200101518a8481518110610b4957610b4961428f565b6124c08b82815181106124315761243161428f565b602002602001015189838151811061244b5761244b61428f565b60200260200101518784815181106124655761246561428f565b602002602001015187858151811061247f5761247f61428f565b60200260200101518786815181106124995761249961428f565b60200260200101518787815181106124b3576124b361428f565b6020026020010151613352565b6125578b82815181106124d5576124d561428f565b60200260200101518b83815181106124ef576124ef61428f565b60200260200101518b84815181106125095761250961428f565b60200260200101518b85815181106125235761252361428f565b60200260200101518b868151811061253d5761253d61428f565b60200260200101518b8781518110610bed57610bed61428f565b8061256181614227565b9150506123ca565b50506001600055505050505050505050565b60606000805b6003548110156125bc57600061259682611963565b11156125aa57816125a681614227565b9250505b806125b481614227565b915050612581565b5060008167ffffffffffffffff8111156125d8576125d86142be565b604051908082528060200260200182016040528015612601578160200160208202803683370190505b5090506000805b600354811015610d7457600061261d82611963565b111561264f57808383815181106126365761263661428f565b60209081029190910101528161264b81614227565b9250505b8061265981614227565b915050612608565b61268560405180606001604052806000815260200160008152602001600081525090565b60005b60035481101561290957600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff9081168083529483015481169382019390935260028201548084169582019590955265ffffffffffff740100000000000000000000000000000000000000008604811660608301527a0100000000000000000000000000000000000000000000000000009095049094166080850152600381015461ffff1660a0850152600481015460c0850152600581015460e08501526006015461010084015285161480156127865750806080015165ffffffffffff16816060015165ffffffffffff1614155b156128f65760e0810151835161279c919061412d565b8352606081015165ffffffffffff164211156128f65780610100015183604001516127c7919061412d565b6040840152608081015160009065ffffffffffff16158015906127f5575042826080015165ffffffffffff16105b6128155760608201516128109065ffffffffffff16426141bd565b612832565b8160600151826080015161282991906141d4565b65ffffffffffff165b905060006128436201518083614145565b90508260a0015161ffff1681106128f357608083015165ffffffffffff1615801561287257508260c001518210155b156128a5578261010001518360e001518660200151612891919061412d565b61289b91906141bd565b60208601526128f3565b60008360c001518460e001516128bb9190614145565b905060006128c98483614180565b90508461010001518188602001516128e1919061412d565b6128eb91906141bd565b602088015250505b50505b508061290181614227565b915050612688565b50919050565b60606000805b60035481101561295057600061292a82611963565b111561293e578161293a81614227565b9250505b8061294881614227565b915050612915565b5060008167ffffffffffffffff81111561296c5761296c6142be565b604051908082528060200260200182016040528015612a0157816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161298a5790505b5090506000805b600354811015610d74576000612a1d82611963565b1115612b1f57600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff90811682529382015484169281019290925260028101549283169382019390935265ffffffffffff740100000000000000000000000000000000000000008304811660608301527a0100000000000000000000000000000000000000000000000000009092049091166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e08201526006909101546101008201528351849084908110612b0557612b0561428f565b60200260200101819052508180612b1b90614227565b9250505b80612b2981614227565b915050612a08565b60008311612bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e206d757374206265203e203000000000000000006064820152608401610a21565b612bd0620151806123a5614180565b831115612c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e206d6f7265207468616e203235207965617273006064820152608401610a21565b612c7061ffff831662015180614180565b831015612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e203c20636c6966660000000000000000000000006064820152608401610a21565b60008111612d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a20616d6f7560448201527f6e74206e6f74203e2030000000000000000000000000000000000000000000006064820152608401610a21565b505050565b612db673ffffffffffffffffffffffffffffffffffffffff8716333086613404565b600065ffffffffffff851615612dcc5784612dce565b425b905060006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018365ffffffffffff168152602001600065ffffffffffff1681526020018461ffff168152602001858152602001868152602001600081525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550608082015181600201601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160030160006101000a81548161ffff021916908361ffff16021790555060c0820151816004015560e082015181600501556101008201518160060155905050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc79ad252141c555f8bc2366645b742a84d8d746c04c665a657db846f14a9143860035489878a8a604051613102959493929190948552602085019390935265ffffffffffff919091166040840152606083015261ffff16608082015260a00190565b60405180910390a46003805490600061311a83614227565b91905055505050505050505050565b60008281526001602081905260409091209081015473ffffffffffffffffffffffffffffffffffffffff1633146131e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a5f636c61696d546f6b656e733a206d73672e73656e6460448201527f657220213d2072656365697665720000000000000000000000000000000000006064820152608401610a21565b8181600601546131f2919061412d565b6006820155600181015481546132229173ffffffffffffffffffffffffffffffffffffffff91821691168461327e565b80546001820154604051848152859273ffffffffffffffffffffffffffffffffffffffff9081169216907fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de69060200160405180910390a4505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612d8f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613468565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156133e457600080fd5b505af11580156133f8573d6000803e3d6000fd5b50505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526134629085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016132d0565b50505050565b60006134ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135749092919063ffffffff16565b805190915015612d8f57808060200190518101906134e89190613e56565b612d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a21565b6060613583848460008561358d565b90505b9392505050565b60608247101561361f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a21565b843b613687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a21565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136b09190613f6e565b60006040518083038185875af1925050503d80600081146136ed576040519150601f19603f3d011682016040523d82523d6000602084013e6136f2565b606091505b5091509150611bae8282866060831561370c575081613586565b82511561371c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a219190614054565b803573ffffffffffffffffffffffffffffffffffffffff8116811461377457600080fd5b919050565b600082601f83011261378a57600080fd5b8135602061379f61379a83614109565b6140ba565b80838252828201915082860187848660051b89010111156137bf57600080fd5b60005b858110156137e5576137d382613750565b845292840192908401906001016137c2565b5090979650505050505050565b600082601f83011261380357600080fd5b8135602061381361379a83614109565b80838252828201915082860187848660051b890101111561383357600080fd5b60005b858110156137e557813584529284019290840190600101613836565b600082601f83011261386357600080fd5b8135602061387361379a83614109565b80838252828201915082860187848660051b890101111561389357600080fd5b60005b858110156137e5576138a782613987565b84529284019290840190600101613896565b600082601f8301126138ca57600080fd5b813560206138da61379a83614109565b80838252828201915082860187848660051b89010111156138fa57600080fd5b60005b858110156137e55761390e82613999565b845292840192908401906001016138fd565b600082601f83011261393157600080fd5b8135602061394161379a83614109565b80838252828201915082860187848660051b890101111561396157600080fd5b60005b858110156137e557613975826139af565b84529284019290840190600101613964565b803561ffff8116811461377457600080fd5b803565ffffffffffff8116811461377457600080fd5b803560ff8116811461377457600080fd5b6000602082840312156139d257600080fd5b61358682613750565b600080604083850312156139ee57600080fd5b6139f783613750565b9150613a0560208401613750565b90509250929050565b60008060008060008060c08789031215613a2757600080fd5b613a3087613750565b9550613a3e60208801613750565b9450613a4c60408801613999565b93506060870135925060808701359150613a6860a08801613987565b90509295509295509295565b6000806000806000806000806000806101408b8d031215613a9457600080fd5b613a9d8b613750565b9950613aab60208c01613750565b9850613ab960408c01613999565b975060608b0135965060808b01359550613ad560a08c01613987565b945060c08b01359350613aea60e08c016139af565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215613b1e57600080fd5b613b2783613750565b946020939093013593505050565b60008060008060008060c08789031215613b4e57600080fd5b863567ffffffffffffffff80821115613b6657600080fd5b613b728a838b01613779565b97506020890135915080821115613b8857600080fd5b613b948a838b01613779565b96506040890135915080821115613baa57600080fd5b613bb68a838b016138b9565b95506060890135915080821115613bcc57600080fd5b613bd88a838b016137f2565b94506080890135915080821115613bee57600080fd5b613bfa8a838b016137f2565b935060a0890135915080821115613c1057600080fd5b50613c1d89828a01613852565b9150509295509295509295565b6000806000806000806000806000806101408b8d031215613c4a57600080fd5b8a3567ffffffffffffffff80821115613c6257600080fd5b613c6e8e838f01613779565b9b5060208d0135915080821115613c8457600080fd5b613c908e838f01613779565b9a5060408d0135915080821115613ca657600080fd5b613cb28e838f016138b9565b995060608d0135915080821115613cc857600080fd5b613cd48e838f016137f2565b985060808d0135915080821115613cea57600080fd5b613cf68e838f016137f2565b975060a08d0135915080821115613d0c57600080fd5b613d188e838f01613852565b965060c08d0135915080821115613d2e57600080fd5b613d3a8e838f016137f2565b955060e08d0135915080821115613d5057600080fd5b613d5c8e838f01613920565b94506101008d0135915080821115613d7357600080fd5b613d7f8e838f016137f2565b93506101208d0135915080821115613d9657600080fd5b50613da38d828e016137f2565b9150509295989b9194979a5092959850565b600060208284031215613dc757600080fd5b813567ffffffffffffffff811115613dde57600080fd5b613dea848285016137f2565b949350505050565b60008060408385031215613e0557600080fd5b823567ffffffffffffffff80821115613e1d57600080fd5b613e29868387016137f2565b93506020850135915080821115613e3f57600080fd5b50613e4c858286016137f2565b9150509250929050565b600060208284031215613e6857600080fd5b8151801515811461358657600080fd5b600060208284031215613e8a57600080fd5b5035919050565b60008060408385031215613ea457600080fd5b82359150613a0560208401613999565b80518252602081015160208301526040810151612d8f60408401825b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151613f1d606084018265ffffffffffff169052565b506080810151613f37608084018265ffffffffffff169052565b5060a0810151613f4d60a084018261ffff169052565b5060c0818101519083015260e0808201519083015261010090810151910152565b60008251613f808184602087016141fb565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57613fb9838551613eb4565b928401926101609290920191600101613fa6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57614008838551613ed0565b928401926101209290920191600101613ff5565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57835183529284019291840191600101614038565b60208152600082518060208401526140738160408501602087016141fb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b61016081016140b48284613eb4565b92915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614101576141016142be565b604052919050565b600067ffffffffffffffff821115614123576141236142be565b5060051b60200190565b6000821982111561414057614140614260565b500190565b60008261417b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141b8576141b8614260565b500290565b6000828210156141cf576141cf614260565b500390565b600065ffffffffffff838116908316818110156141f3576141f3614260565b039392505050565b60005b838110156142165781810151838201526020016141fe565b838111156134625750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561425957614259614260565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212204e9e473ba525027b865e9802bf5c60eb96c729b222325097de8625990579bb7e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80639006b7ef116100d8578063c2080cf81161008c578063ef2c57fc11610066578063ef2c57fc14610434578063f54659921461043c578063f9c186861461044f57600080fd5b8063c2080cf8146102f3578063e52af72a14610306578063e87b4b481461031957600080fd5b8063ad60cc2e116100bd578063ad60cc2e146102ad578063b343c643146102c0578063ba638ca3146102e057600080fd5b80639006b7ef1461027a57806397ff37581461028d57600080fd5b80634812160c1161012f57806358e086821161011457806358e08682146102415780636068eec81461025457806385d3374f1461026757600080fd5b80634812160c1461020e5780634b3ac3d01461022e57600080fd5b806312dffc0f1161016057806312dffc0f146101da5780632279fa4c146101ef57806331e48f881461020657600080fd5b80630a93b84f1461017c5780631049334f146101a5575b600080fd5b61018f61018a3660046139c0565b610457565b60405161019c9190613f8a565b60405180910390f35b6101b86101b33660046139db565b61066d565b604080518251815260208084015190820152918101519082015260600161019c565b6101ed6101e8366004613b35565b6109b8565b005b6101f860035481565b60405190815260200161019c565b61018f610c1a565b61022161021c3660046139c0565b610d7d565b60405161019c9190613fd9565b6101ed61023c366004613df2565b61104c565b6101ed61024f366004613db5565b611278565b6101ed610262366004613e91565b6113de565b6101f8610275366004613e78565b611963565b6101ed610288366004613a0e565b611bb9565b6102a061029b3660046139c0565b611c51565b60405161019c919061401c565b6101ed6102bb366004613a74565b611ddb565b6102d36102ce366004613e78565b611e85565b60405161019c91906140a5565b6102216102ee3660046139c0565b611fce565b6101f8610301366004613b0b565b61222b565b6101ed610314366004613c2a565b61225c565b6103c4610327366004613e78565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015473ffffffffffffffffffffffffffffffffffffffff96871696948516959484169465ffffffffffff7401000000000000000000000000000000000000000086048116957a0100000000000000000000000000000000000000000000000000009004169361ffff16929189565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a0152969098169587019590955265ffffffffffff938416606087015291909216608085015261ffff90911660a084015260c083015260e08201526101008101919091526101200161019c565b6102a061257b565b6101b861044a3660046139c0565b612661565b61022161290f565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949384939291908301828280156104c857602002820191906000526020600020905b8154815260200190600101908083116104b4575b5050505050905060005b81518110156105255760006104ff8383815181106104f2576104f261428f565b6020026020010151611963565b1115610513578261050f81614227565b9350505b8061051d81614227565b9150506104d2565b5060008267ffffffffffffffff811115610541576105416142be565b6040519080825280602002602001820160405280156105d557816020015b6105c26040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b81526020019060019003908161055f5790505b5090506000805b83518110156106625760006105fc8583815181106104f2576104f261428f565b1115610650576106248482815181106106175761061761428f565b6020026020010151611e85565b8383815181106106365761063661428f565b6020026020010181905250818061064c90614227565b9250505b8061065a81614227565b9150506105dc565b509095945050505050565b61069160405180606001604052806000815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260209081526040808320805482518185028101850190935280835291929091908301828280156106fe57602002820191906000526020600020905b8154815260200190600101908083116106ea575b5050505050905060005b81518110156109b0576000600160008484815181106107295761072961428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff908116808352600184015482169583019590955260028301548082169483019490945265ffffffffffff740100000000000000000000000000000000000000008504811660608401527a0100000000000000000000000000000000000000000000000000009094049093166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e08201526006909101546101008201529250871614801561082d5750806080015165ffffffffffff16816060015165ffffffffffff1614155b1561099d5760e08101518451610843919061412d565b8452606081015165ffffffffffff1642111561099d57806101000151846040015161086e919061412d565b6040850152608081015160009065ffffffffffff161580159061089c575042826080015165ffffffffffff16105b6108bc5760608201516108b79065ffffffffffff16426141bd565b6108d9565b816060015182608001516108d091906141d4565b65ffffffffffff165b905060006108ea6201518083614145565b90508260a0015161ffff16811061099a57608083015165ffffffffffff1615801561091957508260c001518210155b1561094c578261010001518360e001518760200151610938919061412d565b61094291906141bd565b602087015261099a565b60008360c001518460e001516109629190614145565b905060006109708483614180565b9050846101000151818960200151610988919061412d565b61099291906141bd565b602089015250505b50505b50806109a881614227565b915050610708565b505092915050565b60026000541415610a2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005584518651148015610a41575083518551145b8015610a4e575082518451145b8015610a5b575081518351145b8015610a68575080518251145b610af4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5061796d656e74733a3a6372656174655061796d656e74733a2061727261797360448201527f206d7573742062652073616d65206c656e6774680000000000000000000000006064820152608401610a21565b60005b8651811015610c0c57610b56838281518110610b1557610b1561428f565b6020026020010151838381518110610b2f57610b2f61428f565b6020026020010151868481518110610b4957610b4961428f565b6020026020010151612b31565b610bfa878281518110610b6b57610b6b61428f565b6020026020010151878381518110610b8557610b8561428f565b6020026020010151878481518110610b9f57610b9f61428f565b6020026020010151878581518110610bb957610bb961428f565b6020026020010151878681518110610bd357610bd361428f565b6020026020010151878781518110610bed57610bed61428f565b6020026020010151612d94565b80610c0481614227565b915050610af7565b505060016000555050505050565b60606000805b600354811015610c5b576000610c3582611963565b1115610c495781610c4581614227565b9250505b80610c5381614227565b915050610c20565b5060008167ffffffffffffffff811115610c7757610c776142be565b604051908082528060200260200182016040528015610d0b57816020015b610cf86040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b815260200190600190039081610c955790505b5090506000805b600354811015610d74576000610d2782611963565b1115610d6257610d3681611e85565b838381518110610d4857610d4861428f565b60200260200101819052508180610d5e90614227565b9250505b80610d6c81614227565b915050610d12565b50909392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015610dee57602002820191906000526020600020905b815481526020019060010190808311610dda575b5050505050905060005b8151811015610e3e576000610e188383815181106104f2576104f261428f565b1115610e2c5782610e2881614227565b9350505b80610e3681614227565b915050610df8565b5060008267ffffffffffffffff811115610e5a57610e5a6142be565b604051908082528060200260200182016040528015610eef57816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610e785790505b5090506000805b8351811015610662576000610f168583815181106104f2576104f261428f565b111561103a5760016000858381518110610f3257610f3261428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015283518490849081106110205761102061428f565b6020026020010181905250818061103690614227565b9250505b8061104481614227565b915050610ef6565b600260005414156110b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055805182511461115157604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20617272617973206d7573742062652073616d65206c656e6774686064820152608401610a21565b60005b825181101561126e5760006111748483815181106104f2576104f261428f565b90508282815181106111885761118861428f565b602002602001015181101561121f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a636c61696d417661696c61626c65546f6b656e416d6f60448201527f756e74733a20636c61696d61626c65416d6f756e74203c20616d6f756e7400006064820152608401610a21565b61125b8483815181106112345761123461428f565b602002602001015184848151811061124e5761124e61428f565b6020026020010151613129565b508061126681614227565b915050611154565b5050600160005550565b600260005414156112e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260009081555b81518110156113d557600061130d8383815181106104f2576104f261428f565b90506000811161139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5061796d656e74733a3a636c61696d416c6c417661696c61626c65546f6b656e60448201527f733a20636c61696d61626c65416d6f756e7420697320300000000000000000006064820152608401610a21565b6113c28383815181106113b4576113b461428f565b602002602001015182613129565b50806113cd81614227565b9150506112ed565b50506001600055565b6002600054141561144b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260008181558381526001602052604090209081015473ffffffffffffffffffffffffffffffffffffffff1633148061149e5750600181015473ffffffffffffffffffffffffffffffffffffffff1633145b61152a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f5061796d656e74733a3a73746f705061796d656e743a206d73672e73656e646560448201527f72206d757374206265207061796572206f7220726563656976657200000000006064820152608401610a21565b60028101547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16156115e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a73746f705061796d656e743a207061796d656e74206160448201527f6c72656164792073746f707065640000000000000000000000000000000000006064820152608401610a21565b65ffffffffffff8216156115f657816115f8565b425b6004820154600283015491935061162e9174010000000000000000000000000000000000000000900465ffffffffffff1661412d565b8265ffffffffffff16106116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603360248201527f5061796d656e74733a3a73746f705061796d656e743a2073746f702074696d6560448201527f203e207061796d656e74206475726174696f6e000000000000000000000000006064820152608401610a21565b600281015465ffffffffffff74010000000000000000000000000000000000000000909104811690831611156118605760028101805465ffffffffffff8085167a0100000000000000000000000000000000000000000000000000000279ffffffffffffffffffffffffffffffffffffffffffffffffffff909216919091179182905560009161176e917401000000000000000000000000000000000000000090910416846141d4565b65ffffffffffff16905060008260040154836005015461178e9190614145565b9050600061179c8383614180565b600285015460058601549192506117f09173ffffffffffffffffffffffffffffffffffffffff909116906117d19084906141bd565b865473ffffffffffffffffffffffffffffffffffffffff16919061327e565b600484015460028501546040805165ffffffffffff898116825274010000000000000000000000000000000000000000909304909216602083015288917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a350505061126e565b6002810180547a01000000000000000000000000000000000000000000000000000065ffffffffffff740100000000000000000000000000000000000000008304160279ffffffffffffffffffffffffffffffffffffffffffffffffffff82168117909255600583015483546118f59373ffffffffffffffffffffffffffffffffffffffff918216939082169116179061327e565b60048101546002820154604080517401000000000000000000000000000000000000000090920465ffffffffffff16808352602083015285917fb1d380b389fcd478bcbc0a2ed8841b054724bc43179bcdb1502774910b0904f8910160405180910390a35050600160005550565b6000818152600160205260408120600281015474010000000000000000000000000000000000000000900465ffffffffffff164210806119e75750600281015474010000000000000000000000000000000000000000810465ffffffffffff9081167a01000000000000000000000000000000000000000000000000000090920416145b156119f55750600092915050565b60028101546000907a010000000000000000000000000000000000000000000000000000900465ffffffffffff1615801590611a5b57506002820154427a01000000000000000000000000000000000000000000000000000090910465ffffffffffff16105b611a93576002820154611a8e9074010000000000000000000000000000000000000000900465ffffffffffff16426141bd565b611aeb565b6002820154611ae29065ffffffffffff7401000000000000000000000000000000000000000082048116917a0100000000000000000000000000000000000000000000000000009004166141d4565b65ffffffffffff165b90506000611afc6201518083614145565b600384015490915061ffff16811015611b1a57506000949350505050565b60028301547a010000000000000000000000000000000000000000000000000000900465ffffffffffff16158015611b56575082600401548210155b15611b785782600601548360050154611b6f91906141bd565b95945050505050565b600083600401548460050154611b8e9190614145565b90506000611b9c8483614180565b9050846006015481611bae91906141bd565b979650505050505050565b60026000541415611c26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055611c36828285612b31565b611c44868686868686612d94565b5050600160005550505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602090815260408083208054825181850281018501909352808352606094938493929190830182828015611cc257602002820191906000526020600020905b815481526020019060010190808311611cae575b5050505050905060005b8151811015611d12576000611cec8383815181106104f2576104f261428f565b1115611d005782611cfc81614227565b9350505b80611d0a81614227565b915050611ccc565b5060008267ffffffffffffffff811115611d2e57611d2e6142be565b604051908082528060200260200182016040528015611d57578160200160208202803683370190505b5090506000805b8351811015610662576000611d7e8583815181106104f2576104f261428f565b1115611dc957838181518110611d9657611d9661428f565b6020026020010151838381518110611db057611db061428f565b602090810291909101015281611dc581614227565b9250505b80611dd381614227565b915050611d5e565b60026000541415611e48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b6002600055611e58868689612b31565b611e668a8886868686613352565b611e748a8a8a8a8a8a612d94565b505060016000555050505050505050565b611ee86040805160608082018352600080835260208084018290528451610120810186528281529081018290528085018290529182018190526080820181905260a0820181905260c0820181905260e08201819052610100820152909182015290565b818152611ef482611963565b60208083019190915260009283526001808252604093849020845161012081018652815473ffffffffffffffffffffffffffffffffffffffff90811682529282015483169381019390935260028101549182168386015265ffffffffffff740100000000000000000000000000000000000000008304811660608501527a0100000000000000000000000000000000000000000000000000009092049091166080830152600381015461ffff1660a0830152600481015460c0830152600581015460e0830152600601546101008201529181019190915290565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604080832080548251818502810185019093528083526060949383018282801561203a57602002820191906000526020600020905b815481526020019060010190808311612026575b505050505090506000815167ffffffffffffffff81111561205d5761205d6142be565b6040519080825280602002602001820160405280156120f257816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161207b5790505b50905060005b825181101561222357600160008483815181106121175761211761428f565b6020908102919091018101518252818101929092526040908101600020815161012081018352815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169482019490945260028201549384169281019290925265ffffffffffff740100000000000000000000000000000000000000008404811660608401527a0100000000000000000000000000000000000000000000000000009093049092166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e082015260069091015461010082015282518390839081106122055761220561428f565b6020026020010181905250808061221b90614227565b9150506120f8565b509392505050565b6002602052816000526040600020818154811061224757600080fd5b90600052602060002001600091509150505481565b600260005414156122c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a21565b600260005588518a511480156122e0575087518951145b80156122ed575086518851145b80156122fa575085518751145b8015612307575084518651145b8015612314575083518551145b8015612321575082518451145b801561232e575081518351145b801561233b575080518251145b6123c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5061796d656e74733a3a6372656174655061796d656e7473576974685065726d60448201527f69743a20617272617973206d7573742062652073616d65206c656e67746800006064820152608401610a21565b60005b8a518110156125695761241c8782815181106123e8576123e861428f565b60200260200101518783815181106124025761240261428f565b60200260200101518a8481518110610b4957610b4961428f565b6124c08b82815181106124315761243161428f565b602002602001015189838151811061244b5761244b61428f565b60200260200101518784815181106124655761246561428f565b602002602001015187858151811061247f5761247f61428f565b60200260200101518786815181106124995761249961428f565b60200260200101518787815181106124b3576124b361428f565b6020026020010151613352565b6125578b82815181106124d5576124d561428f565b60200260200101518b83815181106124ef576124ef61428f565b60200260200101518b84815181106125095761250961428f565b60200260200101518b85815181106125235761252361428f565b60200260200101518b868151811061253d5761253d61428f565b60200260200101518b8781518110610bed57610bed61428f565b8061256181614227565b9150506123ca565b50506001600055505050505050505050565b60606000805b6003548110156125bc57600061259682611963565b11156125aa57816125a681614227565b9250505b806125b481614227565b915050612581565b5060008167ffffffffffffffff8111156125d8576125d86142be565b604051908082528060200260200182016040528015612601578160200160208202803683370190505b5090506000805b600354811015610d7457600061261d82611963565b111561264f57808383815181106126365761263661428f565b60209081029190910101528161264b81614227565b9250505b8061265981614227565b915050612608565b61268560405180606001604052806000815260200160008152602001600081525090565b60005b60035481101561290957600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff9081168083529483015481169382019390935260028201548084169582019590955265ffffffffffff740100000000000000000000000000000000000000008604811660608301527a0100000000000000000000000000000000000000000000000000009095049094166080850152600381015461ffff1660a0850152600481015460c0850152600581015460e08501526006015461010084015285161480156127865750806080015165ffffffffffff16816060015165ffffffffffff1614155b156128f65760e0810151835161279c919061412d565b8352606081015165ffffffffffff164211156128f65780610100015183604001516127c7919061412d565b6040840152608081015160009065ffffffffffff16158015906127f5575042826080015165ffffffffffff16105b6128155760608201516128109065ffffffffffff16426141bd565b612832565b8160600151826080015161282991906141d4565b65ffffffffffff165b905060006128436201518083614145565b90508260a0015161ffff1681106128f357608083015165ffffffffffff1615801561287257508260c001518210155b156128a5578261010001518360e001518660200151612891919061412d565b61289b91906141bd565b60208601526128f3565b60008360c001518460e001516128bb9190614145565b905060006128c98483614180565b90508461010001518188602001516128e1919061412d565b6128eb91906141bd565b602088015250505b50505b508061290181614227565b915050612688565b50919050565b60606000805b60035481101561295057600061292a82611963565b111561293e578161293a81614227565b9250505b8061294881614227565b915050612915565b5060008167ffffffffffffffff81111561296c5761296c6142be565b604051908082528060200260200182016040528015612a0157816020015b604080516101208101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161298a5790505b5090506000805b600354811015610d74576000612a1d82611963565b1115612b1f57600081815260016020818152604092839020835161012081018552815473ffffffffffffffffffffffffffffffffffffffff90811682529382015484169281019290925260028101549283169382019390935265ffffffffffff740100000000000000000000000000000000000000008304811660608301527a0100000000000000000000000000000000000000000000000000009092049091166080820152600382015461ffff1660a0820152600482015460c0820152600582015460e08201526006909101546101008201528351849084908110612b0557612b0561428f565b60200260200101819052508180612b1b90614227565b9250505b80612b2981614227565b915050612a08565b60008311612bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e206d757374206265203e203000000000000000006064820152608401610a21565b612bd0620151806123a5614180565b831115612c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e206d6f7265207468616e203235207965617273006064820152608401610a21565b612c7061ffff831662015180614180565b831015612cff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a207061796d60448201527f656e74206475726174696f6e203c20636c6966660000000000000000000000006064820152608401610a21565b60008111612d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5061796d656e74733a3a5f76616c69646174655061796d656e743a20616d6f7560448201527f6e74206e6f74203e2030000000000000000000000000000000000000000000006064820152608401610a21565b505050565b612db673ffffffffffffffffffffffffffffffffffffffff8716333086613404565b600065ffffffffffff851615612dcc5784612dce565b425b905060006040518061012001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018365ffffffffffff168152602001600065ffffffffffff1681526020018461ffff168152602001858152602001868152602001600081525090508060016000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548165ffffffffffff021916908365ffffffffffff160217905550608082015181600201601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a08201518160030160006101000a81548161ffff021916908361ffff16021790555060c0820151816004015560e082015181600501556101008201518160060155905050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060035490806001815401808255809150506001900390600052602060002001600090919091909150558673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fc79ad252141c555f8bc2366645b742a84d8d746c04c665a657db846f14a9143860035489878a8a604051613102959493929190948552602085019390935265ffffffffffff919091166040840152606083015261ffff16608082015260a00190565b60405180910390a46003805490600061311a83614227565b91905055505050505050505050565b60008281526001602081905260409091209081015473ffffffffffffffffffffffffffffffffffffffff1633146131e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f5061796d656e74733a3a5f636c61696d546f6b656e733a206d73672e73656e6460448201527f657220213d2072656365697665720000000000000000000000000000000000006064820152608401610a21565b8181600601546131f2919061412d565b6006820155600181015481546132229173ffffffffffffffffffffffffffffffffffffffff91821691168461327e565b80546001820154604051848152859273ffffffffffffffffffffffffffffffffffffffff9081169216907fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de69060200160405180910390a4505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052612d8f9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613468565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c4810182905273ffffffffffffffffffffffffffffffffffffffff87169063d505accf9060e401600060405180830381600087803b1580156133e457600080fd5b505af11580156133f8573d6000803e3d6000fd5b50505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526134629085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016132d0565b50505050565b60006134ca826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135749092919063ffffffff16565b805190915015612d8f57808060200190518101906134e89190613e56565b612d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a21565b6060613583848460008561358d565b90505b9392505050565b60608247101561361f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a21565b843b613687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a21565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136b09190613f6e565b60006040518083038185875af1925050503d80600081146136ed576040519150601f19603f3d011682016040523d82523d6000602084013e6136f2565b606091505b5091509150611bae8282866060831561370c575081613586565b82511561371c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a219190614054565b803573ffffffffffffffffffffffffffffffffffffffff8116811461377457600080fd5b919050565b600082601f83011261378a57600080fd5b8135602061379f61379a83614109565b6140ba565b80838252828201915082860187848660051b89010111156137bf57600080fd5b60005b858110156137e5576137d382613750565b845292840192908401906001016137c2565b5090979650505050505050565b600082601f83011261380357600080fd5b8135602061381361379a83614109565b80838252828201915082860187848660051b890101111561383357600080fd5b60005b858110156137e557813584529284019290840190600101613836565b600082601f83011261386357600080fd5b8135602061387361379a83614109565b80838252828201915082860187848660051b890101111561389357600080fd5b60005b858110156137e5576138a782613987565b84529284019290840190600101613896565b600082601f8301126138ca57600080fd5b813560206138da61379a83614109565b80838252828201915082860187848660051b89010111156138fa57600080fd5b60005b858110156137e55761390e82613999565b845292840192908401906001016138fd565b600082601f83011261393157600080fd5b8135602061394161379a83614109565b80838252828201915082860187848660051b890101111561396157600080fd5b60005b858110156137e557613975826139af565b84529284019290840190600101613964565b803561ffff8116811461377457600080fd5b803565ffffffffffff8116811461377457600080fd5b803560ff8116811461377457600080fd5b6000602082840312156139d257600080fd5b61358682613750565b600080604083850312156139ee57600080fd5b6139f783613750565b9150613a0560208401613750565b90509250929050565b60008060008060008060c08789031215613a2757600080fd5b613a3087613750565b9550613a3e60208801613750565b9450613a4c60408801613999565b93506060870135925060808701359150613a6860a08801613987565b90509295509295509295565b6000806000806000806000806000806101408b8d031215613a9457600080fd5b613a9d8b613750565b9950613aab60208c01613750565b9850613ab960408c01613999565b975060608b0135965060808b01359550613ad560a08c01613987565b945060c08b01359350613aea60e08c016139af565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060408385031215613b1e57600080fd5b613b2783613750565b946020939093013593505050565b60008060008060008060c08789031215613b4e57600080fd5b863567ffffffffffffffff80821115613b6657600080fd5b613b728a838b01613779565b97506020890135915080821115613b8857600080fd5b613b948a838b01613779565b96506040890135915080821115613baa57600080fd5b613bb68a838b016138b9565b95506060890135915080821115613bcc57600080fd5b613bd88a838b016137f2565b94506080890135915080821115613bee57600080fd5b613bfa8a838b016137f2565b935060a0890135915080821115613c1057600080fd5b50613c1d89828a01613852565b9150509295509295509295565b6000806000806000806000806000806101408b8d031215613c4a57600080fd5b8a3567ffffffffffffffff80821115613c6257600080fd5b613c6e8e838f01613779565b9b5060208d0135915080821115613c8457600080fd5b613c908e838f01613779565b9a5060408d0135915080821115613ca657600080fd5b613cb28e838f016138b9565b995060608d0135915080821115613cc857600080fd5b613cd48e838f016137f2565b985060808d0135915080821115613cea57600080fd5b613cf68e838f016137f2565b975060a08d0135915080821115613d0c57600080fd5b613d188e838f01613852565b965060c08d0135915080821115613d2e57600080fd5b613d3a8e838f016137f2565b955060e08d0135915080821115613d5057600080fd5b613d5c8e838f01613920565b94506101008d0135915080821115613d7357600080fd5b613d7f8e838f016137f2565b93506101208d0135915080821115613d9657600080fd5b50613da38d828e016137f2565b9150509295989b9194979a5092959850565b600060208284031215613dc757600080fd5b813567ffffffffffffffff811115613dde57600080fd5b613dea848285016137f2565b949350505050565b60008060408385031215613e0557600080fd5b823567ffffffffffffffff80821115613e1d57600080fd5b613e29868387016137f2565b93506020850135915080821115613e3f57600080fd5b50613e4c858286016137f2565b9150509250929050565b600060208284031215613e6857600080fd5b8151801515811461358657600080fd5b600060208284031215613e8a57600080fd5b5035919050565b60008060408385031215613ea457600080fd5b82359150613a0560208401613999565b80518252602081015160208301526040810151612d8f60408401825b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151613f1d606084018265ffffffffffff169052565b506080810151613f37608084018265ffffffffffff169052565b5060a0810151613f4d60a084018261ffff169052565b5060c0818101519083015260e0808201519083015261010090810151910152565b60008251613f808184602087016141fb565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57613fb9838551613eb4565b928401926101609290920191600101613fa6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57614008838551613ed0565b928401926101209290920191600101613ff5565b6020808252825182820181905260009190848201906040850190845b81811015613fcd57835183529284019291840191600101614038565b60208152600082518060208401526140738160408501602087016141fb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b61016081016140b48284613eb4565b92915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614101576141016142be565b604052919050565b600067ffffffffffffffff821115614123576141236142be565b5060051b60200190565b6000821982111561414057614140614260565b500190565b60008261417b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141b8576141b8614260565b500290565b6000828210156141cf576141cf614260565b500390565b600065ffffffffffff838116908316818110156141f3576141f3614260565b039392505050565b60005b838110156142165781810151838201526020016141fe565b838111156134625750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561425957614259614260565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212204e9e473ba525027b865e9802bf5c60eb96c729b222325097de8625990579bb7e64736f6c63430008060033",
  "devdoc": {
    "details": "Contract for streaming token payments for set periods of time w/ optional cliffs + ability to stop paymentsThis contract DOES NOT include support for deflationary token payments",
    "kind": "dev",
    "methods": {
      "activePaymentBalances(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the active payment balances"
        }
      },
      "activePaymentIds(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the active payment ids"
        }
      },
      "activePayments(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the payments"
        }
      },
      "allActivePaymentBalances()": {
        "returns": {
          "_0": "the active payment balances"
        }
      },
      "allActivePaymentIds()": {
        "returns": {
          "_0": "the payment ids"
        }
      },
      "allActivePayments()": {
        "returns": {
          "_0": "the payments"
        }
      },
      "allPayments(address)": {
        "params": {
          "receiver": "The address that has paid balances"
        },
        "returns": {
          "_0": "the payments"
        }
      },
      "claimAllAvailableTokens(uint256[])": {
        "details": "Errors if no tokens are claimableIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "payments": "The payment ids for available token balances"
        }
      },
      "claimAvailableTokenAmounts(uint256[],uint256[])": {
        "details": "Errors if token amounts provided are > claimable amountsIt is advised receivers check they are entitled to claim via `claimableBalance` before calling this",
        "params": {
          "amounts": "The amount of each available token to claim",
          "payments": "The payment ids for available token balances"
        }
      },
      "claimableBalance(uint256)": {
        "details": "Returns 0 if cliff duration has not ended, payment cancelled, or payment is in the future",
        "params": {
          "paymentId": "The payment ID"
        },
        "returns": {
          "_0": "The amount that can be claimed"
        }
      },
      "createPayment(address,address,uint48,uint256,uint256,uint16)": {
        "params": {
          "amount": "The amount of tokens being paid",
          "cliffDurationInDays": "The cliff duration in days",
          "paymentDurationInSecs": "The payment period in seconds",
          "receiver": "The account that will receive tokens",
          "startTime": "The unix timestamp when the payment period will start",
          "token": "Address of token for payment"
        }
      },
      "createPaymentWithPermit(address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "details": "It is up to the frontend developer to ensure the token implements permit - otherwise this will fail",
        "params": {
          "amount": "The amount of tokens being paid",
          "cliffDurationInDays": "The payment cliff duration in days",
          "deadline": "The time at which to expire the signature",
          "paymentDurationInSecs": "The payment period in seconds",
          "r": "Half of the ECDSA signature pair",
          "receiver": "The account that will receive tokens",
          "s": "Half of the ECDSA signature pair",
          "startTime": "The unix timestamp when the payment period will start",
          "token": "Address of token for payment",
          "v": "The recovery byte of the signature"
        }
      },
      "createPayments(address[],address[],uint48[],uint256[],uint256[],uint16[])": {
        "params": {
          "amounts": "The amounts of tokens being paid",
          "cliffDurationsInDays": "The cliff durations in days",
          "paymentDurationsInSecs": "The payment periods in seconds",
          "receivers": "The accounts that will receive tokens",
          "startTimes": "The unix timestamp when the payment periods will start",
          "tokens": "Address of tokens for payments"
        }
      },
      "createPaymentsWithPermit(address[],address[],uint48[],uint256[],uint256[],uint16[],uint256[],uint8[],bytes32[],bytes32[])": {
        "params": {
          "amounts": "The amounts of tokens being paid",
          "cliffDurationsInDays": "The cliff durations in days",
          "deadlines": "The times at which to expire the signatures",
          "paymentDurationsInSecs": "The payment periods in seconds",
          "receivers": "The accounts that will receive tokens",
          "rs": "Half of the ECDSA signature pairs",
          "ss": "Half of the ECDSA signature pairs",
          "startTimes": "The unix timestamp when the payment periods will start",
          "tokens": "Address of tokens for payments",
          "vs": "The recovery bytes of the signatures"
        }
      },
      "paymentBalance(uint256)": {
        "params": {
          "paymentId": "The payment ID"
        },
        "returns": {
          "balance": "the payment balance"
        }
      },
      "stopPayment(uint256,uint48)": {
        "params": {
          "paymentId": "The payment id for a payment",
          "stopTime": "Timestamp to stop payment, if 0 use current block.timestamp"
        }
      },
      "tokenBalance(address,address)": {
        "params": {
          "receiver": "The address that has available balances",
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token` for `receiver`"
        }
      },
      "totalTokenBalance(address)": {
        "params": {
          "token": "The token to check"
        },
        "returns": {
          "balance": "the total active balance of `token`"
        }
      }
    },
    "stateVariables": {
      "SECONDS_PER_DAY": {
        "details": "Used to translate payment periods specified in days to seconds"
      }
    },
    "title": "Payments",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentCreated(address,address,address,uint256,uint256,uint48,uint256,uint16)": {
        "notice": "Event emitted when a new payment is created"
      },
      "PaymentStopped(uint256,uint256,uint48,uint48)": {
        "notice": "Event emitted when payment stopped"
      },
      "TokensClaimed(address,address,uint256,uint256)": {
        "notice": "Event emitted when tokens are claimed by a receiver from an available balance"
      }
    },
    "kind": "user",
    "methods": {
      "activePaymentBalances(address)": {
        "notice": "Get all active token payment balances for receiver"
      },
      "activePaymentIds(address)": {
        "notice": "Get all active token payment ids for receiver"
      },
      "activePayments(address)": {
        "notice": "Get all active token payments for receiver"
      },
      "allActivePaymentBalances()": {
        "notice": "Get all active token payment balances"
      },
      "allActivePaymentIds()": {
        "notice": "Get all active token payment ids"
      },
      "allActivePayments()": {
        "notice": "Get all active token payments"
      },
      "allPayments(address)": {
        "notice": "Get all token payments for receiver"
      },
      "claimAllAvailableTokens(uint256[])": {
        "notice": "Allows receiver to claim all of their available tokens for a set of payments"
      },
      "claimAvailableTokenAmounts(uint256[],uint256[])": {
        "notice": "Allows receiver to claim a portion of their available tokens for a given payment"
      },
      "claimableBalance(uint256)": {
        "notice": "Get claimable balance for a given payment id"
      },
      "createPayment(address,address,uint48,uint256,uint256,uint16)": {
        "notice": "Create payment"
      },
      "createPaymentWithPermit(address,address,uint48,uint256,uint256,uint16,uint256,uint8,bytes32,bytes32)": {
        "notice": "Create payment, using permit for approval"
      },
      "createPayments(address[],address[],uint48[],uint256[],uint256[],uint16[])": {
        "notice": "Create multiple payments"
      },
      "createPaymentsWithPermit(address[],address[],uint48[],uint256[],uint256[],uint16[],uint256[],uint8[],bytes32[],bytes32[])": {
        "notice": "Create multiple payments, using permit for approvals"
      },
      "numPayments()": {
        "notice": "Number of payments"
      },
      "paymentBalance(uint256)": {
        "notice": "Get payment balance for a given payment id"
      },
      "paymentIds(address,uint256)": {
        "notice": "Mapping of address to payment id"
      },
      "stopPayment(uint256,uint48)": {
        "notice": "Allows payer or receiver to stop existing payments for a given paymentId"
      },
      "tokenBalance(address,address)": {
        "notice": "Get token balance of receiver"
      },
      "tokenPayments(uint256)": {
        "notice": "Mapping of payment id > token payments"
      },
      "totalTokenBalance(address)": {
        "notice": "Get total token balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16541,
        "contract": "contracts/Payments.sol:Payments",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4257,
        "contract": "contracts/Payments.sol:Payments",
        "label": "tokenPayments",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Payment)4232_storage)"
      },
      {
        "astId": 4263,
        "contract": "contracts/Payments.sol:Payments",
        "label": "paymentIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4266,
        "contract": "contracts/Payments.sol:Payments",
        "label": "numPayments",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Payment)4232_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Payments.Payment)",
        "numberOfBytes": "32",
        "value": "t_struct(Payment)4232_storage"
      },
      "t_struct(Payment)4232_storage": {
        "encoding": "inplace",
        "label": "struct Payments.Payment",
        "members": [
          {
            "astId": 4215,
            "contract": "contracts/Payments.sol:Payments",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4217,
            "contract": "contracts/Payments.sol:Payments",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4219,
            "contract": "contracts/Payments.sol:Payments",
            "label": "payer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4221,
            "contract": "contracts/Payments.sol:Payments",
            "label": "startTime",
            "offset": 20,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4223,
            "contract": "contracts/Payments.sol:Payments",
            "label": "stopTime",
            "offset": 26,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 4225,
            "contract": "contracts/Payments.sol:Payments",
            "label": "cliffDurationInDays",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 4227,
            "contract": "contracts/Payments.sol:Payments",
            "label": "paymentDurationInSecs",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4229,
            "contract": "contracts/Payments.sol:Payments",
            "label": "amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4231,
            "contract": "contracts/Payments.sol:Payments",
            "label": "amountClaimed",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}