{
  "address": "0xC779A854047A06244Ae6BDB648290D364cd971E8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "ChangedOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addVotingPowerForLockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PrismProxy",
          "name": "prism",
          "type": "address"
        }
      ],
      "name": "become",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "edenToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getEDENAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getEDENStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPower",
              "type": "uint256"
            }
          ],
          "internalType": "struct Stake",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_edenToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotingPowerForUnlockedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLockManager",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setTokenRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1072f3c902fe1ef460c04066ee51c3ae7bcf69eee71af1bf2524a4c1454de8b",
  "receipt": {
    "to": null,
    "from": "0xFDf8BE775bb5e2Ba1983dC7b26A655321502E104",
    "contractAddress": "0xC779A854047A06244Ae6BDB648290D364cd971E8",
    "transactionIndex": 4,
    "gasUsed": "3003171",
    "logsBloom": "0x
    "blockHash": "0xee91ae9ca6dc0ab64f1751782eed8b467e072063408d415397e49b101294256f",
    "transactionHash": "0xb1072f3c902fe1ef460c04066ee51c3ae7bcf69eee71af1bf2524a4c1454de8b",
    "logs": [],
    "blockNumber": 10744850,
    "cumulativeGasUsed": "3354109",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "25652fa7cefe72deed3db64da926a067",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotingPowerForLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PrismProxy\",\"name\":\"prism\",\"type\":\"address\"}],\"name\":\"become\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getEDENAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getEDENStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_edenToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotingPowerForUnlockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setTokenRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\",\"kind\":\"dev\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"params\":{\"account\":\"The recipient of voting power\",\"amount\":\"The amount of voting power to add\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"become(address)\":{\"params\":{\"prism\":\"Prism Proxy contract\"}},\"changeOwner(address)\":{\"params\":{\"newOwner\":\"New owner address\"}},\"decimals()\":{\"returns\":{\"_0\":\"decimals\"}},\"edenToken()\":{\"returns\":{\"_0\":\"Address of EDEN token\"}},\"getAmountStaked(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total amount staked\"}},\"getEDENAmountStaked(address)\":{\"params\":{\"staker\":\"The user with staked EDEN\"},\"returns\":{\"_0\":\"total EDEN amount staked\"}},\"getEDENStake(address)\":{\"params\":{\"staker\":\"The user with staked EDEN\"},\"returns\":{\"_0\":\"total EDEN staked\"}},\"getStake(address,address)\":{\"params\":{\"stakedToken\":\"The staked token\",\"staker\":\"The user with staked tokens\"},\"returns\":{\"_0\":\"total staked\"}},\"initialize(address,address)\":{\"details\":\"Should be called via VotingPowerPrism before calling anything else\",\"params\":{\"_edenToken\":\"address of EDEN token\"}},\"lockManager()\":{\"returns\":{\"_0\":\"Address of lockManager\"}},\"owner()\":{\"returns\":{\"_0\":\"Address of owner\"}},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"params\":{\"account\":\"The account with voting power\",\"amount\":\"The amount of voting power to remove\"}},\"setLockManager(address)\":{\"params\":{\"newLockManager\":\"Address of lockManager\"}},\"setTokenRegistry(address)\":{\"params\":{\"registry\":\"Address of token registry\"}},\"stake(address,uint256)\":{\"params\":{\"amount\":\"The amount to stake\",\"token\":\"The token to stake\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"The amount to stake\"}},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"tokenRegistry()\":{\"returns\":{\"_0\":\"Address of token registry\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\",\"token\":\"The token to withdraw\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"The amount to withdraw\"}}},\"title\":\"VotingPower\",\"version\":1},\"userdoc\":{\"events\":{\"ChangedOwner(address,address)\":{\"notice\":\"Event emitted when the owner of the voting power contract is updated\"},\"Staked(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance increases\"},\"VotingPowerChanged(address,uint256,uint256)\":{\"notice\":\"An event that's emitted when an account's vote balance changes\"},\"Withdrawn(address,address,uint256,uint256)\":{\"notice\":\"An event that's emitted when a user's staked balance decreases\"}},\"kind\":\"user\",\"methods\":{\"addVotingPowerForLockedTokens(address,uint256)\":{\"notice\":\"Count locked tokens toward voting power for `account`\"},\"balanceOf(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"become(address)\":{\"notice\":\"Accept invitation to be implementation contract for proxy\"},\"changeOwner(address)\":{\"notice\":\"Change owner of vesting contract\"},\"decimals()\":{\"notice\":\"Decimals used for voting power\"},\"edenToken()\":{\"notice\":\"Address of EDEN token\"},\"getAmountStaked(address,address)\":{\"notice\":\"Get total amount of tokens staked in contract by `staker`\"},\"getEDENAmountStaked(address)\":{\"notice\":\"Get total amount of EDEN tokens staked in contract by `staker`\"},\"getEDENStake(address)\":{\"notice\":\"Get staked amount and voting power from EDEN tokens staked in contract by `staker`\"},\"getStake(address,address)\":{\"notice\":\"Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\"},\"initialize(address,address)\":{\"notice\":\"Initialize VotingPower contract\"},\"lockManager()\":{\"notice\":\"Address of lockManager\"},\"owner()\":{\"notice\":\"Address of owner\"},\"removeVotingPowerForUnlockedTokens(address,uint256)\":{\"notice\":\"Remove unlocked tokens from voting power for `account`\"},\"setLockManager(address)\":{\"notice\":\"Sets lockManager address\"},\"setTokenRegistry(address)\":{\"notice\":\"Sets token registry address\"},\"stake(address,uint256)\":{\"notice\":\"Stake LP tokens to unlock voting power for `msg.sender`\"},\"stake(uint256)\":{\"notice\":\"Stake EDEN tokens to unlock voting power for `msg.sender`\"},\"stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake EDEN tokens using offchain approvals to unlock voting power\"},\"tokenRegistry()\":{\"notice\":\"Address of token registry\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw staked LP tokens, removing voting power for `msg.sender`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked EDEN tokens, removing voting power for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotingPower.sol\":\"VotingPower\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/VotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IVotingPowerFormula.sol\\\";\\nimport \\\"./lib/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./lib/PrismProxyImplementation.sol\\\";\\nimport \\\"./lib/VotingPowerStorage.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @title VotingPower\\n * @dev Implementation contract for voting power prism proxy\\n * Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract\\n * The exception to this is the `become` function specified in PrismProxyImplementation \\n * This function is called once and is used by this contract to accept its role as the implementation for the prism proxy\\n */\\ncontract VotingPower is PrismProxyImplementation, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice An event that's emitted when a user's staked balance increases\\n    event Staked(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when a user's staked balance decreases\\n    event Withdrawn(address indexed user, address indexed token, uint256 indexed amount, uint256 votingPower);\\n\\n    /// @notice An event that's emitted when an account's vote balance changes\\n    event VotingPowerChanged(address indexed voter, uint256 indexed previousBalance, uint256 indexed newBalance);\\n\\n    /// @notice Event emitted when the owner of the voting power contract is updated\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice restrict functions to just owner address\\n    modifier onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(msg.sender == app.owner, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize VotingPower contract\\n     * @dev Should be called via VotingPowerPrism before calling anything else\\n     * @param _edenToken address of EDEN token\\n     */\\n    function initialize(\\n        address _edenToken,\\n        address _owner\\n    ) public initializer {\\n        __ReentrancyGuard_init_unchained();\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.edenToken = IEdenToken(_edenToken);\\n        app.owner = _owner;\\n    }\\n\\n    /**\\n     * @notice Address of EDEN token\\n     * @return Address of EDEN token\\n     */\\n    function edenToken() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.edenToken);\\n    }\\n\\n    /**\\n     * @notice Decimals used for voting power\\n     * @return decimals\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Address of token registry\\n     * @return Address of token registry\\n     */\\n    function tokenRegistry() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return address(app.tokenRegistry);\\n    }\\n\\n    /**\\n     * @notice Address of lockManager\\n     * @return Address of lockManager\\n     */\\n    function lockManager() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.lockManager;\\n    }\\n\\n    /**\\n     * @notice Address of owner\\n     * @return Address of owner\\n     */\\n    function owner() public view returns (address) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return app.owner;\\n    }\\n\\n    /**\\n     * @notice Sets token registry address\\n     * @param registry Address of token registry\\n     */\\n    function setTokenRegistry(address registry) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.tokenRegistry = ITokenRegistry(registry);\\n    }\\n\\n    /**\\n     * @notice Sets lockManager address\\n     * @param newLockManager Address of lockManager\\n     */\\n    function setLockManager(address newLockManager) public onlyOwner {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        app.lockManager = newLockManager;\\n    }\\n\\n    /**\\n     * @notice Change owner of vesting contract\\n     * @param newOwner New owner address\\n     */\\n    function changeOwner(address newOwner) external onlyOwner {\\n        require(newOwner != address(0) && newOwner != address(this), \\\"VP::changeOwner: not valid address\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        emit ChangedOwner(app.owner, newOwner);\\n        app.owner = newOwner;   \\n    }\\n\\n    /**\\n     * @notice Stake EDEN tokens using offchain approvals to unlock voting power\\n     * @param amount The amount to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\\n        require(amount > 0, \\\"VP::stakeWithPermit: cannot stake 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(app.edenToken.balanceOf(msg.sender) >= amount, \\\"VP::stakeWithPermit: not enough tokens\\\");\\n\\n        app.edenToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        _stake(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake EDEN tokens to unlock voting power for `msg.sender`\\n     * @param amount The amount to stake\\n     */\\n    function stake(uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(app.edenToken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(app.edenToken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        _stake(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Stake LP tokens to unlock voting power for `msg.sender`\\n     * @param token The token to stake\\n     * @param amount The amount to stake\\n     */\\n    function stake(address token, uint256 amount) external nonReentrant {\\n        IERC20 lptoken = IERC20(token);\\n        require(amount > 0, \\\"VP::stake: cannot stake 0\\\");\\n        require(lptoken.balanceOf(msg.sender) >= amount, \\\"VP::stake: not enough tokens\\\");\\n        require(lptoken.allowance(msg.sender, address(this)) >= amount, \\\"VP::stake: must approve tokens before staking\\\");\\n\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        address tokenFormulaAddress = app.tokenRegistry.tokenFormulas(token);\\n        require(tokenFormulaAddress != address(0), \\\"VP::stake: token not supported\\\");\\n        \\n        IVotingPowerFormula tokenFormula = IVotingPowerFormula(tokenFormulaAddress);\\n        uint256 votingPower = tokenFormula.convertTokensToVotingPower(amount);\\n        _stake(msg.sender, token, amount, votingPower);\\n    }\\n\\n    /**\\n     * @notice Count locked tokens toward voting power for `account`\\n     * @param account The recipient of voting power\\n     * @param amount The amount of voting power to add\\n     */\\n    function addVotingPowerForLockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::addVPforLT: cannot add 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::addVPforLT: only lockManager contract\\\");\\n\\n        _increaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Remove unlocked tokens from voting power for `account`\\n     * @param account The account with voting power\\n     * @param amount The amount of voting power to remove\\n     */\\n    function removeVotingPowerForUnlockedTokens(address account, uint256 amount) external nonReentrant {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        require(amount > 0, \\\"VP::removeVPforUT: cannot remove 0 voting power\\\");\\n        require(msg.sender == app.lockManager, \\\"VP::removeVPforUT: only lockManager contract\\\");\\n\\n        _decreaseVotingPower(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked EDEN tokens, removing voting power for `msg.sender`\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        _withdraw(msg.sender, address(app.edenToken), amount, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw staked LP tokens, removing voting power for `msg.sender`\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdraw(address token, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"VP::withdraw: cannot withdraw 0\\\");\\n        Stake memory s = getStake(msg.sender, token);\\n        uint256 vpToWithdraw = amount * s.votingPower / s.amount;\\n        _withdraw(msg.sender, token, amount, vpToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Get total amount of EDEN tokens staked in contract by `staker`\\n     * @param staker The user with staked EDEN\\n     * @return total EDEN amount staked\\n     */\\n    function getEDENAmountStaked(address staker) public view returns (uint256) {\\n        return getEDENStake(staker).amount;\\n    }\\n\\n    /**\\n     * @notice Get total amount of tokens staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total amount staked\\n     */\\n    function getAmountStaked(address staker, address stakedToken) public view returns (uint256) {\\n        return getStake(staker, stakedToken).amount;\\n    }\\n\\n    /**\\n     * @notice Get staked amount and voting power from EDEN tokens staked in contract by `staker`\\n     * @param staker The user with staked EDEN\\n     * @return total EDEN staked\\n     */\\n    function getEDENStake(address staker) public view returns (Stake memory) {\\n        AppStorage storage app = VotingPowerStorage.appStorage();\\n        return getStake(staker, address(app.edenToken));\\n    }\\n\\n    /**\\n     * @notice Get total staked amount and voting power from `stakedToken` staked in contract by `staker`\\n     * @param staker The user with staked tokens\\n     * @param stakedToken The staked token\\n     * @return total staked\\n     */\\n    function getStake(address staker, address stakedToken) public view returns (Stake memory) {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        return ss.stakes[staker][stakedToken];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        return nCheckpoints > 0 ? cs.checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function balanceOfAt(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"VP::balanceOfAt: not yet determined\\\");\\n        \\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 nCheckpoints = cs.numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (cs.checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return cs.checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (cs.checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = cs.checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return cs.checkpoints[account][lower].votes;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of stake\\n     * @param voter The user that is staking tokens\\n     * @param token The token to stake\\n     * @param tokenAmount The amount of token to stake\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _stake(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        IERC20(token).safeTransferFrom(voter, address(this), tokenAmount);\\n\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount + tokenAmount;\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower + votingPower;\\n\\n        emit Staked(voter, token, tokenAmount, votingPower);\\n\\n        _increaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of withdraw\\n     * @param voter The user with tokens staked\\n     * @param token The token that is staked\\n     * @param tokenAmount The amount of token to withdraw\\n     * @param votingPower The amount of voting power stake translates into\\n     */\\n    function _withdraw(address voter, address token, uint256 tokenAmount, uint256 votingPower) internal {\\n        StakeStorage storage ss = VotingPowerStorage.stakeStorage();\\n        require(ss.stakes[voter][token].amount >= tokenAmount, \\\"VP::_withdraw: not enough tokens staked\\\");\\n        require(ss.stakes[voter][token].votingPower >= votingPower, \\\"VP::_withdraw: not enough voting power\\\");\\n        ss.stakes[voter][token].amount = ss.stakes[voter][token].amount - tokenAmount;\\n        ss.stakes[voter][token].votingPower = ss.stakes[voter][token].votingPower - votingPower;\\n        \\n        IERC20(token).safeTransfer(voter, tokenAmount);\\n\\n        emit Withdrawn(voter, token, tokenAmount, votingPower);\\n        \\n        _decreaseVotingPower(voter, votingPower);\\n    }\\n\\n    /**\\n     * @notice Increase voting power of voter\\n     * @param voter The voter whose voting power is increasing \\n     * @param amount The amount of voting power to increase by\\n     */\\n    function _increaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld + amount;\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Decrease voting power of voter\\n     * @param voter The voter whose voting power is decreasing \\n     * @param amount The amount of voting power to decrease by\\n     */\\n    function _decreaseVotingPower(address voter, uint256 amount) internal {\\n        CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n        uint32 checkpointNum = cs.numCheckpoints[voter];\\n        uint256 votingPowerOld = checkpointNum > 0 ? cs.checkpoints[voter][checkpointNum - 1].votes : 0;\\n        uint256 votingPowerNew = votingPowerOld - amount;\\n        _writeCheckpoint(voter, checkpointNum, votingPowerOld, votingPowerNew);\\n    }\\n\\n    /**\\n     * @notice Create checkpoint of voting power for voter at current block number\\n     * @param voter The voter whose voting power is changing\\n     * @param nCheckpoints The current checkpoint number for voter\\n     * @param oldVotes The previous voting power of this voter\\n     * @param newVotes The new voting power of this voter\\n     */\\n    function _writeCheckpoint(address voter, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\\n      uint32 blockNumber = _safe32(block.number, \\\"VP::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      CheckpointStorage storage cs = VotingPowerStorage.checkpointStorage();\\n      if (nCheckpoints > 0 && cs.checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber) {\\n          cs.checkpoints[voter][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          cs.checkpoints[voter][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          cs.numCheckpoints[voter] = nCheckpoints + 1;\\n      }\\n\\n      emit VotingPowerChanged(voter, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * @notice Converts uint256 to uint32 safely\\n     * @param n Number\\n     * @param errorMessage Error message to use if number cannot be converted\\n     * @return uint32 number\\n     */\\n    function _safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n}\",\"keccak256\":\"0x5a5bab96b46c9a6681a0958cd23a48e02b3019cdfb44d511176fc681ff1f65ff\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x331c8a62acf09ee42c2cbb64b9e3c0f3adf875e248c4dbe8ef65a330fb428deb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IERC20Mintable.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./IERC20TransferWithAuth.sol\\\";\\nimport \\\"./IERC20SafeAllowance.sol\\\";\\n\\ninterface IERC20Extended is \\n    IERC20Metadata, \\n    IERC20Mintable, \\n    IERC20Burnable, \\n    IERC20Permit,\\n    IERC20TransferWithAuth,\\n    IERC20SafeAllowance \\n{}\\n    \",\"keccak256\":\"0x9b5437c39db96679407d6e0d8cd8938099080c3c8e99bc262476b87f89bf4076\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9fc0f4254dc2a877f30b0c1f1fad8c41cd39ae320f365d8624baf62d719b2a5b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address dst, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x42ce215c0b937d3a69d9604c98398fd366d4b1dc283e9db98f48c547ed44c441\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xfb353702aea34a243a22fdf36ed4f3808a620620fb5ccb9ed0b4b50ce4973a6b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20SafeAllowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20SafeAllowance is IERC20 {\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\",\"keccak256\":\"0xd4ee7c57e3f59dd38a018d4c21b3966fe7b9c202172f27f15fbf6ac906f83ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20TransferWithAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20TransferWithAuth is IERC20 {\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x41d99a9df9aac91ac7c43aa05722a72a669439ca1e00c5ba9b45fd10fd2bedce\",\"license\":\"MIT\"},\"contracts/interfaces/IEdenToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Extended.sol\\\";\\n\\ninterface IEdenToken is IERC20Extended {\\n    function maxSupply() external view returns (uint256);\\n    function updateTokenMetadata(string memory tokenName, string memory tokenSymbol) external returns (bool);\\n    function metadataManager() external view returns (address);\\n    function setMetadataManager(address newMetadataManager) external returns (bool);\\n    event MetadataManagerChanged(address indexed oldManager, address indexed newManager);\\n    event TokenMetaUpdated(string indexed name, string indexed symbol);\\n}\",\"keccak256\":\"0xdbf15c8450f79ba394605b6e14a26455af6cf7850d2dc6e1316e6caeab5814be\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITokenRegistry {\\n    function owner() external view returns (address);\\n    function tokenFormulas(address) external view returns (address);\\n    function setTokenFormula(address token, address formula) external;\\n    function removeToken(address token) external;\\n    function changeOwner(address newOwner) external;\\n    event ChangedOwner(address indexed oldOwner, address indexed newOwner);\\n    event TokenAdded(address indexed token, address indexed formula);\\n    event TokenRemoved(address indexed token);\\n    event TokenFormulaUpdated(address indexed token, address indexed formula);\\n}\",\"keccak256\":\"0x8a3b047255ad9dbd425ee0e1aac612292e25b08d3651e73601e8923c4fd565c5\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    \\n    struct Lock {\\n        address token;\\n        address receiver;\\n        uint48 startTime;\\n        uint16 vestingDurationInDays;\\n        uint16 cliffDurationInDays;\\n        uint256 amount;\\n        uint256 amountClaimed;\\n        uint256 votingPower;\\n    }\\n\\n    struct LockBalance {\\n        uint256 id;\\n        uint256 claimableAmount;\\n        Lock lock;\\n    }\\n\\n    struct TokenBalance {\\n        uint256 totalAmount;\\n        uint256 claimableAmount;\\n        uint256 claimedAmount;\\n        uint256 votingPower;\\n    }\\n\\n    function lockTokens(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower) external;\\n    function lockTokensWithPermit(address token, address locker, address receiver, uint48 startTime, uint256 amount, uint16 lockDurationInDays, uint16 cliffDurationInDays, bool grantVotingPower, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function claimUnlockedTokenAmounts(uint256[] memory lockIds, uint256[] memory amounts) external;\\n    function claimAllUnlockedTokens(uint256[] memory lockIds) external;\\n    function tokenLocks(uint256 lockId) external view returns(Lock memory);\\n    function allActiveLockIds() external view returns(uint256[] memory);\\n    function allActiveLocks() external view returns(Lock[] memory);\\n    function allActiveLockBalances() external view returns(LockBalance[] memory);\\n    function activeLockIds(address receiver) external view returns(uint256[] memory);\\n    function allLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLocks(address receiver) external view returns(Lock[] memory);\\n    function activeLockBalances(address receiver) external view returns(LockBalance[] memory);\\n    function totalTokenBalance(address token) external view returns(TokenBalance memory balance);\\n    function tokenBalance(address token, address receiver) external view returns(TokenBalance memory balance);\\n    function lockBalance(uint256 lockId) external view returns (LockBalance memory);\\n    function claimableBalance(uint256 lockId) external view returns (uint256);\\n    function extendLock(uint256 lockId, uint16 vestingDaysToAdd, uint16 cliffDaysToAdd) external;\\n} \",\"keccak256\":\"0x4a5e251f4c6af63ea0c1832faa7deae2f2d2d673db9c76ca4aaa9024cb589169\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingPowerFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVotingPowerFormula {\\n    function convertTokensToVotingPower(uint256 amount) external view returns (uint256);\\n}\",\"keccak256\":\"0x12741c11d225526eeaa96b3735198300fc3cd6092fb88832ba835c35d68f5f09\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x2970a703e286952cbcd3e454e351e2b83f405223bf71139359a6f0831834160b\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xace7683eacbf9c09a73cb84f91f2b69906cc84d84681090d3139ea0a7bcb095f\",\"license\":\"MIT\"},\"contracts/lib/PrismProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PrismProxy {\\n\\n    /// @notice Proxy admin and implementation storage variables\\n    struct ProxyStorage {\\n        // Administrator for this contract\\n        address admin;\\n\\n        // Pending administrator for this contract\\n        address pendingAdmin;\\n\\n        // Active implementation of this contract\\n        address implementation;\\n\\n        // Pending implementation of this contract\\n        address pendingImplementation;\\n\\n        // Implementation version of this contract\\n        uint8 version;\\n    }\\n\\n    /// @dev Position in contract storage where prism ProxyStorage struct will be stored\\n    bytes32 constant PRISM_PROXY_STORAGE_POSITION = keccak256(\\\"prism.proxy.storage\\\");\\n\\n    /// @notice Emitted when pendingImplementation is changed\\n    event NewPendingImplementation(address indexed oldPendingImplementation, address indexed newPendingImplementation);\\n\\n    /// @notice Emitted when pendingImplementation is accepted, which means implementation is updated\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /// @notice Emitted when pendingAdmin is changed\\n    event NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\\n\\n    /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    event NewAdmin(address indexed oldAdmin, address indexed newAdmin);\\n\\n    /**\\n     * @notice Load proxy storage struct from specified PRISM_PROXY_STORAGE_POSITION\\n     * @return ps ProxyStorage struct\\n     */\\n    function proxyStorage() internal pure returns (ProxyStorage storage ps) {        \\n        bytes32 position = PRISM_PROXY_STORAGE_POSITION;\\n        assembly {\\n            ps.slot := position\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n    \\n    /**\\n     * @notice Create new pending implementation for prism. msg.sender must be admin\\n     * @dev Admin function for proposing new implementation contract\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyImplementation(address newPendingImplementation) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyImp: caller must be admin\\\");\\n\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation for prism. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyImplementation() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        require(msg.sender == s.pendingImplementation && s.pendingImplementation != address(0), \\\"Prism::acceptProxyImp: caller must be pending implementation\\\");\\n \\n        // Save current values for inclusion in log\\n        address oldImplementation = s.implementation;\\n        address oldPendingImplementation = s.pendingImplementation;\\n\\n        s.implementation = s.pendingImplementation;\\n\\n        s.pendingImplementation = address(0);\\n        s.version++;\\n\\n        emit NewImplementation(oldImplementation, s.implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, s.pendingImplementation);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return boolean indicating success of operation\\n     */\\n    function setPendingProxyAdmin(address newPendingAdmin) public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller = admin\\n        require(msg.sender == s.admin, \\\"Prism::setPendingProxyAdmin: caller must be admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        s.pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return boolean indicating success of operation\\n     */\\n    function acceptProxyAdmin() public returns (bool) {\\n        ProxyStorage storage s = proxyStorage();\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        require(msg.sender == s.pendingAdmin && msg.sender != address(0), \\\"Prism::acceptProxyAdmin: caller must be pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = s.admin;\\n        address oldPendingAdmin = s.pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        s.admin = s.pendingAdmin;\\n\\n        // Clear the pending value\\n        s.pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, s.admin);\\n        emit NewPendingAdmin(oldPendingAdmin, s.pendingAdmin);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get current admin for prism proxy\\n     * @return admin address\\n     */\\n    function proxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.admin;\\n    }\\n\\n    /**\\n     * @notice Get pending admin for prism proxy\\n     * @return admin address\\n     */\\n    function pendingProxyAdmin() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingAdmin;\\n    }\\n\\n    /**\\n     * @notice Address of implementation contract\\n     * @return implementation address\\n     */\\n    function proxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.implementation;\\n    }\\n\\n    /**\\n     * @notice Address of pending implementation contract\\n     * @return pending implementation address\\n     */\\n    function pendingProxyImplementation() public view returns (address) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.pendingImplementation;\\n    }\\n\\n    /**\\n     * @notice Current implementation version for proxy\\n     * @return version number\\n     */\\n    function proxyImplementationVersion() public view returns (uint8) {\\n        ProxyStorage storage s = proxyStorage();\\n        return s.version;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract.\\n     * @dev Returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function _forwardToImplementation() internal {\\n        ProxyStorage storage s = proxyStorage();\\n        // delegate all other functions to current implementation\\n        (bool success, ) = s.implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize()) }\\n              default { return(free_mem_ptr, returndatasize()) }\\n        }\\n    }\\n}\",\"keccak256\":\"0xb1402780eddcac8f334014689fda8be46a274344e4d1c8364c819a861a2a6f0e\",\"license\":\"MIT\"},\"contracts/lib/PrismProxyImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./PrismProxy.sol\\\";\\n\\ncontract PrismProxyImplementation is Initializable {\\n    /**\\n     * @notice Accept invitation to be implementation contract for proxy\\n     * @param prism Prism Proxy contract\\n     */\\n    function become(PrismProxy prism) public {\\n        require(msg.sender == prism.proxyAdmin(), \\\"Prism::become: only proxy admin can change implementation\\\");\\n        require(prism.acceptProxyImplementation() == true, \\\"Prism::become: change not authorized\\\");\\n    }\\n}\",\"keccak256\":\"0x2fd016eefc96b7a5f477eef1c6dde0924a1351f1f8db8893ccf7e88ab91e909a\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xf11b7e97e576da68fb88c7382a497c07164fdc1f552c41d9a0d1edf60e4292e3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x9e33e3e7cf29521693c0c74f531404f73119ffc525984f30dd2a8af3dcc13899\",\"license\":\"MIT\"},\"contracts/lib/VotingPowerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IEdenToken.sol\\\";\\r\\nimport \\\"../interfaces/IVault.sol\\\";\\r\\nimport \\\"../interfaces/ITokenRegistry.sol\\\";\\r\\n\\r\\n/// @notice App metadata storage\\r\\nstruct AppStorage {\\r\\n    // A record of states for signing / validating signatures\\r\\n    mapping (address => uint) nonces;\\r\\n\\r\\n    // Eden token\\r\\n    IEdenToken edenToken;\\r\\n\\r\\n    // Voting Power owner\\r\\n    address owner;\\r\\n    \\r\\n    // lockManager contract\\r\\n    address lockManager;\\r\\n\\r\\n    // Token registry contract\\r\\n    ITokenRegistry tokenRegistry;\\r\\n}\\r\\n\\r\\n/// @notice A checkpoint for marking number of votes from a given block\\r\\nstruct Checkpoint {\\r\\n    uint32 fromBlock;\\r\\n    uint256 votes;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to checkpoints\\r\\nstruct CheckpointStorage {\\r\\n     // A record of vote checkpoints for each account, by index\\r\\n    mapping (address => mapping (uint32 => Checkpoint)) checkpoints;\\r\\n\\r\\n    // The number of checkpoints for each account\\r\\n    mapping (address => uint32) numCheckpoints;\\r\\n}\\r\\n\\r\\n/// @notice The amount of a given token that has been staked, and the resulting voting power\\r\\nstruct Stake {\\r\\n    uint256 amount;\\r\\n    uint256 votingPower;\\r\\n}\\r\\n\\r\\n/// @notice All storage variables related to staking\\r\\nstruct StakeStorage {\\r\\n    // Official record of staked balances for each account > token > stake\\r\\n    mapping (address => mapping (address => Stake)) stakes;\\r\\n}\\r\\n\\r\\nlibrary VotingPowerStorage {\\r\\n    bytes32 constant VOTING_POWER_APP_STORAGE_POSITION = keccak256(\\\"voting.power.app.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_CHECKPOINT_STORAGE_POSITION = keccak256(\\\"voting.power.checkpoint.storage\\\");\\r\\n    bytes32 constant VOTING_POWER_STAKE_STORAGE_POSITION = keccak256(\\\"voting.power.stake.storage\\\");\\r\\n    \\r\\n    /**\\r\\n     * @notice Load app storage struct from specified VOTING_POWER_APP_STORAGE_POSITION\\r\\n     * @return app AppStorage struct\\r\\n     */\\r\\n    function appStorage() internal pure returns (AppStorage storage app) {        \\r\\n        bytes32 position = VOTING_POWER_APP_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            app.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load checkpoint storage struct from specified VOTING_POWER_CHECKPOINT_STORAGE_POSITION\\r\\n     * @return cs CheckpointStorage struct\\r\\n     */\\r\\n    function checkpointStorage() internal pure returns (CheckpointStorage storage cs) {        \\r\\n        bytes32 position = VOTING_POWER_CHECKPOINT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            cs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Load stake storage struct from specified VOTING_POWER_STAKE_STORAGE_POSITION\\r\\n     * @return ss StakeStorage struct\\r\\n     */\\r\\n    function stakeStorage() internal pure returns (StakeStorage storage ss) {        \\r\\n        bytes32 position = VOTING_POWER_STAKE_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ss.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd1db111c1ee83c8b134e8a2fec7a251cee316cfefe5cbe0888bd6291c45be35f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135c1806100206000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80639d23c4c7116100e3578063acca30a21161008c578063deedfdbd11610066578063deedfdbd146104f3578063ecd9ba8214610506578063f3fef3a31461051957600080fd5b8063acca30a214610490578063adc9772e146104cd578063c7c55d52146104e057600080fd5b8063a694fc3a116100bd578063a694fc3a14610457578063a6f9dae11461046a578063a83309a61461047d57600080fd5b80639d23c4c7146103ca578063a1194c8e14610407578063a5e51f0c1461041a57600080fd5b80634ee2cd7e1161014557806382dda22d1161011f57806382dda22d146102b65780638da5cb5b146103595780639cc7a367146103b757600080fd5b80634ee2cd7e146101f457806370a08231146102155780637741459e1461022857600080fd5b8063313ce56711610176578063313ce567146101ba57806335a5af92146101ce578063485cc955146101e157600080fd5b80630bae5b7c146101925780632e1a7d4d146101a7575b600080fd5b6101a56101a0366004613281565b61052c565b005b6101a56101b53660046132cf565b61070d565b604051601281526020015b60405180910390f35b6101a56101dc36600461320e565b610855565b6101a56101ef366004613248565b61097e565b610207610202366004613281565b610b31565b6040519081526020016101c5565b61020761022336600461320e565b610e57565b610207610236366004613248565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff80861682527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098835283822090851682528252828120835180850190945280548452600101549183019190915290519392505050565b61033e6102c4366004613248565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff94851681527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098825282812093909416845291825291829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101c5565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f225473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c5565b6101a56103c5366004613281565b610f28565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f245473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a561041536600461320e565b6110fb565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f215473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a56104653660046132cf565b611346565b6101a561047836600461320e565b6116aa565b61033e61048b36600461320e565b611906565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f235473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a56104db366004613281565b6119d6565b6102076104ee36600461320e565b611f13565b6101a561050136600461320e565b611f25565b6101a5610514366004613301565b61204e565b6101a5610527366004613281565b61238a565b6002600154141561059e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f56503a3a6164645650666f724c543a2063616e6e6f7420616464203020766f7460448201527f696e6720706f77657200000000000000000000000000000000000000000000006064820152608401610595565b600381015473ffffffffffffffffffffffffffffffffffffffff1633146106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f56503a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6167657260448201527f20636f6e747261637400000000000000000000000000000000000000000000006064820152608401610595565b6107048383612507565b50506001805550565b6002600154141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b6002600155806107e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56503a3a77697468647261773a2063616e6e6f742077697468647261772030006044820152606401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f21547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209061084d90339073ffffffffffffffffffffffffffffffffffffffff1684806125f7565b505060018055565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff163314610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b507f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff1680610997575060005460ff16155b610a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610595565b600054610100900460ff16158015610a6257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610a6a6128d9565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f21805473ffffffffffffffffffffffffffffffffffffffff8581167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f228054928516929091169190911790558015610b2c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6000438210610bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f56503a3a62616c616e63654f6641743a206e6f74207965742064657465726d6960448201527f6e656400000000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260409020547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19063ffffffff1680610c3f57600092505050610e51565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020839052604081208591610c71600185613488565b63ffffffff90811682526020820192909252604001600020541611610ce85773ffffffffffffffffffffffffffffffffffffffff8516600090815260208390526040812090610cc1600184613488565b63ffffffff1663ffffffff1681526020019081526020016000206001015492505050610e51565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832083805290915290205463ffffffff16841015610d2f57600092505050610e51565b600080610d3d600184613488565b90505b8163ffffffff168163ffffffff161115610e115760006002610d628484613488565b610d6c9190613411565b610d769083613488565b73ffffffffffffffffffffffffffffffffffffffff891660009081526020878152604080832063ffffffff8086168552908352928190208151808301909252805490931680825260019093015491810191909152919250881415610de557602001519550610e51945050505050565b805163ffffffff16881115610dfc57819350610e0a565b610e07600183613488565b92505b5050610d40565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526020938452604080822063ffffffff909316825291909352909120600101549150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19063ffffffff1680610ed0576000610f20565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208390526040812090610f01600184613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b949350505050565b60026001541415610f95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f56503a3a72656d6f76655650666f7255543a2063616e6e6f742072656d6f766560448201527f203020766f74696e6720706f77657200000000000000000000000000000000006064820152608401610595565b600381015473ffffffffffffffffffffffffffffffffffffffff1633146110f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f56503a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d616e6160448201527f67657220636f6e747261637400000000000000000000000000000000000000006064820152608401610595565b61070483836129f2565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611179919061322b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060448201527f63616e206368616e676520696d706c656d656e746174696f6e000000000000006064820152608401610595565b8073ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906132ad565b1515600114611343576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260448201527f697a6564000000000000000000000000000000000000000000000000000000006064820152608401610595565b50565b600260015414156113b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56503a3a7374616b653a2063616e6e6f74207374616b652030000000000000006044820152606401610595565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152839173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156114ab57600080fd5b505afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e391906132e8565b101561154b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e73000000006044820152606401610595565b60018101546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152839173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9060440160206040518083038186803b1580156115bc57600080fd5b505afa1580156115d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f491906132e8565b1015611682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260448201527f65666f7265207374616b696e67000000000000000000000000000000000000006064820152608401610595565b600181015461084d90339073ffffffffffffffffffffffffffffffffffffffff168480612acc565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff16331461176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b73ffffffffffffffffffffffffffffffffffffffff8216158015906117a7575073ffffffffffffffffffffffffffffffffffffffff82163014155b611833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f56503a3a6368616e67654f776e65723a206e6f742076616c696420616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22546040517f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209173ffffffffffffffffffffffffffffffffffffffff858116929116907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a360020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169290921790915550565b604080518082018252600080825260208083018290527f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f215484518086018652838152820183905273ffffffffffffffffffffffffffffffffffffffff80871684527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da0988352858420911683528152908390208351808501909452805484526001015490830152907f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f20905b9392505050565b60026001541415611a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001558181611ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56503a3a7374616b653a2063616e6e6f74207374616b652030000000000000006044820152606401610595565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015611b1757600080fd5b505afa158015611b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4f91906132e8565b1015611bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e73000000006044820152606401610595565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9060440160206040518083038186803b158015611c2457600080fd5b505afa158015611c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5c91906132e8565b1015611cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260448201527f65666f7265207374616b696e67000000000000000000000000000000000000006064820152608401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2454604080517fd419935f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291517f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2093600093169163d419935f916024808301926020929190829003018186803b158015611d9e57600080fd5b505afa158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd6919061322b565b905073ffffffffffffffffffffffffffffffffffffffff8116611e55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56503a3a7374616b653a20746f6b656e206e6f7420737570706f7274656400006044820152606401610595565b6040517fb69fb7f900000000000000000000000000000000000000000000000000000000815260048101859052819060009073ffffffffffffffffffffffffffffffffffffffff83169063b69fb7f99060240160206040518083038186803b158015611ec057600080fd5b505afa158015611ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef891906132e8565b9050611f0633888884612acc565b5050600180555050505050565b6000611f1e82611906565b5192915050565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff163314611fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b507f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600260015414156120bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001558461214d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f56503a3a7374616b65576974685065726d69743a2063616e6e6f74207374616b60448201527f65203000000000000000000000000000000000000000000000000000000000006064820152608401610595565b60007f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2060018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152919250879173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221891906132e8565b10156122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f56503a3a7374616b65576974685065726d69743a206e6f7420656e6f7567682060448201527f746f6b656e7300000000000000000000000000000000000000000000000000006064820152608401610595565b60018101546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561233e57600080fd5b505af1158015612352573d6000803e3d6000fd5b505050600182015461237e9150339073ffffffffffffffffffffffffffffffffffffffff168880612acc565b50506001805550505050565b600260015414156123f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b600260015580612463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56503a3a77697468647261773a2063616e6e6f742077697468647261772030006044820152606401610595565b604080518082018252600080825260209182018190523381527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098825282812073ffffffffffffffffffffffffffffffffffffffff8616825282528281208351808501909452805480855260019091015492840183905290916124e59085613434565b6124ef91906133fd565b90506124fd338585846125f7565b5050600180555050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19163ffffffff90911690816125835760006125d3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152602084905260408120906125b4600185613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b905060006125e185836133bd565b90506125ef86848484612c05565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff84811660009081527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098602081815260408084209488168452939052919020548311156126da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820746f6b656e7360448201527f207374616b6564000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602083815260408083209388168352929052206001015482111561279d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820766f74696e6760448201527f20706f77657200000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208381526040808320938816835292905220546127d9908490613471565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152602084815260408083209389168352929052209081556001015461281b908390613471565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020848152604080832093891680845293909152902060010191909155612860908685612e34565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2856040516128c091815260200190565b60405180910390a46128d285836129f2565b5050505050565b600054610100900460ff16806128f2575060005460ff16155b61297e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610595565b600054610100900460ff161580156129bd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60018055801561134357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19163ffffffff9091169081612a6e576000612abe565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208490526040812090612a9f600185613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b905060006125e18583613471565b612aee73ffffffffffffffffffffffffffffffffffffffff8416853085612f08565b73ffffffffffffffffffffffffffffffffffffffff84811660009081527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09860208181526040808420948816845293905291902054612b4d9084906133bd565b73ffffffffffffffffffffffffffffffffffffffff86811660009081526020848152604080832093891683529290522090815560010154612b8f9083906133bd565b73ffffffffffffffffffffffffffffffffffffffff868116600081815260208581526040808320948a1680845294825291829020600101949094555185815286937f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc910160405180910390a46128d28583612507565b6000612c294360405180606001604052806032815260200161355a60329139612f6c565b90507f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf163ffffffff851615801590612cb0575073ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812063ffffffff841691612c94600189613488565b63ffffffff908116825260208201929092526040016000205416145b15612d065773ffffffffffffffffffffffffffffffffffffffff861660009081526020829052604081208491612ce7600189613488565b63ffffffff168152602081019190915260400160002060010155612de7565b60408051808201825263ffffffff8481168252602080830187815273ffffffffffffffffffffffffffffffffffffffff8b1660009081528683528581208b85168252909252939020915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001691161781559051600191820155612d8c9086906133d5565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600183016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff929092169190911790555b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b2c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612fb6565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612f669085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e86565b50505050565b6000816401000000008410612fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595919061336c565b509192915050565b6000613018826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130c29092919063ffffffff16565b805190915015610b2c578080602001905181019061303691906132ad565b610b2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610595565b6060610f20848460008585843b613135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610595565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161315e9190613350565b60006040518083038185875af1925050503d806000811461319b576040519150601f19603f3d011682016040523d82523d6000602084013e6131a0565b606091505b50915091506131b08282866131bb565b979650505050505050565b606083156131ca5750816119cf565b8251156131da5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595919061336c565b60006020828403121561322057600080fd5b81356119cf81613537565b60006020828403121561323d57600080fd5b81516119cf81613537565b6000806040838503121561325b57600080fd5b823561326681613537565b9150602083013561327681613537565b809150509250929050565b6000806040838503121561329457600080fd5b823561329f81613537565b946020939093013593505050565b6000602082840312156132bf57600080fd5b815180151581146119cf57600080fd5b6000602082840312156132e157600080fd5b5035919050565b6000602082840312156132fa57600080fd5b5051919050565b600080600080600060a0868803121561331957600080fd5b8535945060208601359350604086013560ff8116811461333857600080fd5b94979396509394606081013594506080013592915050565b600082516133628184602087016134ad565b9190910192915050565b602081526000825180602084015261338b8160408501602087016134ad565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156133d0576133d06134d9565b500190565b600063ffffffff8083168185168083038211156133f4576133f46134d9565b01949350505050565b60008261340c5761340c613508565b500490565b600063ffffffff8084168061342857613428613508565b92169190910492915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561346c5761346c6134d9565b500290565b600082821015613483576134836134d9565b500390565b600063ffffffff838116908316818110156134a5576134a56134d9565b039392505050565b60005b838110156134c85781810151838201526020016134b0565b83811115612f665750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461134357600080fdfe56503a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a2646970667358221220742e08675ea4d9681a9a54c7fb5fa554d1f3f83b1412db857e5b05e36a41fa9264736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80639d23c4c7116100e3578063acca30a21161008c578063deedfdbd11610066578063deedfdbd146104f3578063ecd9ba8214610506578063f3fef3a31461051957600080fd5b8063acca30a214610490578063adc9772e146104cd578063c7c55d52146104e057600080fd5b8063a694fc3a116100bd578063a694fc3a14610457578063a6f9dae11461046a578063a83309a61461047d57600080fd5b80639d23c4c7146103ca578063a1194c8e14610407578063a5e51f0c1461041a57600080fd5b80634ee2cd7e1161014557806382dda22d1161011f57806382dda22d146102b65780638da5cb5b146103595780639cc7a367146103b757600080fd5b80634ee2cd7e146101f457806370a08231146102155780637741459e1461022857600080fd5b8063313ce56711610176578063313ce567146101ba57806335a5af92146101ce578063485cc955146101e157600080fd5b80630bae5b7c146101925780632e1a7d4d146101a7575b600080fd5b6101a56101a0366004613281565b61052c565b005b6101a56101b53660046132cf565b61070d565b604051601281526020015b60405180910390f35b6101a56101dc36600461320e565b610855565b6101a56101ef366004613248565b61097e565b610207610202366004613281565b610b31565b6040519081526020016101c5565b61020761022336600461320e565b610e57565b610207610236366004613248565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff80861682527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098835283822090851682528252828120835180850190945280548452600101549183019190915290519392505050565b61033e6102c4366004613248565b6040805180820182526000808252602091820181905273ffffffffffffffffffffffffffffffffffffffff94851681527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098825282812093909416845291825291829020825180840190935280548352600101549082015290565b604080518251815260209283015192810192909252016101c5565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f225473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c5565b6101a56103c5366004613281565b610f28565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f245473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a561041536600461320e565b6110fb565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f215473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a56104653660046132cf565b611346565b6101a561047836600461320e565b6116aa565b61033e61048b36600461320e565b611906565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f235473ffffffffffffffffffffffffffffffffffffffff16610392565b6101a56104db366004613281565b6119d6565b6102076104ee36600461320e565b611f13565b6101a561050136600461320e565b611f25565b6101a5610514366004613301565b61204e565b6101a5610527366004613281565b61238a565b6002600154141561059e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081610651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f56503a3a6164645650666f724c543a2063616e6e6f7420616464203020766f7460448201527f696e6720706f77657200000000000000000000000000000000000000000000006064820152608401610595565b600381015473ffffffffffffffffffffffffffffffffffffffff1633146106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f56503a3a6164645650666f724c543a206f6e6c79206c6f636b4d616e6167657260448201527f20636f6e747261637400000000000000000000000000000000000000000000006064820152608401610595565b6107048383612507565b50506001805550565b6002600154141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b6002600155806107e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56503a3a77697468647261773a2063616e6e6f742077697468647261772030006044820152606401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f21547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209061084d90339073ffffffffffffffffffffffffffffffffffffffff1684806125f7565b505060018055565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff163314610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b507f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600054610100900460ff1680610997575060005460ff16155b610a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610595565b600054610100900460ff16158015610a6257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610a6a6128d9565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f21805473ffffffffffffffffffffffffffffffffffffffff8581167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f228054928516929091169190911790558015610b2c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6000438210610bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f56503a3a62616c616e63654f6641743a206e6f74207965742064657465726d6960448201527f6e656400000000000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260409020547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19063ffffffff1680610c3f57600092505050610e51565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020839052604081208591610c71600185613488565b63ffffffff90811682526020820192909252604001600020541611610ce85773ffffffffffffffffffffffffffffffffffffffff8516600090815260208390526040812090610cc1600184613488565b63ffffffff1663ffffffff1681526020019081526020016000206001015492505050610e51565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020838152604080832083805290915290205463ffffffff16841015610d2f57600092505050610e51565b600080610d3d600184613488565b90505b8163ffffffff168163ffffffff161115610e115760006002610d628484613488565b610d6c9190613411565b610d769083613488565b73ffffffffffffffffffffffffffffffffffffffff891660009081526020878152604080832063ffffffff8086168552908352928190208151808301909252805490931680825260019093015491810191909152919250881415610de557602001519550610e51945050505050565b805163ffffffff16881115610dfc57819350610e0a565b610e07600183613488565b92505b5050610d40565b5073ffffffffffffffffffffffffffffffffffffffff861660009081526020938452604080822063ffffffff909316825291909352909120600101549150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19063ffffffff1680610ed0576000610f20565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208390526040812090610f01600184613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b949350505050565b60026001541415610f95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f56503a3a72656d6f76655650666f7255543a2063616e6e6f742072656d6f766560448201527f203020766f74696e6720706f77657200000000000000000000000000000000006064820152608401610595565b600381015473ffffffffffffffffffffffffffffffffffffffff1633146110f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f56503a3a72656d6f76655650666f7255543a206f6e6c79206c6f636b4d616e6160448201527f67657220636f6e747261637400000000000000000000000000000000000000006064820152608401610595565b61070483836129f2565b8073ffffffffffffffffffffffffffffffffffffffff16633e47158c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561114157600080fd5b505afa158015611155573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611179919061322b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f507269736d3a3a6265636f6d653a206f6e6c792070726f78792061646d696e2060448201527f63616e206368616e676520696d706c656d656e746174696f6e000000000000006064820152608401610595565b8073ffffffffffffffffffffffffffffffffffffffff166394d8fbd06040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561127b57600080fd5b505af115801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b391906132ad565b1515600114611343576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f507269736d3a3a6265636f6d653a206368616e6765206e6f7420617574686f7260448201527f697a6564000000000000000000000000000000000000000000000000000000006064820152608401610595565b50565b600260015414156113b3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001557f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2081611440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56503a3a7374616b653a2063616e6e6f74207374616b652030000000000000006044820152606401610595565b60018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152839173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b1580156114ab57600080fd5b505afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e391906132e8565b101561154b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e73000000006044820152606401610595565b60018101546040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152839173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9060440160206040518083038186803b1580156115bc57600080fd5b505afa1580156115d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f491906132e8565b1015611682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260448201527f65666f7265207374616b696e67000000000000000000000000000000000000006064820152608401610595565b600181015461084d90339073ffffffffffffffffffffffffffffffffffffffff168480612acc565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff16331461176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b73ffffffffffffffffffffffffffffffffffffffff8216158015906117a7575073ffffffffffffffffffffffffffffffffffffffff82163014155b611833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f56503a3a6368616e67654f776e65723a206e6f742076616c696420616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22546040517f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209173ffffffffffffffffffffffffffffffffffffffff858116929116907f2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e90600090a360020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff939093169290921790915550565b604080518082018252600080825260208083018290527f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f215484518086018652838152820183905273ffffffffffffffffffffffffffffffffffffffff80871684527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da0988352858420911683528152908390208351808501909452805484526001015490830152907f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f20905b9392505050565b60026001541415611a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001558181611ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56503a3a7374616b653a2063616e6e6f74207374616b652030000000000000006044820152606401610595565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152829073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015611b1757600080fd5b505afa158015611b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4f91906132e8565b1015611bb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f56503a3a7374616b653a206e6f7420656e6f75676820746f6b656e73000000006044820152606401610595565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152829073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9060440160206040518083038186803b158015611c2457600080fd5b505afa158015611c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5c91906132e8565b1015611cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f56503a3a7374616b653a206d75737420617070726f766520746f6b656e73206260448201527f65666f7265207374616b696e67000000000000000000000000000000000000006064820152608401610595565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2454604080517fd419935f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291517f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2093600093169163d419935f916024808301926020929190829003018186803b158015611d9e57600080fd5b505afa158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd6919061322b565b905073ffffffffffffffffffffffffffffffffffffffff8116611e55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f56503a3a7374616b653a20746f6b656e206e6f7420737570706f7274656400006044820152606401610595565b6040517fb69fb7f900000000000000000000000000000000000000000000000000000000815260048101859052819060009073ffffffffffffffffffffffffffffffffffffffff83169063b69fb7f99060240160206040518083038186803b158015611ec057600080fd5b505afa158015611ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef891906132e8565b9050611f0633888884612acc565b5050600180555050505050565b6000611f1e82611906565b5192915050565b7f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f22547f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f209073ffffffffffffffffffffffffffffffffffffffff163314611fe7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152606401610595565b507f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600260015414156120bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b60026001558461214d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f56503a3a7374616b65576974685065726d69743a2063616e6e6f74207374616b60448201527f65203000000000000000000000000000000000000000000000000000000000006064820152608401610595565b60007f6d6a6fc321e0562f469846e9b1d74d90faeed9d71336854ad7fe2be150ff9f2060018101546040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152919250879173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b1580156121e057600080fd5b505afa1580156121f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221891906132e8565b10156122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f56503a3a7374616b65576974685065726d69743a206e6f7420656e6f7567682060448201527f746f6b656e7300000000000000000000000000000000000000000000000000006064820152608401610595565b60018101546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561233e57600080fd5b505af1158015612352573d6000803e3d6000fd5b505050600182015461237e9150339073ffffffffffffffffffffffffffffffffffffffff168880612acc565b50506001805550505050565b600260015414156123f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610595565b600260015580612463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56503a3a77697468647261773a2063616e6e6f742077697468647261772030006044820152606401610595565b604080518082018252600080825260209182018190523381527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098825282812073ffffffffffffffffffffffffffffffffffffffff8616825282528281208351808501909452805480855260019091015492840183905290916124e59085613434565b6124ef91906133fd565b90506124fd338585846125f7565b5050600180555050565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19163ffffffff90911690816125835760006125d3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152602084905260408120906125b4600185613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b905060006125e185836133bd565b90506125ef86848484612c05565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff84811660009081527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da098602081815260408084209488168452939052919020548311156126da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820746f6b656e7360448201527f207374616b6564000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152602083815260408083209388168352929052206001015482111561279d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f56503a3a5f77697468647261773a206e6f7420656e6f75676820766f74696e6760448201527f20706f77657200000000000000000000000000000000000000000000000000006064820152608401610595565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260208381526040808320938816835292905220546127d9908490613471565b73ffffffffffffffffffffffffffffffffffffffff8681166000908152602084815260408083209389168352929052209081556001015461281b908390613471565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526020848152604080832093891680845293909152902060010191909155612860908685612e34565b828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2856040516128c091815260200190565b60405180910390a46128d285836129f2565b5050505050565b600054610100900460ff16806128f2575060005460ff16155b61297e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610595565b600054610100900460ff161580156129bd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b60018055801561134357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b73ffffffffffffffffffffffffffffffffffffffff821660009081527f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf260205260408120547f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf19163ffffffff9091169081612a6e576000612abe565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208490526040812090612a9f600185613488565b63ffffffff1663ffffffff168152602001908152602001600020600101545b905060006125e18583613471565b612aee73ffffffffffffffffffffffffffffffffffffffff8416853085612f08565b73ffffffffffffffffffffffffffffffffffffffff84811660009081527fb436861a9ea50c2256cd6ef2eb5e3092874d3eddb554844f2d197b6df51da09860208181526040808420948816845293905291902054612b4d9084906133bd565b73ffffffffffffffffffffffffffffffffffffffff86811660009081526020848152604080832093891683529290522090815560010154612b8f9083906133bd565b73ffffffffffffffffffffffffffffffffffffffff868116600081815260208581526040808320948a1680845294825291829020600101949094555185815286937f6c86f3fd5118b3aa8bb4f389a617046de0a3d3d477de1a1673d227f802f616dc910160405180910390a46128d28583612507565b6000612c294360405180606001604052806032815260200161355a60329139612f6c565b90507f97ada73c2617b57999fe0c39e0cd251038e142d18fa592f9135b3c4884c92cf163ffffffff851615801590612cb0575073ffffffffffffffffffffffffffffffffffffffff8616600090815260208290526040812063ffffffff841691612c94600189613488565b63ffffffff908116825260208201929092526040016000205416145b15612d065773ffffffffffffffffffffffffffffffffffffffff861660009081526020829052604081208491612ce7600189613488565b63ffffffff168152602081019190915260400160002060010155612de7565b60408051808201825263ffffffff8481168252602080830187815273ffffffffffffffffffffffffffffffffffffffff8b1660009081528683528581208b85168252909252939020915182547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001691161781559051600191820155612d8c9086906133d5565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600183016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff929092169190911790555b82848773ffffffffffffffffffffffffffffffffffffffff167f53ed7954de66613e30dd29b46ab783aa594e6309d021d8854c76bb3325d03aa360405160405180910390a4505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b2c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612fb6565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612f669085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612e86565b50505050565b6000816401000000008410612fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595919061336c565b509192915050565b6000613018826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130c29092919063ffffffff16565b805190915015610b2c578080602001905181019061303691906132ad565b610b2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610595565b6060610f20848460008585843b613135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610595565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161315e9190613350565b60006040518083038185875af1925050503d806000811461319b576040519150601f19603f3d011682016040523d82523d6000602084013e6131a0565b606091505b50915091506131b08282866131bb565b979650505050505050565b606083156131ca5750816119cf565b8251156131da5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610595919061336c565b60006020828403121561322057600080fd5b81356119cf81613537565b60006020828403121561323d57600080fd5b81516119cf81613537565b6000806040838503121561325b57600080fd5b823561326681613537565b9150602083013561327681613537565b809150509250929050565b6000806040838503121561329457600080fd5b823561329f81613537565b946020939093013593505050565b6000602082840312156132bf57600080fd5b815180151581146119cf57600080fd5b6000602082840312156132e157600080fd5b5035919050565b6000602082840312156132fa57600080fd5b5051919050565b600080600080600060a0868803121561331957600080fd5b8535945060208601359350604086013560ff8116811461333857600080fd5b94979396509394606081013594506080013592915050565b600082516133628184602087016134ad565b9190910192915050565b602081526000825180602084015261338b8160408501602087016134ad565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156133d0576133d06134d9565b500190565b600063ffffffff8083168185168083038211156133f4576133f46134d9565b01949350505050565b60008261340c5761340c613508565b500490565b600063ffffffff8084168061342857613428613508565b92169190910492915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561346c5761346c6134d9565b500290565b600082821015613483576134836134d9565b500390565b600063ffffffff838116908316818110156134a5576134a56134d9565b039392505050565b60005b838110156134c85781810151838201526020016134b0565b83811115612f665750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461134357600080fdfe56503a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473a2646970667358221220742e08675ea4d9681a9a54c7fb5fa554d1f3f83b1412db857e5b05e36a41fa9264736f6c63430008060033",
  "devdoc": {
    "details": "Implementation contract for voting power prism proxy Calls should not be made directly to this contract, instead make calls to the VotingPowerPrism proxy contract The exception to this is the `become` function specified in PrismProxyImplementation  This function is called once and is used by this contract to accept its role as the implementation for the prism proxy",
    "kind": "dev",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "params": {
          "account": "The recipient of voting power",
          "amount": "The amount of voting power to add"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "become(address)": {
        "params": {
          "prism": "Prism Proxy contract"
        }
      },
      "changeOwner(address)": {
        "params": {
          "newOwner": "New owner address"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "decimals"
        }
      },
      "edenToken()": {
        "returns": {
          "_0": "Address of EDEN token"
        }
      },
      "getAmountStaked(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total amount staked"
        }
      },
      "getEDENAmountStaked(address)": {
        "params": {
          "staker": "The user with staked EDEN"
        },
        "returns": {
          "_0": "total EDEN amount staked"
        }
      },
      "getEDENStake(address)": {
        "params": {
          "staker": "The user with staked EDEN"
        },
        "returns": {
          "_0": "total EDEN staked"
        }
      },
      "getStake(address,address)": {
        "params": {
          "stakedToken": "The staked token",
          "staker": "The user with staked tokens"
        },
        "returns": {
          "_0": "total staked"
        }
      },
      "initialize(address,address)": {
        "details": "Should be called via VotingPowerPrism before calling anything else",
        "params": {
          "_edenToken": "address of EDEN token"
        }
      },
      "lockManager()": {
        "returns": {
          "_0": "Address of lockManager"
        }
      },
      "owner()": {
        "returns": {
          "_0": "Address of owner"
        }
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "params": {
          "account": "The account with voting power",
          "amount": "The amount of voting power to remove"
        }
      },
      "setLockManager(address)": {
        "params": {
          "newLockManager": "Address of lockManager"
        }
      },
      "setTokenRegistry(address)": {
        "params": {
          "registry": "Address of token registry"
        }
      },
      "stake(address,uint256)": {
        "params": {
          "amount": "The amount to stake",
          "token": "The token to stake"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "The amount to stake"
        }
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "tokenRegistry()": {
        "returns": {
          "_0": "Address of token registry"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount to withdraw",
          "token": "The token to withdraw"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "The amount to withdraw"
        }
      }
    },
    "title": "VotingPower",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ChangedOwner(address,address)": {
        "notice": "Event emitted when the owner of the voting power contract is updated"
      },
      "Staked(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance increases"
      },
      "VotingPowerChanged(address,uint256,uint256)": {
        "notice": "An event that's emitted when an account's vote balance changes"
      },
      "Withdrawn(address,address,uint256,uint256)": {
        "notice": "An event that's emitted when a user's staked balance decreases"
      }
    },
    "kind": "user",
    "methods": {
      "addVotingPowerForLockedTokens(address,uint256)": {
        "notice": "Count locked tokens toward voting power for `account`"
      },
      "balanceOf(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "become(address)": {
        "notice": "Accept invitation to be implementation contract for proxy"
      },
      "changeOwner(address)": {
        "notice": "Change owner of vesting contract"
      },
      "decimals()": {
        "notice": "Decimals used for voting power"
      },
      "edenToken()": {
        "notice": "Address of EDEN token"
      },
      "getAmountStaked(address,address)": {
        "notice": "Get total amount of tokens staked in contract by `staker`"
      },
      "getEDENAmountStaked(address)": {
        "notice": "Get total amount of EDEN tokens staked in contract by `staker`"
      },
      "getEDENStake(address)": {
        "notice": "Get staked amount and voting power from EDEN tokens staked in contract by `staker`"
      },
      "getStake(address,address)": {
        "notice": "Get total staked amount and voting power from `stakedToken` staked in contract by `staker`"
      },
      "initialize(address,address)": {
        "notice": "Initialize VotingPower contract"
      },
      "lockManager()": {
        "notice": "Address of lockManager"
      },
      "owner()": {
        "notice": "Address of owner"
      },
      "removeVotingPowerForUnlockedTokens(address,uint256)": {
        "notice": "Remove unlocked tokens from voting power for `account`"
      },
      "setLockManager(address)": {
        "notice": "Sets lockManager address"
      },
      "setTokenRegistry(address)": {
        "notice": "Sets token registry address"
      },
      "stake(address,uint256)": {
        "notice": "Stake LP tokens to unlock voting power for `msg.sender`"
      },
      "stake(uint256)": {
        "notice": "Stake EDEN tokens to unlock voting power for `msg.sender`"
      },
      "stakeWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake EDEN tokens using offchain approvals to unlock voting power"
      },
      "tokenRegistry()": {
        "notice": "Address of token registry"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw staked LP tokens, removing voting power for `msg.sender`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked EDEN tokens, removing voting power for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13091,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13094,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13734,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13777,
        "contract": "contracts/VotingPower.sol:VotingPower",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}