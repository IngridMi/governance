{
  "address": "0x4F988f333D1ea6AdBA2a16077E61fddC697f66F6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newBidAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "oldBidAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "taxNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "taxDenominator",
          "type": "uint16"
        }
      ],
      "name": "SlotClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "SlotCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDelegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDelegate",
          "type": "address"
        }
      ],
      "name": "SlotDelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newDenominator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldDenominator",
          "type": "uint16"
        }
      ],
      "name": "TaxRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_BID",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "bid",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "claimSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "bid",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "claimSlotWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_taxNumerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_taxDenominator",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setSlotDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "numerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "denominator",
          "type": "uint16"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "balance",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "slotBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "taxNumerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "taxDenominator",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "periodStart",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "bidAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotCost",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "slotExpiration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotForeclosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxDenominator",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxNumerator",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffa2fd13c38d6912dd2541bd0845f0a69a130223f0b2bdd8b429ce596d9d23fa",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0x4F988f333D1ea6AdBA2a16077E61fddC697f66F6",
    "transactionIndex": 0,
    "gasUsed": "2101831",
    "logsBloom": "0x
    "blockHash": "0x4f41ae0d6296811709177bee07d6eb3d03b55caf246c54836145404e47d4cdac",
    "transactionHash": "0xffa2fd13c38d6912dd2541bd0845f0a69a130223f0b2bdd8b429ce596d9d23fa",
    "logs": [],
    "blockNumber": 10692477,
    "cumulativeGasUsed": "2101831",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c2047ea3ebd11a71bd1ec286aad6032e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newBidAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldBidAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"taxNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"taxDenominator\",\"type\":\"uint16\"}],\"name\":\"SlotClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"SlotCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"}],\"name\":\"SlotDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newDenominator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldDenominator\",\"type\":\"uint16\"}],\"name\":\"TaxRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BID\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"bid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"claimSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"bid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimSlotWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_taxNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_taxDenominator\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setSlotDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"denominator\",\"type\":\"uint16\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"slotBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"taxNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"taxDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"periodStart\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotCost\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"slotExpiration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotForeclosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxDenominator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxNumerator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.   Be especially careful when importing any external contracts/libraries. If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SlotMarket\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SlotMarket.sol\":\"SlotMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/SlotMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./lib/Initializable.sol\\\";\\n\\n/**\\n * @title SlotMarket\\n * @dev It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.  \\n * Be especially careful when importing any external contracts/libraries.\\n * If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!\\n */\\ncontract SlotMarket is Initializable {\\n    struct Bid {\\n        address bidder;\\n        uint16 taxNumerator;\\n        uint16 taxDenominator;\\n        uint64 periodStart;\\n        uint128 bidAmount;\\n    }\\n\\n    mapping (uint8 => uint64) public slotExpiration;\\n    mapping (uint8 => address) private _slotDelegate;\\n    mapping (uint8 => address) private _slotOwner;\\n    mapping (uint8 => Bid) public slotBid;\\n    mapping (address => uint128) public stakedBalance;\\n\\n    IERC20Extended public token;\\n    address public admin;\\n    uint16 public taxNumerator;\\n    uint16 public taxDenominator;\\n    uint128 public MIN_BID;\\n\\n    uint256 private _NOT_ENTERED;\\n    uint256 private _ENTERED;\\n    uint256 private _status;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlySlotOwner(uint8 slot) {\\n        require(msg.sender == slotOwner(slot), \\\"not slot owner\\\");\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    event AdminUpdated(address indexed newAdmin, address indexed oldAdmin);\\n    event TaxRateUpdated(uint16 newNumerator, uint16 newDenominator, uint16 oldNumerator, uint16 oldDenominator);\\n    event SlotClaimed(uint8 indexed slot, address indexed owner, address indexed delegate, uint128 newBidAmount, uint128 oldBidAmount, uint16 taxNumerator, uint16 taxDenominator);\\n    event SlotDelegateUpdated(uint8 indexed slot, address indexed owner, address indexed newDelegate, address oldDelegate);\\n    event Stake(address indexed claimer, uint256 stakeAmount);\\n    event Unstake(address indexed staker, uint256 unstakedAmount);\\n    event SlotCleared(uint8 indexed slot);\\n\\n    function initialize(\\n        IERC20Extended _token,\\n        address _admin,\\n        uint16 _taxNumerator,\\n        uint16 _taxDenominator\\n    ) public initializer {\\n        token = _token;\\n        admin = _admin;\\n        emit AdminUpdated(_admin, address(0));\\n\\n        taxNumerator = _taxNumerator;\\n        taxDenominator = _taxDenominator;\\n        emit TaxRateUpdated(_taxNumerator, _taxDenominator, 0, 0);\\n\\n        MIN_BID = 10000000000000000;\\n        _NOT_ENTERED = 1;\\n        _ENTERED = 2;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    function slotOwner(uint8 slot) public view returns (address) {\\n        if(slotForeclosed(slot)) {\\n            return address(0);\\n        }\\n        return _slotOwner[slot];\\n    }\\n\\n    function slotDelegate(uint8 slot) public view returns (address) {\\n        if(slotForeclosed(slot)) {\\n            return address(0);\\n        }\\n        return _slotDelegate[slot];\\n    }\\n\\n    function slotCost(uint8 slot) external view returns (uint128) {\\n        if(slotForeclosed(slot)) {\\n            return MIN_BID;\\n        }\\n\\n        Bid memory currentBid = slotBid[slot];\\n        return currentBid.bidAmount * 110 / 100;\\n    }\\n\\n    function claimSlot(\\n        uint8 slot, \\n        uint128 bid, \\n        address delegate\\n    ) external nonReentrant {\\n        _claimSlot(slot, bid, delegate);\\n    }\\n\\n    function claimSlotWithPermit(\\n        uint8 slot, \\n        uint128 bid, \\n        address delegate, \\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        token.permit(msg.sender, address(this), bid, deadline, v, r, s);\\n        _claimSlot(slot, bid, delegate);\\n    }\\n\\n    function slotBalance(uint8 slot) public view returns (uint128 balance) {\\n        Bid memory currentBid = slotBid[slot];\\n        if (currentBid.bidAmount == 0 || slotForeclosed(slot)) {\\n            return 0;\\n        } else if (block.timestamp == currentBid.periodStart) {\\n            return currentBid.bidAmount;\\n        } else {\\n            return uint128(uint256(currentBid.bidAmount) - (uint256(currentBid.bidAmount) * (block.timestamp - currentBid.periodStart) * currentBid.taxNumerator / (uint256(currentBid.taxDenominator) * 86400)));\\n        }\\n    }\\n\\n    function slotForeclosed(uint8 slot) public view returns (bool) {\\n        if(slotExpiration[slot] <= block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function stake(uint128 amount) external nonReentrant {\\n        _stake(amount);\\n    }\\n\\n    function stakeWithPermit(\\n        uint128 amount, \\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _stake(amount);\\n    }\\n\\n    function unstake(uint128 amount) external nonReentrant {\\n        require(stakedBalance[msg.sender] >= amount, \\\"amount > unlocked balance\\\");\\n        stakedBalance[msg.sender] -= amount;\\n        token.transfer(msg.sender, amount);\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    function setSlotDelegate(uint8 slot, address delegate) external onlySlotOwner(slot) {\\n        require(delegate != address(0), \\\"cannot delegate to 0 address\\\");\\n        emit SlotDelegateUpdated(slot, msg.sender, delegate, slotDelegate(slot));\\n        _slotDelegate[slot] = delegate;\\n    }\\n\\n    function setTaxRate(uint16 numerator, uint16 denominator) external onlyAdmin {\\n        require(denominator > numerator, \\\"denominator must be > numerator\\\");\\n        emit TaxRateUpdated(numerator, denominator, taxNumerator, taxDenominator);\\n        taxNumerator = numerator;\\n        taxDenominator = denominator;\\n    }\\n\\n    function setAdmin(address newAdmin) external onlyAdmin {\\n        emit AdminUpdated(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    function _claimSlot(uint8 slot, uint128 bid, address delegate) internal {\\n        require(delegate != address(0), \\\"cannot delegate to 0 address\\\");\\n        Bid storage currentBid = slotBid[slot];\\n        uint128 existingBidAmount = currentBid.bidAmount;\\n        uint128 existingSlotBalance = slotBalance(slot);\\n        uint128 taxedBalance = existingBidAmount - existingSlotBalance;\\n        require((existingSlotBalance == 0 && bid >= MIN_BID) || bid >= existingBidAmount * 110 / 100, \\\"bid too small\\\");\\n\\n        uint128 bidderStakedBalance = stakedBalance[msg.sender];\\n        uint128 bidIncrement = currentBid.bidder == msg.sender ? bid - existingSlotBalance : bid;\\n        if (bidderStakedBalance > 0) {\\n            if (bidderStakedBalance >= bidIncrement) {\\n                stakedBalance[msg.sender] -= bidIncrement;\\n            } else {\\n                stakedBalance[msg.sender] = 0;\\n                token.transferFrom(msg.sender, address(this), bidIncrement - bidderStakedBalance);\\n            }\\n        } else {\\n            token.transferFrom(msg.sender, address(this), bidIncrement);\\n        }\\n\\n        if (currentBid.bidder != msg.sender) {\\n            stakedBalance[currentBid.bidder] += existingSlotBalance;\\n        }\\n        \\n        if (taxedBalance > 0) {\\n            token.burn(taxedBalance);\\n        }\\n\\n        _slotOwner[slot] = msg.sender;\\n        _slotDelegate[slot] = delegate;\\n\\n        currentBid.bidder = msg.sender;\\n        currentBid.periodStart = uint64(block.timestamp);\\n        currentBid.bidAmount = bid;\\n        currentBid.taxNumerator = taxNumerator;\\n        currentBid.taxDenominator = taxDenominator;\\n\\n        slotExpiration[slot] = uint64(block.timestamp + uint256(taxDenominator) * 86400 / uint256(taxNumerator));\\n\\n        emit SlotClaimed(slot, msg.sender, delegate, bid, existingBidAmount, taxNumerator, taxDenominator);\\n    }\\n\\n    function _stake(uint128 amount) internal {\\n        token.transferFrom(msg.sender, address(this), amount);\\n        stakedBalance[msg.sender] += amount;\\n        emit Stake(msg.sender, amount);\\n    }\\n\\n}\",\"keccak256\":\"0x770fb81302539387513aebd2882e59be96f3039fa64e5404db0ef6a5ba1237a7\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Metadata.sol\\\";\\n\\ninterface IERC20Extended is IERC20Metadata {\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function nonces(address) external view returns (uint);\\n    function mint(address dst, uint256 amount) external returns (bool);\\n    function burn(uint256 amount) external returns (bool);\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x617e48a2da4fe422fdecbcc3090058e3404314fe0ce2123e6393cb0dc7d4e6c5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xb63c77a8047f65f823e21c5963e2305ded0691eb80101cdf533c91e84acaafdb\",\"license\":\"MIT\"},\"contracts/lib/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xbf8dc250aa07ec2837ce70f902e3964a22b749a26160e39865f85f659dc48b66\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc445e701fc984ebd4faf7aa82e40cd0068f5893a31c1557ca86c74fec69f1e8e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061255c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c8063bfb099b6116100d8578063dcf533791161008c578063f851a44011610066578063f851a440146104e5578063fba9578b14610505578063fc0c546a1461051857610182565b8063dcf53379146103a7578063df442678146103ba578063f45afb9f146103cd57610182565b8063cb418116116100bd578063cb41811614610365578063ce69cd2014610378578063dc4fb6f11461039457610182565b8063bfb099b61461030f578063c69b6fa61461032257610182565b806388fe2be81161013a578063b971235411610114578063b9712354146102a1578063baa9bb23146102b4578063bbb0d596146102d757610182565b806388fe2be81461022d5780639631af0b14610240578063b361b2b51461027957610182565b8063458a1d6e1161016b578063458a1d6e146101d357806360217267146101e8578063704b6c021461021a57610182565b8063050354091461018757806308972073146101c0575b600080fd5b61019a61019536600461224f565b610538565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61019a6101ce36600461224f565b6106dc565b6101e66101e13660046121b6565b6107ea565b005b61019a6101f636600461211c565b6005602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6101e661022836600461211c565b610a46565b6101e661023b3660046121b6565b610b56565b6007546102669074010000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101b7565b60075461026690760100000000000000000000000000000000000000000000900461ffff1681565b6101e66102af36600461229f565b610bdc565b6102c76102c236600461224f565b610c66565b60405190151581526020016101b7565b6102ea6102e536600461224f565b610c9b565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b6101e661031d366004612269565b610cdf565b61034c61033036600461224f565b60016020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101b7565b6101e661037336600461221d565b610ec1565b60085461019a906fffffffffffffffffffffffffffffffff1681565b6102ea6103a236600461224f565b6110c4565b6101e66103b53660046121d0565b611108565b6101e66103c836600461215f565b611251565b6104826103db36600461224f565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff82169161ffff74010000000000000000000000000000000000000000820481169276010000000000000000000000000000000000000000000083049091169167ffffffffffffffff780100000000000000000000000000000000000000000000000090910416906fffffffffffffffffffffffffffffffff1685565b6040805173ffffffffffffffffffffffffffffffffffffffff96909616865261ffff9485166020870152929093169184019190915267ffffffffffffffff1660608301526fffffffffffffffffffffffffffffffff16608082015260a0016101b7565b6007546102ea9073ffffffffffffffffffffffffffffffffffffffff1681565b6101e66105133660046122e5565b611500565b6006546102ea9073ffffffffffffffffffffffffffffffffffffffff1681565b60ff81166000908152600460209081526040808320815160a081018352815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811695830195909552760100000000000000000000000000000000000000000000810490941692810192909252780100000000000000000000000000000000000000000000000090920467ffffffffffffffff1660608201526001909101546fffffffffffffffffffffffffffffffff16608082018190521580610614575061061483610c66565b156106235760009150506106d7565b806060015167ffffffffffffffff16421415610644576080015190506106d7565b604081015161065a9061ffff166201518061241e565b816020015161ffff16826060015167ffffffffffffffff164261067d919061248c565b83608001516fffffffffffffffffffffffffffffffff1661069e919061241e565b6106a8919061241e565b6106b291906123d2565b81608001516fffffffffffffffffffffffffffffffff166106d3919061248c565b9150505b919050565b60006106e782610c66565b1561070757506008546fffffffffffffffffffffffffffffffff166106d7565b60ff8216600090815260046020908152604091829020825160a081018452815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811694830194909452760100000000000000000000000000000000000000000000810490931693810193909352780100000000000000000000000000000000000000000000000090910467ffffffffffffffff166060830152600101546fffffffffffffffffffffffffffffffff16608082018190526064906107e090606e6123e6565b6106d391906123a3565b600a54600b54141561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c00000000000000000000000000000000000060448201526064015b60405180910390fd5b600a54600b55336000908152600560205260409020546fffffffffffffffffffffffffffffffff808316911610156108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610854565b33600090815260056020526040812080548392906109229084906fffffffffffffffffffffffffffffffff1661245b565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556006546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f5919061213f565b506040516fffffffffffffffffffffffffffffffff8216815233907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd9060200160405180910390a250600954600b55565b60075473ffffffffffffffffffffffffffffffffffffffff163314610ac7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610854565b60075460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a3600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600a54600b541415610bc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b55610bd38161164d565b50600954600b55565b600a54600b541415610c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b55610c5b8383836117df565b5050600954600b5550565b60ff81166000908152600160205260408120544267ffffffffffffffff90911611610c93575060016106d7565b506000919050565b6000610ca682610c66565b15610cb3575060006106d7565b5060ff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b81610ce981610c9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420736c6f74206f776e65720000000000000000000000000000000000006044820152606401610854565b73ffffffffffffffffffffffffffffffffffffffff8216610dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610854565b73ffffffffffffffffffffffffffffffffffffffff82163360ff85167fbd531a66556ecb9963175ca79b62cc8dee8921be91e4f1defa1f712052181856610e40876110c4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a45060ff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314610f42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610854565b8161ffff168161ffff1611610fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f64656e6f6d696e61746f72206d757374206265203e206e756d657261746f72006044820152606401610854565b6007546040805161ffff858116825284811660208301527401000000000000000000000000000000000000000084048116828401527601000000000000000000000000000000000000000000009093049092166060830152517fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509181900360800190a1600780547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff948516027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000009290931691909102919091179055565b60006110cf82610c66565b156110dc575060006106d7565b5060ff1660009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600a54600b541415611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b556006546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff871660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b505050506112448561164d565b5050600954600b55505050565b600054610100900460ff168061126a575060005460ff16155b6112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610854565b600054610100900460ff1615801561133557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6006805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600780549287169290911682179055604051600091907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b908390a3600780547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8681169182027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff169290921776010000000000000000000000000000000000000000000092861692830217909255604080519283526020830191909152600090820181905260608201527fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509060800160405180910390a1600880547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016662386f26fc10000179055600160098190556002600a55600b5580156114f957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b600a54600b54141561156e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b556006546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff881660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561161b57600080fd5b505af115801561162f573d6000803e3d6000fd5b5050505061163e8787876117df565b5050600954600b555050505050565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e919061213f565b5033600090815260056020526040812080548392906117409084906fffffffffffffffffffffffffffffffff16612357565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a826040516117d491906fffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff811661185c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610854565b60ff83166000908152600460205260408120600181015490916fffffffffffffffffffffffffffffffff9091169061189386610538565b905060006118a1828461245b565b90506fffffffffffffffffffffffffffffffff82161580156118db57506008546fffffffffffffffffffffffffffffffff90811690871610155b80611920575060646118ee84606e6123e6565b6118f891906123a3565b6fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1610155b611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f62696420746f6f20736d616c6c000000000000000000000000000000000000006044820152606401610854565b3360008181526005602052604081205486546fffffffffffffffffffffffffffffffff9091169273ffffffffffffffffffffffffffffffffffffffff909116146119d057876119da565b6119da848961245b565b90506fffffffffffffffffffffffffffffffff821615611bb057806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611a8b573360009081526005602052604081208054839290611a509084906fffffffffffffffffffffffffffffffff1661245b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611bab565b33600081815260056020526040902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905560065473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9030611aeb868661245b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526fffffffffffffffffffffffffffffffff166044820152606401602060405180830381600087803b158015611b7157600080fd5b505af1158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba9919061213f565b505b611c73565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c71919061213f565b505b855473ffffffffffffffffffffffffffffffffffffffff163314611d1057855473ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604081208054869290611cd99084906fffffffffffffffffffffffffffffffff16612357565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6fffffffffffffffffffffffffffffffff831615611ddf576006546040517f42966c680000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff909116906342966c6890602401602060405180830381600087803b158015611da557600080fd5b505af1158015611db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddd919061213f565b505b60ff891660009081526003602090815260408083208054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560029093529220805490911673ffffffffffffffffffffffffffffffffffffffff8a16179055865477ffffffff00000000000000000000000000000000000000001677ffffffffffffffffffffffffffffffffffffffffffffffff9091161778010000000000000000000000000000000000000000000000004267ffffffffffffffff1602178087556001870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8b16179055600780547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff8316740100000000000000000000000000000000000000009182900461ffff90811683029182178b5583547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9095167fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff909216919091177601000000000000000000000000000000000000000000009485900482168502178a559154908104821692611fbe929104166201518061241e565b611fc891906123d2565b611fd2904261238b565b60ff8a16600081815260016020908152604091829020805467ffffffffffffffff959095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009095169490941790935560075481516fffffffffffffffffffffffffffffffff8d811682528a169481019490945261ffff7401000000000000000000000000000000000000000082048116858401527601000000000000000000000000000000000000000000009091041660608401525173ffffffffffffffffffffffffffffffffffffffff8a16923392917f6190ecb308529ed5355b9d692732314745e0acbc6c8270baf94bab524f03eed49181900360800190a4505050505050505050565b80356fffffffffffffffffffffffffffffffff811681146106d757600080fd5b803561ffff811681146106d757600080fd5b803560ff811681146106d757600080fd5b60006020828403121561212d578081fd5b813561213881612501565b9392505050565b600060208284031215612150578081fd5b81518015158114612138578182fd5b60008060008060808587031215612174578283fd5b843561217f81612501565b9350602085013561218f81612501565b925061219d604086016120f9565b91506121ab606086016120f9565b905092959194509250565b6000602082840312156121c7578081fd5b612138826120d9565b600080600080600060a086880312156121e7578081fd5b6121f0866120d9565b9450602086013593506122056040870161210b565b94979396509394606081013594506080013592915050565b6000806040838503121561222f578182fd5b612238836120f9565b9150612246602084016120f9565b90509250929050565b600060208284031215612260578081fd5b6121388261210b565b6000806040838503121561227b578182fd5b6122848361210b565b9150602083013561229481612501565b809150509250929050565b6000806000606084860312156122b3578283fd5b6122bc8461210b565b92506122ca602085016120d9565b915060408401356122da81612501565b809150509250925092565b600080600080600080600060e0888a0312156122ff578182fd5b6123088861210b565b9650612316602089016120d9565b9550604088013561232681612501565b94506060880135935061233b6080890161210b565b925060a0880135915060c0880135905092959891949750929550565b60006fffffffffffffffffffffffffffffffff808316818516808303821115612382576123826124a3565b01949350505050565b6000821982111561239e5761239e6124a3565b500190565b60006fffffffffffffffffffffffffffffffff808416806123c6576123c66124d2565b92169190910492915050565b6000826123e1576123e16124d2565b500490565b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615612415576124156124a3565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612456576124566124a3565b500290565b60006fffffffffffffffffffffffffffffffff83811690831681811015612484576124846124a3565b039392505050565b60008282101561249e5761249e6124a3565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461252357600080fd5b5056fea26469706673582212208dc761760465df55cd5ccecd2d2088da170b5c027f4c2dd3a4991ace9e5a20c364736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c8063bfb099b6116100d8578063dcf533791161008c578063f851a44011610066578063f851a440146104e5578063fba9578b14610505578063fc0c546a1461051857610182565b8063dcf53379146103a7578063df442678146103ba578063f45afb9f146103cd57610182565b8063cb418116116100bd578063cb41811614610365578063ce69cd2014610378578063dc4fb6f11461039457610182565b8063bfb099b61461030f578063c69b6fa61461032257610182565b806388fe2be81161013a578063b971235411610114578063b9712354146102a1578063baa9bb23146102b4578063bbb0d596146102d757610182565b806388fe2be81461022d5780639631af0b14610240578063b361b2b51461027957610182565b8063458a1d6e1161016b578063458a1d6e146101d357806360217267146101e8578063704b6c021461021a57610182565b8063050354091461018757806308972073146101c0575b600080fd5b61019a61019536600461224f565b610538565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61019a6101ce36600461224f565b6106dc565b6101e66101e13660046121b6565b6107ea565b005b61019a6101f636600461211c565b6005602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6101e661022836600461211c565b610a46565b6101e661023b3660046121b6565b610b56565b6007546102669074010000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101b7565b60075461026690760100000000000000000000000000000000000000000000900461ffff1681565b6101e66102af36600461229f565b610bdc565b6102c76102c236600461224f565b610c66565b60405190151581526020016101b7565b6102ea6102e536600461224f565b610c9b565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b6101e661031d366004612269565b610cdf565b61034c61033036600461224f565b60016020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101b7565b6101e661037336600461221d565b610ec1565b60085461019a906fffffffffffffffffffffffffffffffff1681565b6102ea6103a236600461224f565b6110c4565b6101e66103b53660046121d0565b611108565b6101e66103c836600461215f565b611251565b6104826103db36600461224f565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff82169161ffff74010000000000000000000000000000000000000000820481169276010000000000000000000000000000000000000000000083049091169167ffffffffffffffff780100000000000000000000000000000000000000000000000090910416906fffffffffffffffffffffffffffffffff1685565b6040805173ffffffffffffffffffffffffffffffffffffffff96909616865261ffff9485166020870152929093169184019190915267ffffffffffffffff1660608301526fffffffffffffffffffffffffffffffff16608082015260a0016101b7565b6007546102ea9073ffffffffffffffffffffffffffffffffffffffff1681565b6101e66105133660046122e5565b611500565b6006546102ea9073ffffffffffffffffffffffffffffffffffffffff1681565b60ff81166000908152600460209081526040808320815160a081018352815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811695830195909552760100000000000000000000000000000000000000000000810490941692810192909252780100000000000000000000000000000000000000000000000090920467ffffffffffffffff1660608201526001909101546fffffffffffffffffffffffffffffffff16608082018190521580610614575061061483610c66565b156106235760009150506106d7565b806060015167ffffffffffffffff16421415610644576080015190506106d7565b604081015161065a9061ffff166201518061241e565b816020015161ffff16826060015167ffffffffffffffff164261067d919061248c565b83608001516fffffffffffffffffffffffffffffffff1661069e919061241e565b6106a8919061241e565b6106b291906123d2565b81608001516fffffffffffffffffffffffffffffffff166106d3919061248c565b9150505b919050565b60006106e782610c66565b1561070757506008546fffffffffffffffffffffffffffffffff166106d7565b60ff8216600090815260046020908152604091829020825160a081018452815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811694830194909452760100000000000000000000000000000000000000000000810490931693810193909352780100000000000000000000000000000000000000000000000090910467ffffffffffffffff166060830152600101546fffffffffffffffffffffffffffffffff16608082018190526064906107e090606e6123e6565b6106d391906123a3565b600a54600b54141561085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c00000000000000000000000000000000000060448201526064015b60405180910390fd5b600a54600b55336000908152600560205260409020546fffffffffffffffffffffffffffffffff808316911610156108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610854565b33600090815260056020526040812080548392906109229084906fffffffffffffffffffffffffffffffff1661245b565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556006546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f5919061213f565b506040516fffffffffffffffffffffffffffffffff8216815233907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd9060200160405180910390a250600954600b55565b60075473ffffffffffffffffffffffffffffffffffffffff163314610ac7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610854565b60075460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a3600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600a54600b541415610bc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b55610bd38161164d565b50600954600b55565b600a54600b541415610c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b55610c5b8383836117df565b5050600954600b5550565b60ff81166000908152600160205260408120544267ffffffffffffffff90911611610c93575060016106d7565b506000919050565b6000610ca682610c66565b15610cb3575060006106d7565b5060ff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b81610ce981610c9b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420736c6f74206f776e65720000000000000000000000000000000000006044820152606401610854565b73ffffffffffffffffffffffffffffffffffffffff8216610dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610854565b73ffffffffffffffffffffffffffffffffffffffff82163360ff85167fbd531a66556ecb9963175ca79b62cc8dee8921be91e4f1defa1f712052181856610e40876110c4565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a45060ff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60075473ffffffffffffffffffffffffffffffffffffffff163314610f42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610854565b8161ffff168161ffff1611610fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f64656e6f6d696e61746f72206d757374206265203e206e756d657261746f72006044820152606401610854565b6007546040805161ffff858116825284811660208301527401000000000000000000000000000000000000000084048116828401527601000000000000000000000000000000000000000000009093049092166060830152517fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509181900360800190a1600780547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff948516027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000009290931691909102919091179055565b60006110cf82610c66565b156110dc575060006106d7565b5060ff1660009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600a54600b541415611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b556006546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff871660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561122357600080fd5b505af1158015611237573d6000803e3d6000fd5b505050506112448561164d565b5050600954600b55505050565b600054610100900460ff168061126a575060005460ff16155b6112f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610854565b600054610100900460ff1615801561133557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6006805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600780549287169290911682179055604051600091907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b908390a3600780547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8681169182027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff169290921776010000000000000000000000000000000000000000000092861692830217909255604080519283526020830191909152600090820181905260608201527fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509060800160405180910390a1600880547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016662386f26fc10000179055600160098190556002600a55600b5580156114f957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b600a54600b54141561156e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610854565b600a54600b556006546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff881660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561161b57600080fd5b505af115801561162f573d6000803e3d6000fd5b5050505061163e8787876117df565b5050600954600b555050505050565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b1580156116d657600080fd5b505af11580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e919061213f565b5033600090815260056020526040812080548392906117409084906fffffffffffffffffffffffffffffffff16612357565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a826040516117d491906fffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff811661185c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610854565b60ff83166000908152600460205260408120600181015490916fffffffffffffffffffffffffffffffff9091169061189386610538565b905060006118a1828461245b565b90506fffffffffffffffffffffffffffffffff82161580156118db57506008546fffffffffffffffffffffffffffffffff90811690871610155b80611920575060646118ee84606e6123e6565b6118f891906123a3565b6fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1610155b611986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f62696420746f6f20736d616c6c000000000000000000000000000000000000006044820152606401610854565b3360008181526005602052604081205486546fffffffffffffffffffffffffffffffff9091169273ffffffffffffffffffffffffffffffffffffffff909116146119d057876119da565b6119da848961245b565b90506fffffffffffffffffffffffffffffffff821615611bb057806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611a8b573360009081526005602052604081208054839290611a509084906fffffffffffffffffffffffffffffffff1661245b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611bab565b33600081815260056020526040902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905560065473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9030611aeb868661245b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526fffffffffffffffffffffffffffffffff166044820152606401602060405180830381600087803b158015611b7157600080fd5b505af1158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba9919061213f565b505b611c73565b6006546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611c3957600080fd5b505af1158015611c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c71919061213f565b505b855473ffffffffffffffffffffffffffffffffffffffff163314611d1057855473ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604081208054869290611cd99084906fffffffffffffffffffffffffffffffff16612357565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6fffffffffffffffffffffffffffffffff831615611ddf576006546040517f42966c680000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff909116906342966c6890602401602060405180830381600087803b158015611da557600080fd5b505af1158015611db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddd919061213f565b505b60ff891660009081526003602090815260408083208054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560029093529220805490911673ffffffffffffffffffffffffffffffffffffffff8a16179055865477ffffffff00000000000000000000000000000000000000001677ffffffffffffffffffffffffffffffffffffffffffffffff9091161778010000000000000000000000000000000000000000000000004267ffffffffffffffff1602178087556001870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8b16179055600780547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff8316740100000000000000000000000000000000000000009182900461ffff90811683029182178b5583547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9095167fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff909216919091177601000000000000000000000000000000000000000000009485900482168502178a559154908104821692611fbe929104166201518061241e565b611fc891906123d2565b611fd2904261238b565b60ff8a16600081815260016020908152604091829020805467ffffffffffffffff959095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009095169490941790935560075481516fffffffffffffffffffffffffffffffff8d811682528a169481019490945261ffff7401000000000000000000000000000000000000000082048116858401527601000000000000000000000000000000000000000000009091041660608401525173ffffffffffffffffffffffffffffffffffffffff8a16923392917f6190ecb308529ed5355b9d692732314745e0acbc6c8270baf94bab524f03eed49181900360800190a4505050505050505050565b80356fffffffffffffffffffffffffffffffff811681146106d757600080fd5b803561ffff811681146106d757600080fd5b803560ff811681146106d757600080fd5b60006020828403121561212d578081fd5b813561213881612501565b9392505050565b600060208284031215612150578081fd5b81518015158114612138578182fd5b60008060008060808587031215612174578283fd5b843561217f81612501565b9350602085013561218f81612501565b925061219d604086016120f9565b91506121ab606086016120f9565b905092959194509250565b6000602082840312156121c7578081fd5b612138826120d9565b600080600080600060a086880312156121e7578081fd5b6121f0866120d9565b9450602086013593506122056040870161210b565b94979396509394606081013594506080013592915050565b6000806040838503121561222f578182fd5b612238836120f9565b9150612246602084016120f9565b90509250929050565b600060208284031215612260578081fd5b6121388261210b565b6000806040838503121561227b578182fd5b6122848361210b565b9150602083013561229481612501565b809150509250929050565b6000806000606084860312156122b3578283fd5b6122bc8461210b565b92506122ca602085016120d9565b915060408401356122da81612501565b809150509250925092565b600080600080600080600060e0888a0312156122ff578182fd5b6123088861210b565b9650612316602089016120d9565b9550604088013561232681612501565b94506060880135935061233b6080890161210b565b925060a0880135915060c0880135905092959891949750929550565b60006fffffffffffffffffffffffffffffffff808316818516808303821115612382576123826124a3565b01949350505050565b6000821982111561239e5761239e6124a3565b500190565b60006fffffffffffffffffffffffffffffffff808416806123c6576123c66124d2565b92169190910492915050565b6000826123e1576123e16124d2565b500490565b60006fffffffffffffffffffffffffffffffff80831681851681830481118215151615612415576124156124a3565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612456576124566124a3565b500290565b60006fffffffffffffffffffffffffffffffff83811690831681811015612484576124846124a3565b039392505050565b60008282101561249e5761249e6124a3565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461252357600080fd5b5056fea26469706673582212208dc761760465df55cd5ccecd2d2088da170b5c027f4c2dd3a4991ace9e5a20c364736f6c63430008030033",
  "devdoc": {
    "details": "It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.   Be especially careful when importing any external contracts/libraries. If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!",
    "kind": "dev",
    "methods": {},
    "title": "SlotMarket",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4067,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4070,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 794,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "slotExpiration",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_uint64)"
      },
      {
        "astId": 798,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_slotDelegate",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 802,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_slotOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 807,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "slotBid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(Bid)790_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "stakedBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 814,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "token",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20Extended)2166"
      },
      {
        "astId": 816,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "admin",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "taxNumerator",
        "offset": 20,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 820,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "taxDenominator",
        "offset": 22,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 822,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "MIN_BID",
        "offset": 0,
        "slot": "8",
        "type": "t_uint128"
      },
      {
        "astId": 824,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_NOT_ENTERED",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 826,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_ENTERED",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 828,
        "contract": "contracts/SlotMarket.sol:SlotMarket",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Extended)2166": {
        "encoding": "inplace",
        "label": "contract IERC20Extended",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(Bid)790_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct SlotMarket.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)790_storage"
      },
      "t_mapping(t_uint8,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Bid)790_storage": {
        "encoding": "inplace",
        "label": "struct SlotMarket.Bid",
        "members": [
          {
            "astId": 781,
            "contract": "contracts/SlotMarket.sol:SlotMarket",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 783,
            "contract": "contracts/SlotMarket.sol:SlotMarket",
            "label": "taxNumerator",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 785,
            "contract": "contracts/SlotMarket.sol:SlotMarket",
            "label": "taxDenominator",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 787,
            "contract": "contracts/SlotMarket.sol:SlotMarket",
            "label": "periodStart",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 789,
            "contract": "contracts/SlotMarket.sol:SlotMarket",
            "label": "bidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}