{
  "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_blockProducers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_collectors",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "producer",
          "type": "address"
        }
      ],
      "name": "BlockProducerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "producer",
          "type": "address"
        }
      ],
      "name": "BlockProducerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "producer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collector",
          "type": "address"
        }
      ],
      "name": "BlockProducerRewardCollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RewardScheduleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "producer",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "producers",
          "type": "address[]"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blockProducer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "producer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "producers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "collectors",
          "type": "address[]"
        }
      ],
      "name": "delegateBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "producer",
          "type": "address"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "producers",
          "type": "address[]"
        }
      ],
      "name": "removeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardScheduleEntries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "rewardScheduleEntry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "epochDuration",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "rewardsPerEpoch",
              "type": "uint128"
            }
          ],
          "internalType": "struct IGovernance.RewardScheduleEntry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "set",
          "type": "bytes"
        }
      ],
      "name": "setRewardSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
  "receipt": {
    "to": null,
    "from": "0xa52422BB8c29E4d55243d310fB6BAe793162452e",
    "contractAddress": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
    "transactionIndex": 0,
    "gasUsed": "1668474",
    "logsBloom": "0x
    "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb",
    "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10692360,
        "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
        "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x000000000000000000000000a52422bb8c29e4d55243d310fb6bae793162452e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10692360,
        "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
        "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1948e62cb88693562db3600e12aba035ba28da4a0626473ef28234bb89054073",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x000000000000000000000000a52422bb8c29e4d55243d310fb6bae793162452e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10692360,
        "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
        "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5",
          "0x000000000000000000000000a52422bb8c29e4d55243d310fb6bae793162452e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10692360,
        "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
        "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
        "topics": [
          "0xd4609c71470de2c1f8b9f35c27d41cf2fca85f3deddeec03938a47ee98afd4f1",
          "0x0000000000000000000000009ffed2297c7b81293413550db675073ab46980b2"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10692360,
        "transactionHash": "0x7cc1a3863a6f37210e80b88d2689146d425350f8e62cb56a2a7938448fb0c941",
        "address": "0xE4A7C70E138e671F53Bfa04Ad5c2A3Fb10fe89cB",
        "topics": [
          "0x0615eabcfb1b8be975ad51b1d48d4170e825e942374f4017619310ca8baa2b8e",
          "0x0000000000000000000000009ffed2297c7b81293413550db675073ab46980b2",
          "0x0000000000000000000000005b0ac3279dbf84bb8da59be1ecab118198f022e5"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x0d88d1d6dd4edc55e054eb7011b9c2d2c4baa65f9047738ead948a192cf35efb"
      }
    ],
    "blockNumber": 10692360,
    "cumulativeGasUsed": "1668474",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5b0aC3279dBf84Bb8DA59Be1EcaB118198f022E5",
    [
      "0x9fFed2297C7B81293413550Db675073ab46980b2"
    ],
    [
      "0x5b0aC3279dBf84Bb8DA59Be1EcaB118198f022E5"
    ]
  ],
  "solcInputHash": "6b1488ff370b6f6025b54381f00951c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_blockProducers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_collectors\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"}],\"name\":\"BlockProducerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"}],\"name\":\"BlockProducerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"BlockProducerRewardCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardScheduleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"producers\",\"type\":\"address[]\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockProducer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"producers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collectors\",\"type\":\"address[]\"}],\"name\":\"delegateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"producer\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"producers\",\"type\":\"address[]\"}],\"name\":\"removeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardScheduleEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardScheduleEntry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"epochDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"rewardsPerEpoch\",\"type\":\"uint128\"}],\"internalType\":\"struct IGovernance.RewardScheduleEntry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"set\",\"type\":\"bytes\"}],\"name\":\"setRewardSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATOR_ROLE()\":{\"notice\":\"Admin delegator role\"},\"GOV_ROLE()\":{\"notice\":\"Admin governance role\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DistributorGovernance.sol\":\"DistributorGovernance\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/DistributorGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IGovernance.sol\\\";\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./lib/BytesLib.sol\\\";\\n\\ncontract DistributorGovernance is AccessControl, IGovernance {\\n    using BytesLib for bytes;\\n\\n    /// @notice Admin governance role\\n    bytes32 public constant GOV_ROLE = keccak256(\\\"GOV_ROLE\\\");\\n\\n    /// @notice Admin delegator role\\n    bytes32 public constant DELEGATOR_ROLE = keccak256(\\\"DELEGATOR_ROLE\\\");\\n\\n    mapping (address => address) public override rewardCollector;\\n    mapping (address => bool) public override blockProducer;\\n    bytes private _rewardSchedule;\\n\\n    uint256 constant REWARD_SCHEDULE_ENTRY_LENGTH = 32;\\n\\n    modifier onlyGov() {\\n        require(hasRole(GOV_ROLE, msg.sender), \\\"must be gov\\\");\\n        _;\\n    }\\n\\n    modifier onlyDelegatorOrProducer(address producer) {\\n        require(hasRole(DELEGATOR_ROLE, msg.sender) || msg.sender == producer, \\\"must be producer of delegator\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _admin, \\n        address[] memory _blockProducers,\\n        address[] memory _collectors\\n    ) {\\n        require(_blockProducers.length == _collectors.length, \\\"length mismatch\\\");\\n        _setupRole(GOV_ROLE, _admin);\\n        _setupRole(DELEGATOR_ROLE, _admin);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        for(uint i; i< _blockProducers.length; i++) {\\n            blockProducer[_blockProducers[i]] = true;\\n            emit BlockProducerAdded(_blockProducers[i]);\\n\\n            rewardCollector[_blockProducers[i]] = _collectors[i];\\n            emit BlockProducerRewardCollectorChanged(_blockProducers[i], _collectors[i]);\\n        }\\n    }\\n\\n    function add(address producer) onlyGov public {\\n        require(blockProducer[producer] == false, \\\"already block producer\\\");\\n        blockProducer[producer] = true;\\n        emit BlockProducerAdded(producer);\\n    }\\n\\n    function addBatch(address[] memory producers) external {\\n        for(uint i; i< producers.length; i++) {\\n            add(producers[i]);\\n        }\\n    }\\n\\n    function remove(address producer) onlyGov public {\\n        require(blockProducer[producer] == true, \\\"not block producer\\\");\\n        blockProducer[producer] = false;\\n        emit BlockProducerRemoved(producer);\\n    }\\n\\n    function removeBatch(address[] memory producers) external {\\n        for(uint i; i< producers.length; i++) {\\n            remove(producers[i]);\\n        }\\n    }\\n\\n    function delegate(address producer, address collector) onlyDelegatorOrProducer(producer) public {\\n        rewardCollector[producer] = collector;\\n        emit BlockProducerRewardCollectorChanged(producer, collector);\\n    }\\n\\n    function delegateBatch(address[] memory producers, address[] memory collectors) external {\\n        require(producers.length == collectors.length, \\\"length mismatch\\\");\\n        for(uint i; i< producers.length; i++) {\\n            delegate(producers[i], collectors[i]);\\n        }\\n    }\\n\\n    function setRewardSchedule(bytes memory set) onlyGov public {\\n        _rewardSchedule = set;\\n        emit RewardScheduleChanged();\\n    }\\n\\n    function rewardScheduleEntry(uint256 index) public override view returns (RewardScheduleEntry memory) {\\n        RewardScheduleEntry memory entry;\\n        uint256 start = index * REWARD_SCHEDULE_ENTRY_LENGTH;\\n        entry.startTime = _rewardSchedule.toUint64(start);\\n        entry.epochDuration = _rewardSchedule.toUint64(start + 8);\\n        entry.rewardsPerEpoch = _rewardSchedule.toUint128(start + 16);\\n        return entry;\\n    }\\n\\n    function rewardScheduleEntries() public override view returns (uint256) {\\n        return _rewardSchedule.length / REWARD_SCHEDULE_ENTRY_LENGTH;\\n    }\\n}\\n\",\"keccak256\":\"0xce5bee922f6014da991d6365b6aed99769bcf4da6fb223c72c283436ed044015\",\"license\":\"MIT\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3ce2766250b7eb013230440109b986c249573218bd3f587348018643ec55e501\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGovernance {\\n    struct RewardScheduleEntry {\\n        uint64 startTime;\\n        uint64 epochDuration;\\n        uint128 rewardsPerEpoch; \\n    }\\n\\n    function rewardCollector(address producer) external view returns (address);\\n    function blockProducer(address producer) external view returns (bool);\\n    function rewardScheduleEntries() external view returns (uint256);\\n    function rewardScheduleEntry(uint256 index) external view returns (RewardScheduleEntry memory);\\n\\n    event BlockProducerAdded(address indexed producer);\\n    event BlockProducerRemoved(address indexed producer);\\n    event BlockProducerRewardCollectorChanged(address indexed producer, address indexed collector);\\n    event RewardScheduleChanged();\\n}\\n\",\"keccak256\":\"0x1d127b7881b4e27bd3cf86d1558f7779c55879e7f6bbaf48548dd54e6b681320\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\",\"keccak256\":\"0x18880461ce766cba7a0b97f4c4ee27c8760af28274f2561efb91a53aab7388aa\",\"license\":\"MIT\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xb53122e1b41825143486e6e0a288593a60bb924cfdc8e15309c9b86095becb7f\",\"license\":\"MIT\"},\"contracts/lib/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x46df8f85a9cee339d42e0b6b74f09062e428a0cf79f56843bb560f74cfa760de\",\"license\":\"MIT\"},\"contracts/lib/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fe338038062001fe3833981016040819052620000349162000433565b80518251146200007c5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b604482015260640160405180910390fd5b620000a87f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba84620002b3565b620000d47f1948e62cb88693562db3600e12aba035ba28da4a0626473ef28234bb8905407384620002b3565b620000e1600084620002b3565b60005b8251811015620002a957600160026000858481518110620001095762000109620004da565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508281815181106200015d576200015d620004da565b60200260200101516001600160a01b03167fd4609c71470de2c1f8b9f35c27d41cf2fca85f3deddeec03938a47ee98afd4f160405160405180910390a2818181518110620001af57620001af620004da565b602002602001015160016000858481518110620001d057620001d0620004da565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818181518110620002315762000231620004da565b60200260200101516001600160a01b0316838281518110620002575762000257620004da565b60200260200101516001600160a01b03167f0615eabcfb1b8be975ad51b1d48d4170e825e942374f4017619310ca8baa2b8e60405160405180910390a380620002a081620004b0565b915050620000e4565b5050505062000506565b620002bf8282620002c3565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002bf576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200031f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200037b57600080fd5b919050565b600082601f8301126200039257600080fd5b815160206001600160401b0380831115620003b157620003b1620004f0565b8260051b604051601f19603f83011681018181108482111715620003d957620003d9620004f0565b60405284815283810192508684018288018501891015620003f957600080fd5b600092505b858310156200042757620004128162000363565b845292840192600192909201918401620003fe565b50979650505050505050565b6000806000606084860312156200044957600080fd5b620004548462000363565b60208501519093506001600160401b03808211156200047257600080fd5b620004808783880162000380565b935060408601519150808211156200049757600080fd5b50620004a68682870162000380565b9150509250925092565b6000600019821415620004d357634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611acd80620005166000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80636cd8830c116100cd578063a217fddf11610081578063b536818a11610066578063b536818a146103be578063d547741f146103e5578063d9b10d6d146103f857600080fd5b8063a217fddf146103a3578063b046222e146103ab57600080fd5b80638ab65686116100b25780638ab656861461032557806391d148541461033857806397b8a3a71461037c57600080fd5b80636cd8830c1461027457806373c248f4146102cf57600080fd5b80632f2ff15d116101245780634214f1f2116101095780634214f1f21461022b5780634fcb9b3e1461023e5780636b845bfe1461026157600080fd5b80632f2ff15d1461020557806336568abe1461021857600080fd5b8063248a9ca311610155578063248a9ca3146101ae57806324efa264146101df57806329092d0e146101f257600080fd5b806301ffc9a7146101715780630a3b0a4f14610199575b600080fd5b61018461017f366004611672565b610400565b60405190151581526020015b60405180910390f35b6101ac6101a7366004611547565b610499565b005b6101d16101bc366004611636565b60009081526020819052604090206001015490565b604051908152602001610190565b6101ac6101ed366004611595565b61063d565b6101ac610200366004611547565b610681565b6101ac61021336600461164f565b610821565b6101ac61022636600461164f565b61084c565b6101ac6102393660046115d2565b6108fb565b61018461024c366004611547565b60026020526000908152604090205460ff1681565b6101ac61026f366004611595565b6109c0565b6102aa610282366004611547565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b6102e26102dd366004611636565b610a00565b60408051825167ffffffffffffffff908116825260208085015190911690820152918101516fffffffffffffffffffffffffffffffff1690820152606001610190565b6101ac610333366004611562565b610be1565b61018461034636600461164f565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101d17f1948e62cb88693562db3600e12aba035ba28da4a0626473ef28234bb8905407381565b6101d1600081565b6101ac6103b93660046116b4565b610d18565b6101d17f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba81565b6101ac6103f336600461164f565b610df0565b6101d1610e16565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061049357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f7600000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16156105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f616c726561647920626c6f636b2070726f647563657200000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fd4609c71470de2c1f8b9f35c27d41cf2fca85f3deddeec03938a47ee98afd4f19190a250565b60005b815181101561067d5761066b82828151811061065e5761065e611a39565b6020026020010151610499565b80610675816119d1565b915050610640565b5050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f76000000000000000000000000000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff1615156001146107ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e6f7420626c6f636b2070726f64756365720000000000000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f0d5bda236a0ce9d98d8af2e87bd2ca28eb79bf588d01c05b3f7ac4c34ff408599190a250565b60008281526020819052604090206001015461083d8133610e37565b6108478383610f07565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161052d565b61067d8282610ff7565b8051825114610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6c656e677468206d69736d617463680000000000000000000000000000000000604482015260640161052d565b60005b8251811015610847576109ae83828151811061098757610987611a39565b60200260200101518383815181106109a1576109a1611a39565b6020026020010151610be1565b806109b8816119d1565b915050610969565b60005b815181101561067d576109ee8282815181106109e1576109e1611a39565b6020026020010151610681565b806109f8816119d1565b9150506109c3565b604080516060810182526000808252602082018190529181019190915260408051606081018252600080825260208201819052918101919091526000610a476020856118db565b9050610ae68160038054610a5a9061197d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a869061197d565b8015610ad35780601f10610aa857610100808354040283529160200191610ad3565b820191906000526020600020905b815481529060010190602001808311610ab657829003601f168201915b50505050506110ae90919063ffffffff16565b67ffffffffffffffff168252610b0d610b00826008611888565b60038054610a5a9061197d565b67ffffffffffffffff166020830152610bc3610b2a826010611888565b60038054610b379061197d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b639061197d565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b505050505061112e90919063ffffffff16565b6fffffffffffffffffffffffffffffffff1660408301525092915050565b3360009081527f0a53e73864620236ae8f220690a15a7e4438b7a8f9a5aa637c07161427083d2b6020526040902054829060ff1680610c3557503373ffffffffffffffffffffffffffffffffffffffff8216145b610c9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d7573742062652070726f6475636572206f662064656c656761746f72000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169487169485179055517f0615eabcfb1b8be975ad51b1d48d4170e825e942374f4017619310ca8baa2b8e9190a3505050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f76000000000000000000000000000000000000000000604482015260640161052d565b8051610dc39060039060208401906113f8565b506040517f278f09c68d571c125592b8e05ea92a9ab405c042bc8f8aa2eced5d44c918fb4490600090a150565b600082815260208190526040902060010154610e0c8133610e37565b6108478383610ff7565b6000602060038054610e279061197d565b610e329291506118a0565b905090565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661067d57610e8d8173ffffffffffffffffffffffffffffffffffffffff1660146111ae565b610e988360206111ae565b604051602001610ea9929190611767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261052d916004016117e8565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661067d5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f993390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561067d5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006110bb826008611888565b83511015611125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7436345f6f75744f66426f756e6473000000000000000000000000604482015260640161052d565b50016008015190565b600061113b826010611888565b835110156111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f55696e743132385f6f75744f66426f756e64730000000000000000000000604482015260640161052d565b50016010015190565b606060006111bd8360026118db565b6111c8906002611888565b67ffffffffffffffff8111156111e0576111e0611a68565b6040519080825280601f01601f19166020018201604052801561120a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061124157611241611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106112a4576112a4611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006112e08460026118db565b6112eb906001611888565b90505b6001811115611388577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061132c5761132c611a39565b1a60f81b82828151811061134257611342611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361138181611948565b90506112ee565b5083156113f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161052d565b9392505050565b8280546114049061197d565b90600052602060002090601f016020900481019282611426576000855561146c565b82601f1061143f57805160ff191683800117855561146c565b8280016001018555821561146c579182015b8281111561146c578251825591602001919060010190611451565b5061147892915061147c565b5090565b5b80821115611478576000815560010161147d565b803573ffffffffffffffffffffffffffffffffffffffff811681146114b557600080fd5b919050565b600082601f8301126114cb57600080fd5b8135602067ffffffffffffffff8211156114e7576114e7611a68565b8160051b6114f6828201611839565b83815282810190868401838801850189101561151157600080fd5b600093505b8584101561153b5761152781611491565b835260019390930192918401918401611516565b50979650505050505050565b60006020828403121561155957600080fd5b6113f182611491565b6000806040838503121561157557600080fd5b61157e83611491565b915061158c60208401611491565b90509250929050565b6000602082840312156115a757600080fd5b813567ffffffffffffffff8111156115be57600080fd5b6115ca848285016114ba565b949350505050565b600080604083850312156115e557600080fd5b823567ffffffffffffffff808211156115fd57600080fd5b611609868387016114ba565b9350602085013591508082111561161f57600080fd5b5061162c858286016114ba565b9150509250929050565b60006020828403121561164857600080fd5b5035919050565b6000806040838503121561166257600080fd5b8235915061158c60208401611491565b60006020828403121561168457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146113f157600080fd5b600060208083850312156116c757600080fd5b823567ffffffffffffffff808211156116df57600080fd5b818501915085601f8301126116f357600080fd5b81358181111561170557611705611a68565b611735847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611839565b9150808252868482850101111561174b57600080fd5b8084840185840137600090820190930192909252509392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161179f816017850160208801611918565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117dc816028840160208801611918565b01602801949350505050565b6020815260008251806020840152611807816040850160208701611918565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561188057611880611a68565b604052919050565b6000821982111561189b5761189b611a0a565b500190565b6000826118d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561191357611913611a0a565b500290565b60005b8381101561193357818101518382015260200161191b565b83811115611942576000848401525b50505050565b60008161195757611957611a0a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c9082168061199157607f821691505b602082108114156119cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a0357611a03611a0a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212201eb18b54630b161578e2a80d191779a5dd8cb9c9d349693c30785e8eaa8b2f7b64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80636cd8830c116100cd578063a217fddf11610081578063b536818a11610066578063b536818a146103be578063d547741f146103e5578063d9b10d6d146103f857600080fd5b8063a217fddf146103a3578063b046222e146103ab57600080fd5b80638ab65686116100b25780638ab656861461032557806391d148541461033857806397b8a3a71461037c57600080fd5b80636cd8830c1461027457806373c248f4146102cf57600080fd5b80632f2ff15d116101245780634214f1f2116101095780634214f1f21461022b5780634fcb9b3e1461023e5780636b845bfe1461026157600080fd5b80632f2ff15d1461020557806336568abe1461021857600080fd5b8063248a9ca311610155578063248a9ca3146101ae57806324efa264146101df57806329092d0e146101f257600080fd5b806301ffc9a7146101715780630a3b0a4f14610199575b600080fd5b61018461017f366004611672565b610400565b60405190151581526020015b60405180910390f35b6101ac6101a7366004611547565b610499565b005b6101d16101bc366004611636565b60009081526020819052604090206001015490565b604051908152602001610190565b6101ac6101ed366004611595565b61063d565b6101ac610200366004611547565b610681565b6101ac61021336600461164f565b610821565b6101ac61022636600461164f565b61084c565b6101ac6102393660046115d2565b6108fb565b61018461024c366004611547565b60026020526000908152604090205460ff1681565b6101ac61026f366004611595565b6109c0565b6102aa610282366004611547565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610190565b6102e26102dd366004611636565b610a00565b60408051825167ffffffffffffffff908116825260208085015190911690820152918101516fffffffffffffffffffffffffffffffff1690820152606001610190565b6101ac610333366004611562565b610be1565b61018461034636600461164f565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101d17f1948e62cb88693562db3600e12aba035ba28da4a0626473ef28234bb8905407381565b6101d1600081565b6101ac6103b93660046116b4565b610d18565b6101d17f0603f2636f0ca34ae3ea5a23bb826e2bd2ffd59fb1c01edc1ba10fba2899d1ba81565b6101ac6103f336600461164f565b610df0565b6101d1610e16565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061049357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f7600000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16156105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f616c726561647920626c6f636b2070726f647563657200000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fd4609c71470de2c1f8b9f35c27d41cf2fca85f3deddeec03938a47ee98afd4f19190a250565b60005b815181101561067d5761066b82828151811061065e5761065e611a39565b6020026020010151610499565b80610675816119d1565b915050610640565b5050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f76000000000000000000000000000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff1615156001146107ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6e6f7420626c6f636b2070726f64756365720000000000000000000000000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f0d5bda236a0ce9d98d8af2e87bd2ca28eb79bf588d01c05b3f7ac4c34ff408599190a250565b60008281526020819052604090206001015461083d8133610e37565b6108478383610f07565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146108f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161052d565b61067d8282610ff7565b8051825114610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6c656e677468206d69736d617463680000000000000000000000000000000000604482015260640161052d565b60005b8251811015610847576109ae83828151811061098757610987611a39565b60200260200101518383815181106109a1576109a1611a39565b6020026020010151610be1565b806109b8816119d1565b915050610969565b60005b815181101561067d576109ee8282815181106109e1576109e1611a39565b6020026020010151610681565b806109f8816119d1565b9150506109c3565b604080516060810182526000808252602082018190529181019190915260408051606081018252600080825260208201819052918101919091526000610a476020856118db565b9050610ae68160038054610a5a9061197d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a869061197d565b8015610ad35780601f10610aa857610100808354040283529160200191610ad3565b820191906000526020600020905b815481529060010190602001808311610ab657829003601f168201915b50505050506110ae90919063ffffffff16565b67ffffffffffffffff168252610b0d610b00826008611888565b60038054610a5a9061197d565b67ffffffffffffffff166020830152610bc3610b2a826010611888565b60038054610b379061197d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b639061197d565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b505050505061112e90919063ffffffff16565b6fffffffffffffffffffffffffffffffff1660408301525092915050565b3360009081527f0a53e73864620236ae8f220690a15a7e4438b7a8f9a5aa637c07161427083d2b6020526040902054829060ff1680610c3557503373ffffffffffffffffffffffffffffffffffffffff8216145b610c9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6d7573742062652070726f6475636572206f662064656c656761746f72000000604482015260640161052d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169487169485179055517f0615eabcfb1b8be975ad51b1d48d4170e825e942374f4017619310ca8baa2b8e9190a3505050565b3360009081527ff42cf6f079dae9a1c4905bf4a189ed49c3efccf20a4af60f202bafa7d7d85a03602052604090205460ff16610db0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6d75737420626520676f76000000000000000000000000000000000000000000604482015260640161052d565b8051610dc39060039060208401906113f8565b506040517f278f09c68d571c125592b8e05ea92a9ab405c042bc8f8aa2eced5d44c918fb4490600090a150565b600082815260208190526040902060010154610e0c8133610e37565b6108478383610ff7565b6000602060038054610e279061197d565b610e329291506118a0565b905090565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661067d57610e8d8173ffffffffffffffffffffffffffffffffffffffff1660146111ae565b610e988360206111ae565b604051602001610ea9929190611767565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261052d916004016117e8565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661067d5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610f993390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561067d5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006110bb826008611888565b83511015611125576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7436345f6f75744f66426f756e6473000000000000000000000000604482015260640161052d565b50016008015190565b600061113b826010611888565b835110156111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f55696e743132385f6f75744f66426f756e64730000000000000000000000604482015260640161052d565b50016010015190565b606060006111bd8360026118db565b6111c8906002611888565b67ffffffffffffffff8111156111e0576111e0611a68565b6040519080825280601f01601f19166020018201604052801561120a576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061124157611241611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106112a4576112a4611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006112e08460026118db565b6112eb906001611888565b90505b6001811115611388577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061132c5761132c611a39565b1a60f81b82828151811061134257611342611a39565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361138181611948565b90506112ee565b5083156113f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161052d565b9392505050565b8280546114049061197d565b90600052602060002090601f016020900481019282611426576000855561146c565b82601f1061143f57805160ff191683800117855561146c565b8280016001018555821561146c579182015b8281111561146c578251825591602001919060010190611451565b5061147892915061147c565b5090565b5b80821115611478576000815560010161147d565b803573ffffffffffffffffffffffffffffffffffffffff811681146114b557600080fd5b919050565b600082601f8301126114cb57600080fd5b8135602067ffffffffffffffff8211156114e7576114e7611a68565b8160051b6114f6828201611839565b83815282810190868401838801850189101561151157600080fd5b600093505b8584101561153b5761152781611491565b835260019390930192918401918401611516565b50979650505050505050565b60006020828403121561155957600080fd5b6113f182611491565b6000806040838503121561157557600080fd5b61157e83611491565b915061158c60208401611491565b90509250929050565b6000602082840312156115a757600080fd5b813567ffffffffffffffff8111156115be57600080fd5b6115ca848285016114ba565b949350505050565b600080604083850312156115e557600080fd5b823567ffffffffffffffff808211156115fd57600080fd5b611609868387016114ba565b9350602085013591508082111561161f57600080fd5b5061162c858286016114ba565b9150509250929050565b60006020828403121561164857600080fd5b5035919050565b6000806040838503121561166257600080fd5b8235915061158c60208401611491565b60006020828403121561168457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146113f157600080fd5b600060208083850312156116c757600080fd5b823567ffffffffffffffff808211156116df57600080fd5b818501915085601f8301126116f357600080fd5b81358181111561170557611705611a68565b611735847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611839565b9150808252868482850101111561174b57600080fd5b8084840185840137600090820190930192909252509392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161179f816017850160208801611918565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516117dc816028840160208801611918565b01602801949350505050565b6020815260008251806020840152611807816040850160208701611918565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561188057611880611a68565b604052919050565b6000821982111561189b5761189b611a0a565b500190565b6000826118d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561191357611913611a0a565b500290565b60005b8381101561193357818101518382015260200161191b565b83811115611942576000848401525b50505050565b60008161195757611957611a0a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c9082168061199157607f821691505b602082108114156119cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a0357611a03611a0a565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212201eb18b54630b161578e2a80d191779a5dd8cb9c9d349693c30785e8eaa8b2f7b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELEGATOR_ROLE()": {
        "notice": "Admin delegator role"
      },
      "GOV_ROLE()": {
        "notice": "Admin governance role"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8055,
        "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)8050_storage)"
      },
      {
        "astId": 28,
        "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
        "label": "rewardCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 33,
        "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
        "label": "blockProducer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 35,
        "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
        "label": "_rewardSchedule",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)8050_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)8050_storage"
      },
      "t_struct(RoleData)8050_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 8047,
            "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8049,
            "contract": "contracts/DistributorGovernance.sol:DistributorGovernance",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}