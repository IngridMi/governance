{
  "address": "0xf0Ec5F4e2408896679938d32B1aa8621Bbb84BF4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newBidAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "oldBidAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "taxNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "taxDenominator",
          "type": "uint16"
        }
      ],
      "name": "SlotClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDelegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDelegate",
          "type": "address"
        }
      ],
      "name": "SlotDelegateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newDenominator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldNumerator",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldDenominator",
          "type": "uint16"
        }
      ],
      "name": "TaxRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_BID",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "bid",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "claimSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "bid",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "claimSlotWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_taxNumerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_taxDenominator",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "contract ILockManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setSlotDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "numerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "denominator",
          "type": "uint16"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "balance",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "slotBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "taxNumerator",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "taxDenominator",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "periodStart",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "bidAmount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotCost",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "slotExpiration",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotForeclosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "slotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxDenominator",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxNumerator",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Extended",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16ac00fb488a028202890a14f0687f56276153e4b884f40890f4b48af5b12ca6",
  "receipt": {
    "to": null,
    "from": "0xFDf8BE775bb5e2Ba1983dC7b26A655321502E104",
    "contractAddress": "0xf0Ec5F4e2408896679938d32B1aa8621Bbb84BF4",
    "transactionIndex": 11,
    "gasUsed": "2347228",
    "logsBloom": "0x
    "blockHash": "0x8177f0d9162c7dcebd7384595d8c645bfa9060223721b293f4f45208b8f1492c",
    "transactionHash": "0x16ac00fb488a028202890a14f0687f56276153e4b884f40890f4b48af5b12ca6",
    "logs": [],
    "blockNumber": 10744874,
    "cumulativeGasUsed": "3219456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "25652fa7cefe72deed3db64da926a067",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newBidAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldBidAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"taxNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"taxDenominator\",\"type\":\"uint16\"}],\"name\":\"SlotClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDelegate\",\"type\":\"address\"}],\"name\":\"SlotDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newDenominator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldNumerator\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldDenominator\",\"type\":\"uint16\"}],\"name\":\"TaxRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAmount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_BID\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"bid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"claimSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"bid\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimSlotWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_taxNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_taxDenominator\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"contract ILockManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setSlotDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"denominator\",\"type\":\"uint16\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"slotBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"taxNumerator\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"taxDenominator\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"periodStart\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"bidAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotCost\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"slotExpiration\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotForeclosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"slotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxDenominator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxNumerator\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Extended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.   Be especially careful when importing any external contracts/libraries. If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!\",\"kind\":\"dev\",\"methods\":{\"claimSlot(uint8,uint128,address)\":{\"params\":{\"bid\":\"Bid amount\",\"delegate\":\"Delegate for slot\",\"slot\":\"Slot index\"}},\"claimSlotWithPermit(uint8,uint128,address,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"bid\":\"Bid amount\",\"deadline\":\"The time at which to expire the signature\",\"delegate\":\"Delegate for slot\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"slot\":\"Slot index\",\"v\":\"The recovery byte of the signature\"}},\"initialize(address,address,uint16,uint16)\":{\"params\":{\"_admin\":\"Admin address\",\"_taxDenominator\":\"Denominator for tax rate\",\"_taxNumerator\":\"Numerator for tax rate\",\"_token\":\"Token address\"}},\"setAdmin(address)\":{\"params\":{\"newAdmin\":\"Nex admin address\"}},\"setSlotDelegate(uint8,address)\":{\"params\":{\"delegate\":\"Delegate address\",\"slot\":\"Slot index\"}},\"setTaxRate(uint16,uint16)\":{\"params\":{\"denominator\":\"New tax denominator\",\"numerator\":\"New tax numerator\"}},\"slotBalance(uint8)\":{\"params\":{\"slot\":\"Slot index\"},\"returns\":{\"balance\":\"Slot balance\"}},\"slotCost(uint8)\":{\"params\":{\"slot\":\"Slot index\"},\"returns\":{\"_0\":\"Slot cost\"}},\"slotDelegate(uint8)\":{\"params\":{\"slot\":\"Slot index\"},\"returns\":{\"_0\":\"Slot delegate address\"}},\"slotForeclosed(uint8)\":{\"params\":{\"slot\":\"Slot index\"},\"returns\":{\"_0\":\"True if slot is foreclosed\"}},\"slotOwner(uint8)\":{\"params\":{\"slot\":\"Slot index\"},\"returns\":{\"_0\":\"Slot owner address\"}},\"stake(uint128)\":{\"params\":{\"amount\":\"Amount of tokens to stake\"}},\"stakeWithPermit(uint128,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to stake\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"unstake(uint128)\":{\"params\":{\"amount\":\"Amount of tokens to unstake\"}},\"withdraw(uint128)\":{\"params\":{\"amount\":\"Amount of tokens to withdraw\"}}},\"stateVariables\":{\"_ENTERED\":{\"details\":\"Reentrancy var used like bool, but with refunds\"},\"_NOT_ENTERED\":{\"details\":\"Reentrancy var used like bool, but with refunds\"},\"_slotDelegate\":{\"details\":\"Address to be prioritized for given slot\"},\"_slotOwner\":{\"details\":\"Address that owns a given slot and is able to set the slot delegate\"},\"_status\":{\"details\":\"Reentrancy status\"}},\"title\":\"EdenNetwork\",\"version\":1},\"userdoc\":{\"events\":{\"AdminUpdated(address,address)\":{\"notice\":\"Event emitted when admin is updated\"},\"SlotClaimed(uint8,address,address,uint128,uint128,uint16,uint16)\":{\"notice\":\"Event emitted when slot is claimed\"},\"SlotDelegateUpdated(uint8,address,address,address)\":{\"notice\":\"Event emitted when slot delegate is updated\"},\"Stake(address,uint256)\":{\"notice\":\"Event emitted when a user stakes tokens\"},\"TaxRateUpdated(uint16,uint16,uint16,uint16)\":{\"notice\":\"Event emitted when the tax rate is updated\"},\"Unstake(address,uint256)\":{\"notice\":\"Event emitted when a user unstakes tokens\"},\"Withdraw(address,uint256)\":{\"notice\":\"Event emitted when a user withdraws locked tokens\"}},\"kind\":\"user\",\"methods\":{\"MIN_BID()\":{\"notice\":\"Minimum bid to reserve slot\"},\"admin()\":{\"notice\":\"Admin that can set the contract tax rate\"},\"claimSlot(uint8,uint128,address)\":{\"notice\":\"Claim slot\"},\"claimSlotWithPermit(uint8,uint128,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Claim slot using permit for approval\"},\"initialize(address,address,uint16,uint16)\":{\"notice\":\"Initialize EdenNetwork contract\"},\"lockManager()\":{\"notice\":\"Lock Manager contract\"},\"lockedBalance(address)\":{\"notice\":\"Balance in contract that was previously used for bid\"},\"setAdmin(address)\":{\"notice\":\"Set new admin\"},\"setSlotDelegate(uint8,address)\":{\"notice\":\"Allows slot owners to set a new slot delegate\"},\"setTaxRate(uint16,uint16)\":{\"notice\":\"Set new tax rate\"},\"slotBalance(uint8)\":{\"notice\":\"Get untaxed balance for current slot bid\"},\"slotBid(uint8)\":{\"notice\":\"Current bid for given slot\"},\"slotCost(uint8)\":{\"notice\":\"Get current cost to claim slot\"},\"slotDelegate(uint8)\":{\"notice\":\"Get current slot delegate\"},\"slotExpiration(uint8)\":{\"notice\":\"Expiration timestamp of current bid for specified slot index\"},\"slotForeclosed(uint8)\":{\"notice\":\"Returns true if a given slot bid has expired\"},\"slotOwner(uint8)\":{\"notice\":\"Get current owner of slot\"},\"stake(uint128)\":{\"notice\":\"Stake tokens\"},\"stakeWithPermit(uint128,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Stake tokens using permit for approval\"},\"stakedBalance(address)\":{\"notice\":\"Staked balance in contract\"},\"taxDenominator()\":{\"notice\":\"Denominator for tax rate\"},\"taxNumerator()\":{\"notice\":\"Numerator for tax rate\"},\"token()\":{\"notice\":\"Token used to reserve slot\"},\"unstake(uint128)\":{\"notice\":\"Unstake tokens\"},\"withdraw(uint128)\":{\"notice\":\"Withdraw locked tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EdenNetwork.sol\":\"EdenNetwork\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/EdenNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./lib/Initializable.sol\\\";\\n\\n/**\\n * @title EdenNetwork\\n * @dev It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.  \\n * Be especially careful when importing any external contracts/libraries.\\n * If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!\\n */\\ncontract EdenNetwork is Initializable {\\n\\n    /// @notice Slot bid details\\n    struct Bid {\\n        address bidder;\\n        uint16 taxNumerator;\\n        uint16 taxDenominator;\\n        uint64 periodStart;\\n        uint128 bidAmount;\\n    }\\n\\n    /// @notice Expiration timestamp of current bid for specified slot index\\n    mapping (uint8 => uint64) public slotExpiration;\\n    \\n    /// @dev Address to be prioritized for given slot\\n    mapping (uint8 => address) private _slotDelegate;\\n\\n    /// @dev Address that owns a given slot and is able to set the slot delegate\\n    mapping (uint8 => address) private _slotOwner;\\n\\n    /// @notice Current bid for given slot\\n    mapping (uint8 => Bid) public slotBid;\\n\\n    /// @notice Staked balance in contract\\n    mapping (address => uint128) public stakedBalance;\\n\\n    /// @notice Balance in contract that was previously used for bid\\n    mapping (address => uint128) public lockedBalance;\\n\\n    /// @notice Token used to reserve slot\\n    IERC20Extended public token;\\n\\n    /// @notice Lock Manager contract\\n    ILockManager public lockManager;\\n\\n    /// @notice Admin that can set the contract tax rate\\n    address public admin;\\n\\n    /// @notice Numerator for tax rate\\n    uint16 public taxNumerator;\\n\\n    /// @notice Denominator for tax rate\\n    uint16 public taxDenominator;\\n\\n    /// @notice Minimum bid to reserve slot\\n    uint128 public MIN_BID;\\n\\n    /// @dev Reentrancy var used like bool, but with refunds\\n    uint256 private _NOT_ENTERED;\\n\\n    /// @dev Reentrancy var used like bool, but with refunds\\n    uint256 private _ENTERED;\\n\\n    /// @dev Reentrancy status\\n    uint256 private _status;\\n\\n    /// @notice Only admin can call\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"not admin\\\");\\n        _;\\n    }\\n\\n    /// @notice Only slot owner can call\\n    modifier onlySlotOwner(uint8 slot) {\\n        require(msg.sender == slotOwner(slot), \\\"not slot owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Reentrancy prevention\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /// @notice Event emitted when admin is updated\\n    event AdminUpdated(address indexed newAdmin, address indexed oldAdmin);\\n\\n    /// @notice Event emitted when the tax rate is updated\\n    event TaxRateUpdated(uint16 newNumerator, uint16 newDenominator, uint16 oldNumerator, uint16 oldDenominator);\\n\\n    /// @notice Event emitted when slot is claimed\\n    event SlotClaimed(uint8 indexed slot, address indexed owner, address indexed delegate, uint128 newBidAmount, uint128 oldBidAmount, uint16 taxNumerator, uint16 taxDenominator);\\n    \\n    /// @notice Event emitted when slot delegate is updated\\n    event SlotDelegateUpdated(uint8 indexed slot, address indexed owner, address indexed newDelegate, address oldDelegate);\\n\\n    /// @notice Event emitted when a user stakes tokens\\n    event Stake(address indexed staker, uint256 stakeAmount);\\n\\n    /// @notice Event emitted when a user unstakes tokens\\n    event Unstake(address indexed staker, uint256 unstakedAmount);\\n\\n    /// @notice Event emitted when a user withdraws locked tokens\\n    event Withdraw(address indexed withdrawer, uint256 withdrawalAmount);\\n\\n    /**\\n     * @notice Initialize EdenNetwork contract\\n     * @param _token Token address\\n     * @param _admin Admin address\\n     * @param _taxNumerator Numerator for tax rate\\n     * @param _taxDenominator Denominator for tax rate\\n     */\\n    function initialize(\\n        IERC20Extended _token,\\n        address _admin,\\n        uint16 _taxNumerator,\\n        uint16 _taxDenominator\\n    ) public initializer {\\n        token = _token;\\n        admin = _admin;\\n        emit AdminUpdated(_admin, address(0));\\n\\n        taxNumerator = _taxNumerator;\\n        taxDenominator = _taxDenominator;\\n        emit TaxRateUpdated(_taxNumerator, _taxDenominator, 0, 0);\\n\\n        MIN_BID = 10000000000000000;\\n        _NOT_ENTERED = 1;\\n        _ENTERED = 2;\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @notice Get current owner of slot\\n     * @param slot Slot index\\n     * @return Slot owner address\\n     */\\n    function slotOwner(uint8 slot) public view returns (address) {\\n        if(slotForeclosed(slot)) {\\n            return address(0);\\n        }\\n        return _slotOwner[slot];\\n    }\\n\\n    /**\\n     * @notice Get current slot delegate\\n     * @param slot Slot index\\n     * @return Slot delegate address\\n     */\\n    function slotDelegate(uint8 slot) public view returns (address) {\\n        if(slotForeclosed(slot)) {\\n            return address(0);\\n        }\\n        return _slotDelegate[slot];\\n    }\\n\\n    /**\\n     * @notice Get current cost to claim slot\\n     * @param slot Slot index\\n     * @return Slot cost\\n     */\\n    function slotCost(uint8 slot) external view returns (uint128) {\\n        if(slotForeclosed(slot)) {\\n            return MIN_BID;\\n        }\\n\\n        Bid memory currentBid = slotBid[slot];\\n        return currentBid.bidAmount * 110 / 100;\\n    }\\n\\n    /**\\n     * @notice Claim slot\\n     * @param slot Slot index\\n     * @param bid Bid amount\\n     * @param delegate Delegate for slot\\n     */\\n    function claimSlot(\\n        uint8 slot, \\n        uint128 bid, \\n        address delegate\\n    ) external nonReentrant {\\n        _claimSlot(slot, bid, delegate);\\n    }\\n\\n    /**\\n     * @notice Claim slot using permit for approval\\n     * @param slot Slot index\\n     * @param bid Bid amount\\n     * @param delegate Delegate for slot\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function claimSlotWithPermit(\\n        uint8 slot, \\n        uint128 bid, \\n        address delegate, \\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        token.permit(msg.sender, address(this), bid, deadline, v, r, s);\\n        _claimSlot(slot, bid, delegate);\\n    }\\n\\n    /**\\n     * @notice Get untaxed balance for current slot bid\\n     * @param slot Slot index\\n     * @return balance Slot balance\\n     */\\n    function slotBalance(uint8 slot) public view returns (uint128 balance) {\\n        Bid memory currentBid = slotBid[slot];\\n        if (currentBid.bidAmount == 0 || slotForeclosed(slot)) {\\n            return 0;\\n        } else if (block.timestamp == currentBid.periodStart) {\\n            return currentBid.bidAmount;\\n        } else {\\n            return uint128(uint256(currentBid.bidAmount) - (uint256(currentBid.bidAmount) * (block.timestamp - currentBid.periodStart) * currentBid.taxNumerator / (uint256(currentBid.taxDenominator) * 86400)));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if a given slot bid has expired\\n     * @param slot Slot index\\n     * @return True if slot is foreclosed\\n     */\\n    function slotForeclosed(uint8 slot) public view returns (bool) {\\n        if(slotExpiration[slot] <= block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Stake tokens\\n     * @param amount Amount of tokens to stake\\n     */\\n    function stake(uint128 amount) external nonReentrant {\\n        _stake(amount);\\n    }\\n\\n    /**\\n     * @notice Stake tokens using permit for approval\\n     * @param amount Amount of tokens to stake\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function stakeWithPermit(\\n        uint128 amount, \\n        uint256 deadline, \\n        uint8 v, \\n        bytes32 r, \\n        bytes32 s\\n    ) external nonReentrant {\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _stake(amount);\\n    }\\n\\n    /**\\n     * @notice Unstake tokens\\n     * @param amount Amount of tokens to unstake\\n     */\\n    function unstake(uint128 amount) external nonReentrant {\\n        require(stakedBalance[msg.sender] >= amount, \\\"amount > unlocked balance\\\");\\n        lockManager.removeVotingPower(msg.sender, address(token), amount);\\n        stakedBalance[msg.sender] -= amount;\\n        token.transfer(msg.sender, amount);\\n        emit Unstake(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw locked tokens\\n     * @param amount Amount of tokens to withdraw\\n     */\\n    function withdraw(uint128 amount) external nonReentrant {\\n        require(lockedBalance[msg.sender] >= amount, \\\"amount > unlocked balance\\\");\\n        lockedBalance[msg.sender] -= amount;\\n        token.transfer(msg.sender, amount);\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows slot owners to set a new slot delegate\\n     * @param slot Slot index\\n     * @param delegate Delegate address\\n     */\\n    function setSlotDelegate(uint8 slot, address delegate) external onlySlotOwner(slot) {\\n        require(delegate != address(0), \\\"cannot delegate to 0 address\\\");\\n        emit SlotDelegateUpdated(slot, msg.sender, delegate, slotDelegate(slot));\\n        _slotDelegate[slot] = delegate;\\n    }\\n\\n    /**\\n     * @notice Set new tax rate\\n     * @param numerator New tax numerator\\n     * @param denominator New tax denominator\\n     */\\n    function setTaxRate(uint16 numerator, uint16 denominator) external onlyAdmin {\\n        require(denominator > numerator, \\\"denominator must be > numerator\\\");\\n        emit TaxRateUpdated(numerator, denominator, taxNumerator, taxDenominator);\\n        taxNumerator = numerator;\\n        taxDenominator = denominator;\\n    }\\n\\n    /**\\n     * @notice Set new admin\\n     * @param newAdmin Nex admin address\\n     */\\n    function setAdmin(address newAdmin) external onlyAdmin {\\n        emit AdminUpdated(newAdmin, admin);\\n        admin = newAdmin;\\n    }\\n\\n    /**\\n     * @notice Internal implementation of claimSlot\\n     * @param slot Slot index\\n     * @param bid Bid amount\\n     * @param delegate Delegate address\\n     */\\n    function _claimSlot(uint8 slot, uint128 bid, address delegate) internal {\\n        require(delegate != address(0), \\\"cannot delegate to 0 address\\\");\\n        Bid storage currentBid = slotBid[slot];\\n        uint128 existingBidAmount = currentBid.bidAmount;\\n        uint128 existingSlotBalance = slotBalance(slot);\\n        uint128 taxedBalance = existingBidAmount - existingSlotBalance;\\n        require((existingSlotBalance == 0 && bid >= MIN_BID) || bid >= existingBidAmount * 110 / 100, \\\"bid too small\\\");\\n\\n        uint128 bidderLockedBalance = lockedBalance[msg.sender];\\n        uint128 bidIncrement = currentBid.bidder == msg.sender ? bid - existingSlotBalance : bid;\\n        if (bidderLockedBalance > 0) {\\n            if (bidderLockedBalance >= bidIncrement) {\\n                lockedBalance[msg.sender] -= bidIncrement;\\n            } else {\\n                lockedBalance[msg.sender] = 0;\\n                token.transferFrom(msg.sender, address(this), bidIncrement - bidderLockedBalance);\\n            }\\n        } else {\\n            token.transferFrom(msg.sender, address(this), bidIncrement);\\n        }\\n\\n        if (currentBid.bidder != msg.sender) {\\n            lockedBalance[currentBid.bidder] += existingSlotBalance;\\n        }\\n        \\n        if (taxedBalance > 0) {\\n            token.burn(taxedBalance);\\n        }\\n\\n        _slotOwner[slot] = msg.sender;\\n        _slotDelegate[slot] = delegate;\\n\\n        currentBid.bidder = msg.sender;\\n        currentBid.periodStart = uint64(block.timestamp);\\n        currentBid.bidAmount = bid;\\n        currentBid.taxNumerator = taxNumerator;\\n        currentBid.taxDenominator = taxDenominator;\\n\\n        slotExpiration[slot] = uint64(block.timestamp + uint256(taxDenominator) * 86400 / uint256(taxNumerator));\\n\\n        emit SlotClaimed(slot, msg.sender, delegate, bid, existingBidAmount, taxNumerator, taxDenominator);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of stake\\n     * @param amount Amount of tokens to stake\\n     */\\n    function _stake(uint128 amount) internal {\\n        token.transferFrom(msg.sender, address(this), amount);\\n        lockManager.grantVotingPower(msg.sender, address(token), amount);\\n        stakedBalance[msg.sender] += amount;\\n        emit Stake(msg.sender, amount);\\n    }\\n}\",\"keccak256\":\"0x06714d8ab7b203e9425caf96c50365021d58a0929c6e725ecfa580aace5c17ad\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x331c8a62acf09ee42c2cbb64b9e3c0f3adf875e248c4dbe8ef65a330fb428deb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./IERC20Mintable.sol\\\";\\nimport \\\"./IERC20Burnable.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./IERC20TransferWithAuth.sol\\\";\\nimport \\\"./IERC20SafeAllowance.sol\\\";\\n\\ninterface IERC20Extended is \\n    IERC20Metadata, \\n    IERC20Mintable, \\n    IERC20Burnable, \\n    IERC20Permit,\\n    IERC20TransferWithAuth,\\n    IERC20SafeAllowance \\n{}\\n    \",\"keccak256\":\"0x9b5437c39db96679407d6e0d8cd8938099080c3c8e99bc262476b87f89bf4076\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9fc0f4254dc2a877f30b0c1f1fad8c41cd39ae320f365d8624baf62d719b2a5b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address dst, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x42ce215c0b937d3a69d9604c98398fd366d4b1dc283e9db98f48c547ed44c441\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Permit is IERC20 {\\n    function getDomainSeparator() external view returns (bytes32);\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n    function VERSION_HASH() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function nonces(address) external view returns (uint);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xfb353702aea34a243a22fdf36ed4f3808a620620fb5ccb9ed0b4b50ce4973a6b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20SafeAllowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20SafeAllowance is IERC20 {\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\",\"keccak256\":\"0xd4ee7c57e3f59dd38a018d4c21b3966fe7b9c202172f27f15fbf6ac906f83ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20TransferWithAuth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20TransferWithAuth is IERC20 {\\n    function transferWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function receiveWithAuthorization(address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) external;\\n    function TRANSFER_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    function RECEIVE_WITH_AUTHORIZATION_TYPEHASH() external view returns (bytes32);\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n}\",\"keccak256\":\"0x41d99a9df9aac91ac7c43aa05722a72a669439ca1e00c5ba9b45fd10fd2bedce\",\"license\":\"MIT\"},\"contracts/interfaces/ILockManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockManager {\\n    struct LockedStake {\\n        uint256 amount;\\n        uint256 votingPower;\\n    }\\n\\n    function getAmountStaked(address staker, address stakedToken) external view returns (uint256);\\n    function getStake(address staker, address stakedToken) external view returns (LockedStake memory);\\n    function calculateVotingPower(address token, uint256 amount) external view returns (uint256);\\n    function grantVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerGranted);\\n    function removeVotingPower(address receiver, address token, uint256 tokenAmount) external returns (uint256 votingPowerRemoved);\\n}\",\"keccak256\":\"0x97e5871f0e670c74aafff3dcba78f437f8b4981c7ce617b6c6886433072f7130\",\"license\":\"MIT\"},\"contracts/lib/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xace7683eacbf9c09a73cb84f91f2b69906cc84d84681090d3139ea0a7bcb095f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506129d6806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063baa9bb23116100ee578063dc4fb6f111610097578063f45afb9f11610071578063f45afb9f14610453578063f851a4401461056b578063fba9578b1461058b578063fc0c546a1461059e57600080fd5b8063dc4fb6f11461041a578063dcf533791461042d578063df4426781461044057600080fd5b8063c69b6fa6116100c8578063c69b6fa6146103a8578063cb418116146103eb578063ce69cd20146103fe57600080fd5b8063baa9bb231461035f578063bbb0d59614610382578063bfb099b61461039557600080fd5b806388fe2be811610150578063acca30a21161012a578063acca30a2146102df578063b361b2b514610324578063b97123541461034c57600080fd5b806388fe2be8146102615780639631af0b146102745780639ae697bf146102ad57600080fd5b8063458a1d6e11610181578063458a1d6e14610209578063602172671461021c578063704b6c021461024e57600080fd5b806302387a7b146101a857806305035409146101bd57806308972073146101f6575b600080fd5b6101bb6101b6366004612610565b6105be565b005b6101d06101cb3660046126c5565b61081b565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101d06102043660046126c5565b6109bb565b6101bb610217366004612610565b610ac8565b6101d061022a366004612579565b6005602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6101bb61025c366004612579565b610dd9565b6101bb61026f366004612610565b610ee9565b60095461029a9074010000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101ed565b6101d06102bb366004612579565b6006602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6008546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ed565b60095461029a90760100000000000000000000000000000000000000000000900461ffff1681565b6101bb61035a366004612717565b610f6f565b61037261036d3660046126c5565b610ff9565b60405190151581526020016101ed565b6102ff6103903660046126c5565b61102e565b6101bb6103a33660046126e0565b611072565b6103d26103b63660046126c5565b60016020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101ed565b6101bb6103f9366004612679565b611254565b600a546101d0906fffffffffffffffffffffffffffffffff1681565b6102ff6104283660046126c5565b611457565b6101bb61043b36600461262b565b61149b565b6101bb61044e3660046125b8565b6115e4565b6105086104613660046126c5565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff82169161ffff74010000000000000000000000000000000000000000820481169276010000000000000000000000000000000000000000000083049091169167ffffffffffffffff780100000000000000000000000000000000000000000000000090910416906fffffffffffffffffffffffffffffffff1685565b6040805173ffffffffffffffffffffffffffffffffffffffff96909616865261ffff9485166020870152929093169184019190915267ffffffffffffffff1660608301526fffffffffffffffffffffffffffffffff16608082015260a0016101ed565b6009546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b6101bb61059936600461275e565b611893565b6007546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b600c54600d541415610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c00000000000000000000000000000000000060448201526064015b60405180910390fd5b600c54600d55336000908152600660205260409020546fffffffffffffffffffffffffffffffff808316911610156106c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610628565b33600090815260066020526040812080548392906106f69084906fffffffffffffffffffffffffffffffff166128d5565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556007546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b15801561079157600080fd5b505af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190612596565b506040516fffffffffffffffffffffffffffffffff8216815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250600b54600d55565b60ff81166000908152600460209081526040808320815160a081018352815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811695830195909552760100000000000000000000000000000000000000000000810490941692810192909252780100000000000000000000000000000000000000000000000090920467ffffffffffffffff1660608201526001909101546fffffffffffffffffffffffffffffffff166080820181905215806108f757506108f783610ff9565b156109055750600092915050565b806060015167ffffffffffffffff16421415610925576080015192915050565b604081015161093b9061ffff1662015180612898565b816020015161ffff16826060015167ffffffffffffffff164261095e9190612906565b83608001516fffffffffffffffffffffffffffffffff1661097f9190612898565b6109899190612898565b610993919061284c565b81608001516fffffffffffffffffffffffffffffffff166109b49190612906565b9392505050565b60006109c682610ff9565b156109e5575050600a546fffffffffffffffffffffffffffffffff1690565b60ff8216600090815260046020908152604091829020825160a081018452815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811694830194909452760100000000000000000000000000000000000000000000810490931693810193909352780100000000000000000000000000000000000000000000000090910467ffffffffffffffff166060830152600101546fffffffffffffffffffffffffffffffff1660808201819052606490610abe90606e612860565b6109b4919061281d565b600c54600d541415610b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55336000908152600560205260409020546fffffffffffffffffffffffffffffffff80831691161015610bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610628565b6008546007546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91821660248201526fffffffffffffffffffffffffffffffff8416604482015291169063bc3e1b7a90606401602060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f91906126ac565b503360009081526005602052604081208054839290610cc19084906fffffffffffffffffffffffffffffffff166128d5565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556007546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612596565b506040516fffffffffffffffffffffffffffffffff8216815233907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd9060200161080a565b60095473ffffffffffffffffffffffffffffffffffffffff163314610e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610628565b60095460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a3600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600c54600d541415610f57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55610f66816119e0565b50600b54600d55565b600c54600d541415610fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55610fee838383611c38565b5050600b54600d5550565b60ff81166000908152600160205260408120544267ffffffffffffffff9091161161102657506001919050565b506000919050565b600061103982610ff9565b1561104657506000919050565b5060ff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b8161107c8161102e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420736c6f74206f776e65720000000000000000000000000000000000006044820152606401610628565b73ffffffffffffffffffffffffffffffffffffffff821661118d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610628565b73ffffffffffffffffffffffffffffffffffffffff82163360ff85167fbd531a66556ecb9963175ca79b62cc8dee8921be91e4f1defa1f7120521818566111d387611457565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a45060ff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60095473ffffffffffffffffffffffffffffffffffffffff1633146112d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610628565b8161ffff168161ffff1611611346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f64656e6f6d696e61746f72206d757374206265203e206e756d657261746f72006044820152606401610628565b6009546040805161ffff858116825284811660208301527401000000000000000000000000000000000000000084048116828401527601000000000000000000000000000000000000000000009093049092166060830152517fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509181900360800190a1600980547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff948516027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000009290931691909102919091179055565b600061146282610ff9565b1561146f57506000919050565b5060ff1660009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600c54600d541415611509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d556007546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff871660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506115d7856119e0565b5050600b54600d55505050565b600054610100900460ff16806115fd575060005460ff16155b611689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610628565b600054610100900460ff161580156116c857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6007805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600980549287169290911682179055604051600091907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b908390a3600980547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8681169182027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff169290921776010000000000000000000000000000000000000000000092861692830217909255604080519283526020830191909152600090820181905260608201527fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509060800160405180910390a1600a80547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016662386f26fc100001790556001600b8190556002600c55600d55801561188c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b600c54600d541415611901576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d556007546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff881660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506119d1878787611c38565b5050600b54600d555050505050565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611a6957600080fd5b505af1158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa19190612596565b506008546007546040517fbc61256e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91821660248201526fffffffffffffffffffffffffffffffff8416604482015291169063bc61256e90606401602060405180830381600087803b158015611b2f57600080fd5b505af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6791906126ac565b503360009081526005602052604081208054839290611b999084906fffffffffffffffffffffffffffffffff166127d1565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051611c2d91906fffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff8116611cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610628565b60ff83166000908152600460205260408120600181015490916fffffffffffffffffffffffffffffffff90911690611cec8661081b565b90506000611cfa82846128d5565b90506fffffffffffffffffffffffffffffffff8216158015611d345750600a546fffffffffffffffffffffffffffffffff90811690871610155b80611d7957506064611d4784606e612860565b611d51919061281d565b6fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1610155b611ddf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f62696420746f6f20736d616c6c000000000000000000000000000000000000006044820152606401610628565b3360008181526006602052604081205486546fffffffffffffffffffffffffffffffff9091169273ffffffffffffffffffffffffffffffffffffffff90911614611e295787611e33565b611e3384896128d5565b90506fffffffffffffffffffffffffffffffff82161561200857806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611ee4573360009081526006602052604081208054839290611ea99084906fffffffffffffffffffffffffffffffff166128d5565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506120cb565b33600081815260066020526040902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905560075473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9030611f4486866128d5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526fffffffffffffffffffffffffffffffff166044820152606401602060405180830381600087803b158015611fca57600080fd5b505af1158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190612596565b506120cb565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c99190612596565b505b855473ffffffffffffffffffffffffffffffffffffffff16331461216857855473ffffffffffffffffffffffffffffffffffffffff16600090815260066020526040812080548692906121319084906fffffffffffffffffffffffffffffffff166127d1565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6fffffffffffffffffffffffffffffffff831615612237576007546040517f42966c680000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff909116906342966c6890602401602060405180830381600087803b1580156121fd57600080fd5b505af1158015612211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122359190612596565b505b60ff891660009081526003602090815260408083208054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560029093529220805490911673ffffffffffffffffffffffffffffffffffffffff8a16179055865477ffffffff00000000000000000000000000000000000000001677ffffffffffffffffffffffffffffffffffffffffffffffff9091161778010000000000000000000000000000000000000000000000004267ffffffffffffffff1602178087556001870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8b16179055600980547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff8316740100000000000000000000000000000000000000009182900461ffff90811683029182178b5583547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9095167fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff909216919091177601000000000000000000000000000000000000000000009485900482168502178a5591549081048216926124169291041662015180612898565b612420919061284c565b61242a9042612805565b60ff8a16600081815260016020908152604091829020805467ffffffffffffffff959095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009095169490941790935560095481516fffffffffffffffffffffffffffffffff8d811682528a169481019490945261ffff7401000000000000000000000000000000000000000082048116858401527601000000000000000000000000000000000000000000009091041660608401525173ffffffffffffffffffffffffffffffffffffffff8a16923392917f6190ecb308529ed5355b9d692732314745e0acbc6c8270baf94bab524f03eed49181900360800190a4505050505050505050565b80356fffffffffffffffffffffffffffffffff8116811461255157600080fd5b919050565b803561ffff8116811461255157600080fd5b803560ff8116811461255157600080fd5b60006020828403121561258b57600080fd5b81356109b48161297b565b6000602082840312156125a857600080fd5b815180151581146109b457600080fd5b600080600080608085870312156125ce57600080fd5b84356125d98161297b565b935060208501356125e98161297b565b92506125f760408601612556565b915061260560608601612556565b905092959194509250565b60006020828403121561262257600080fd5b6109b482612531565b600080600080600060a0868803121561264357600080fd5b61264c86612531565b94506020860135935061266160408701612568565b94979396509394606081013594506080013592915050565b6000806040838503121561268c57600080fd5b61269583612556565b91506126a360208401612556565b90509250929050565b6000602082840312156126be57600080fd5b5051919050565b6000602082840312156126d757600080fd5b6109b482612568565b600080604083850312156126f357600080fd5b6126fc83612568565b9150602083013561270c8161297b565b809150509250929050565b60008060006060848603121561272c57600080fd5b61273584612568565b925061274360208501612531565b915060408401356127538161297b565b809150509250925092565b600080600080600080600060e0888a03121561277957600080fd5b61278288612568565b965061279060208901612531565b955060408801356127a08161297b565b9450606088013593506127b560808901612568565b925060a0880135915060c0880135905092959891949750929550565b60006fffffffffffffffffffffffffffffffff8083168185168083038211156127fc576127fc61291d565b01949350505050565b600082198211156128185761281861291d565b500190565b60006fffffffffffffffffffffffffffffffff808416806128405761284061294c565b92169190910492915050565b60008261285b5761285b61294c565b500490565b60006fffffffffffffffffffffffffffffffff8083168185168183048111821515161561288f5761288f61291d565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128d0576128d061291d565b500290565b60006fffffffffffffffffffffffffffffffff838116908316818110156128fe576128fe61291d565b039392505050565b6000828210156129185761291861291d565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461299d57600080fd5b5056fea264697066735822122011d6c2bb17592e73277b8a8c712c377bb216e53ca7c351b717bb933daf5845a164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c8063baa9bb23116100ee578063dc4fb6f111610097578063f45afb9f11610071578063f45afb9f14610453578063f851a4401461056b578063fba9578b1461058b578063fc0c546a1461059e57600080fd5b8063dc4fb6f11461041a578063dcf533791461042d578063df4426781461044057600080fd5b8063c69b6fa6116100c8578063c69b6fa6146103a8578063cb418116146103eb578063ce69cd20146103fe57600080fd5b8063baa9bb231461035f578063bbb0d59614610382578063bfb099b61461039557600080fd5b806388fe2be811610150578063acca30a21161012a578063acca30a2146102df578063b361b2b514610324578063b97123541461034c57600080fd5b806388fe2be8146102615780639631af0b146102745780639ae697bf146102ad57600080fd5b8063458a1d6e11610181578063458a1d6e14610209578063602172671461021c578063704b6c021461024e57600080fd5b806302387a7b146101a857806305035409146101bd57806308972073146101f6575b600080fd5b6101bb6101b6366004612610565b6105be565b005b6101d06101cb3660046126c5565b61081b565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101d06102043660046126c5565b6109bb565b6101bb610217366004612610565b610ac8565b6101d061022a366004612579565b6005602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6101bb61025c366004612579565b610dd9565b6101bb61026f366004612610565b610ee9565b60095461029a9074010000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101ed565b6101d06102bb366004612579565b6006602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6008546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ed565b60095461029a90760100000000000000000000000000000000000000000000900461ffff1681565b6101bb61035a366004612717565b610f6f565b61037261036d3660046126c5565b610ff9565b60405190151581526020016101ed565b6102ff6103903660046126c5565b61102e565b6101bb6103a33660046126e0565b611072565b6103d26103b63660046126c5565b60016020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101ed565b6101bb6103f9366004612679565b611254565b600a546101d0906fffffffffffffffffffffffffffffffff1681565b6102ff6104283660046126c5565b611457565b6101bb61043b36600461262b565b61149b565b6101bb61044e3660046125b8565b6115e4565b6105086104613660046126c5565b6004602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff82169161ffff74010000000000000000000000000000000000000000820481169276010000000000000000000000000000000000000000000083049091169167ffffffffffffffff780100000000000000000000000000000000000000000000000090910416906fffffffffffffffffffffffffffffffff1685565b6040805173ffffffffffffffffffffffffffffffffffffffff96909616865261ffff9485166020870152929093169184019190915267ffffffffffffffff1660608301526fffffffffffffffffffffffffffffffff16608082015260a0016101ed565b6009546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b6101bb61059936600461275e565b611893565b6007546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b600c54600d541415610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c00000000000000000000000000000000000060448201526064015b60405180910390fd5b600c54600d55336000908152600660205260409020546fffffffffffffffffffffffffffffffff808316911610156106c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610628565b33600090815260066020526040812080548392906106f69084906fffffffffffffffffffffffffffffffff166128d5565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556007546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b15801561079157600080fd5b505af11580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190612596565b506040516fffffffffffffffffffffffffffffffff8216815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250600b54600d55565b60ff81166000908152600460209081526040808320815160a081018352815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811695830195909552760100000000000000000000000000000000000000000000810490941692810192909252780100000000000000000000000000000000000000000000000090920467ffffffffffffffff1660608201526001909101546fffffffffffffffffffffffffffffffff166080820181905215806108f757506108f783610ff9565b156109055750600092915050565b806060015167ffffffffffffffff16421415610925576080015192915050565b604081015161093b9061ffff1662015180612898565b816020015161ffff16826060015167ffffffffffffffff164261095e9190612906565b83608001516fffffffffffffffffffffffffffffffff1661097f9190612898565b6109899190612898565b610993919061284c565b81608001516fffffffffffffffffffffffffffffffff166109b49190612906565b9392505050565b60006109c682610ff9565b156109e5575050600a546fffffffffffffffffffffffffffffffff1690565b60ff8216600090815260046020908152604091829020825160a081018452815473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810461ffff90811694830194909452760100000000000000000000000000000000000000000000810490931693810193909352780100000000000000000000000000000000000000000000000090910467ffffffffffffffff166060830152600101546fffffffffffffffffffffffffffffffff1660808201819052606490610abe90606e612860565b6109b4919061281d565b600c54600d541415610b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55336000908152600560205260409020546fffffffffffffffffffffffffffffffff80831691161015610bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f616d6f756e74203e20756e6c6f636b65642062616c616e6365000000000000006044820152606401610628565b6008546007546040517fbc3e1b7a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91821660248201526fffffffffffffffffffffffffffffffff8416604482015291169063bc3e1b7a90606401602060405180830381600087803b158015610c5757600080fd5b505af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f91906126ac565b503360009081526005602052604081208054839290610cc19084906fffffffffffffffffffffffffffffffff166128d5565b82546101009290920a6fffffffffffffffffffffffffffffffff8181021990931691831602179091556007546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152918416602483015273ffffffffffffffffffffffffffffffffffffffff16915063a9059cbb90604401602060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612596565b506040516fffffffffffffffffffffffffffffffff8216815233907f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd9060200161080a565b60095473ffffffffffffffffffffffffffffffffffffffff163314610e5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610628565b60095460405173ffffffffffffffffffffffffffffffffffffffff918216918316907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a3600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600c54600d541415610f57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55610f66816119e0565b50600b54600d55565b600c54600d541415610fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d55610fee838383611c38565b5050600b54600d5550565b60ff81166000908152600160205260408120544267ffffffffffffffff9091161161102657506001919050565b506000919050565b600061103982610ff9565b1561104657506000919050565b5060ff1660009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b8161107c8161102e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611110576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f7420736c6f74206f776e65720000000000000000000000000000000000006044820152606401610628565b73ffffffffffffffffffffffffffffffffffffffff821661118d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610628565b73ffffffffffffffffffffffffffffffffffffffff82163360ff85167fbd531a66556ecb9963175ca79b62cc8dee8921be91e4f1defa1f7120521818566111d387611457565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a45060ff91909116600090815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60095473ffffffffffffffffffffffffffffffffffffffff1633146112d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f742061646d696e00000000000000000000000000000000000000000000006044820152606401610628565b8161ffff168161ffff1611611346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f64656e6f6d696e61746f72206d757374206265203e206e756d657261746f72006044820152606401610628565b6009546040805161ffff858116825284811660208301527401000000000000000000000000000000000000000084048116828401527601000000000000000000000000000000000000000000009093049092166060830152517fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509181900360800190a1600980547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff948516027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff16177601000000000000000000000000000000000000000000009290931691909102919091179055565b600061146282610ff9565b1561146f57506000919050565b5060ff1660009081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b600c54600d541415611509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d556007546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff871660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156115b657600080fd5b505af11580156115ca573d6000803e3d6000fd5b505050506115d7856119e0565b5050600b54600d55505050565b600054610100900460ff16806115fd575060005460ff16155b611689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610628565b600054610100900460ff161580156116c857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6007805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600980549287169290911682179055604051600091907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b908390a3600980547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000061ffff8681169182027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff169290921776010000000000000000000000000000000000000000000092861692830217909255604080519283526020830191909152600090820181905260608201527fc787b4548967673274fa85b2239da3b2b6352dac97c8bb296e459c3757a220509060800160405180910390a1600a80547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016662386f26fc100001790556001600b8190556002600c55600d55801561188c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050505050565b600c54600d541415611901576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f7265656e7472616e742063616c6c0000000000000000000000000000000000006044820152606401610628565b600c54600d556007546040517fd505accf0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff881660448201526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506119d1878787611c38565b5050600b54600d555050505050565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611a6957600080fd5b505af1158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa19190612596565b506008546007546040517fbc61256e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91821660248201526fffffffffffffffffffffffffffffffff8416604482015291169063bc61256e90606401602060405180830381600087803b158015611b2f57600080fd5b505af1158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6791906126ac565b503360009081526005602052604081208054839290611b999084906fffffffffffffffffffffffffffffffff166127d1565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a82604051611c2d91906fffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a250565b73ffffffffffffffffffffffffffffffffffffffff8116611cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f63616e6e6f742064656c656761746520746f20302061646472657373000000006044820152606401610628565b60ff83166000908152600460205260408120600181015490916fffffffffffffffffffffffffffffffff90911690611cec8661081b565b90506000611cfa82846128d5565b90506fffffffffffffffffffffffffffffffff8216158015611d345750600a546fffffffffffffffffffffffffffffffff90811690871610155b80611d7957506064611d4784606e612860565b611d51919061281d565b6fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff1610155b611ddf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f62696420746f6f20736d616c6c000000000000000000000000000000000000006044820152606401610628565b3360008181526006602052604081205486546fffffffffffffffffffffffffffffffff9091169273ffffffffffffffffffffffffffffffffffffffff90911614611e295787611e33565b611e3384896128d5565b90506fffffffffffffffffffffffffffffffff82161561200857806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611ee4573360009081526006602052604081208054839290611ea99084906fffffffffffffffffffffffffffffffff166128d5565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506120cb565b33600081815260066020526040902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016905560075473ffffffffffffffffffffffffffffffffffffffff16906323b872dd9030611f4486866128d5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526fffffffffffffffffffffffffffffffff166044820152606401602060405180830381600087803b158015611fca57600080fd5b505af1158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190612596565b506120cb565b6007546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526fffffffffffffffffffffffffffffffff8316604482015273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c99190612596565b505b855473ffffffffffffffffffffffffffffffffffffffff16331461216857855473ffffffffffffffffffffffffffffffffffffffff16600090815260066020526040812080548692906121319084906fffffffffffffffffffffffffffffffff166127d1565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6fffffffffffffffffffffffffffffffff831615612237576007546040517f42966c680000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff909116906342966c6890602401602060405180830381600087803b1580156121fd57600080fd5b505af1158015612211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122359190612596565b505b60ff891660009081526003602090815260408083208054337fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925560029093529220805490911673ffffffffffffffffffffffffffffffffffffffff8a16179055865477ffffffff00000000000000000000000000000000000000001677ffffffffffffffffffffffffffffffffffffffffffffffff9091161778010000000000000000000000000000000000000000000000004267ffffffffffffffff1602178087556001870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff8b16179055600980547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff8316740100000000000000000000000000000000000000009182900461ffff90811683029182178b5583547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9095167fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff909216919091177601000000000000000000000000000000000000000000009485900482168502178a5591549081048216926124169291041662015180612898565b612420919061284c565b61242a9042612805565b60ff8a16600081815260016020908152604091829020805467ffffffffffffffff959095167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009095169490941790935560095481516fffffffffffffffffffffffffffffffff8d811682528a169481019490945261ffff7401000000000000000000000000000000000000000082048116858401527601000000000000000000000000000000000000000000009091041660608401525173ffffffffffffffffffffffffffffffffffffffff8a16923392917f6190ecb308529ed5355b9d692732314745e0acbc6c8270baf94bab524f03eed49181900360800190a4505050505050505050565b80356fffffffffffffffffffffffffffffffff8116811461255157600080fd5b919050565b803561ffff8116811461255157600080fd5b803560ff8116811461255157600080fd5b60006020828403121561258b57600080fd5b81356109b48161297b565b6000602082840312156125a857600080fd5b815180151581146109b457600080fd5b600080600080608085870312156125ce57600080fd5b84356125d98161297b565b935060208501356125e98161297b565b92506125f760408601612556565b915061260560608601612556565b905092959194509250565b60006020828403121561262257600080fd5b6109b482612531565b600080600080600060a0868803121561264357600080fd5b61264c86612531565b94506020860135935061266160408701612568565b94979396509394606081013594506080013592915050565b6000806040838503121561268c57600080fd5b61269583612556565b91506126a360208401612556565b90509250929050565b6000602082840312156126be57600080fd5b5051919050565b6000602082840312156126d757600080fd5b6109b482612568565b600080604083850312156126f357600080fd5b6126fc83612568565b9150602083013561270c8161297b565b809150509250929050565b60008060006060848603121561272c57600080fd5b61273584612568565b925061274360208501612531565b915060408401356127538161297b565b809150509250925092565b600080600080600080600060e0888a03121561277957600080fd5b61278288612568565b965061279060208901612531565b955060408801356127a08161297b565b9450606088013593506127b560808901612568565b925060a0880135915060c0880135905092959891949750929550565b60006fffffffffffffffffffffffffffffffff8083168185168083038211156127fc576127fc61291d565b01949350505050565b600082198211156128185761281861291d565b500190565b60006fffffffffffffffffffffffffffffffff808416806128405761284061294c565b92169190910492915050565b60008261285b5761285b61294c565b500490565b60006fffffffffffffffffffffffffffffffff8083168185168183048111821515161561288f5761288f61291d565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128d0576128d061291d565b500290565b60006fffffffffffffffffffffffffffffffff838116908316818110156128fe576128fe61291d565b039392505050565b6000828210156129185761291861291d565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461299d57600080fd5b5056fea264697066735822122011d6c2bb17592e73277b8a8c712c377bb216e53ca7c351b717bb933daf5845a164736f6c63430008060033",
  "devdoc": {
    "details": "It is VERY IMPORTANT that modifications to this contract do not change the storage layout of the existing variables.   Be especially careful when importing any external contracts/libraries. If you do not know what any of this means, BACK AWAY FROM THE CODE NOW!!",
    "kind": "dev",
    "methods": {
      "claimSlot(uint8,uint128,address)": {
        "params": {
          "bid": "Bid amount",
          "delegate": "Delegate for slot",
          "slot": "Slot index"
        }
      },
      "claimSlotWithPermit(uint8,uint128,address,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "bid": "Bid amount",
          "deadline": "The time at which to expire the signature",
          "delegate": "Delegate for slot",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "slot": "Slot index",
          "v": "The recovery byte of the signature"
        }
      },
      "initialize(address,address,uint16,uint16)": {
        "params": {
          "_admin": "Admin address",
          "_taxDenominator": "Denominator for tax rate",
          "_taxNumerator": "Numerator for tax rate",
          "_token": "Token address"
        }
      },
      "setAdmin(address)": {
        "params": {
          "newAdmin": "Nex admin address"
        }
      },
      "setSlotDelegate(uint8,address)": {
        "params": {
          "delegate": "Delegate address",
          "slot": "Slot index"
        }
      },
      "setTaxRate(uint16,uint16)": {
        "params": {
          "denominator": "New tax denominator",
          "numerator": "New tax numerator"
        }
      },
      "slotBalance(uint8)": {
        "params": {
          "slot": "Slot index"
        },
        "returns": {
          "balance": "Slot balance"
        }
      },
      "slotCost(uint8)": {
        "params": {
          "slot": "Slot index"
        },
        "returns": {
          "_0": "Slot cost"
        }
      },
      "slotDelegate(uint8)": {
        "params": {
          "slot": "Slot index"
        },
        "returns": {
          "_0": "Slot delegate address"
        }
      },
      "slotForeclosed(uint8)": {
        "params": {
          "slot": "Slot index"
        },
        "returns": {
          "_0": "True if slot is foreclosed"
        }
      },
      "slotOwner(uint8)": {
        "params": {
          "slot": "Slot index"
        },
        "returns": {
          "_0": "Slot owner address"
        }
      },
      "stake(uint128)": {
        "params": {
          "amount": "Amount of tokens to stake"
        }
      },
      "stakeWithPermit(uint128,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to stake",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "unstake(uint128)": {
        "params": {
          "amount": "Amount of tokens to unstake"
        }
      },
      "withdraw(uint128)": {
        "params": {
          "amount": "Amount of tokens to withdraw"
        }
      }
    },
    "stateVariables": {
      "_ENTERED": {
        "details": "Reentrancy var used like bool, but with refunds"
      },
      "_NOT_ENTERED": {
        "details": "Reentrancy var used like bool, but with refunds"
      },
      "_slotDelegate": {
        "details": "Address to be prioritized for given slot"
      },
      "_slotOwner": {
        "details": "Address that owns a given slot and is able to set the slot delegate"
      },
      "_status": {
        "details": "Reentrancy status"
      }
    },
    "title": "EdenNetwork",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AdminUpdated(address,address)": {
        "notice": "Event emitted when admin is updated"
      },
      "SlotClaimed(uint8,address,address,uint128,uint128,uint16,uint16)": {
        "notice": "Event emitted when slot is claimed"
      },
      "SlotDelegateUpdated(uint8,address,address,address)": {
        "notice": "Event emitted when slot delegate is updated"
      },
      "Stake(address,uint256)": {
        "notice": "Event emitted when a user stakes tokens"
      },
      "TaxRateUpdated(uint16,uint16,uint16,uint16)": {
        "notice": "Event emitted when the tax rate is updated"
      },
      "Unstake(address,uint256)": {
        "notice": "Event emitted when a user unstakes tokens"
      },
      "Withdraw(address,uint256)": {
        "notice": "Event emitted when a user withdraws locked tokens"
      }
    },
    "kind": "user",
    "methods": {
      "MIN_BID()": {
        "notice": "Minimum bid to reserve slot"
      },
      "admin()": {
        "notice": "Admin that can set the contract tax rate"
      },
      "claimSlot(uint8,uint128,address)": {
        "notice": "Claim slot"
      },
      "claimSlotWithPermit(uint8,uint128,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Claim slot using permit for approval"
      },
      "initialize(address,address,uint16,uint16)": {
        "notice": "Initialize EdenNetwork contract"
      },
      "lockManager()": {
        "notice": "Lock Manager contract"
      },
      "lockedBalance(address)": {
        "notice": "Balance in contract that was previously used for bid"
      },
      "setAdmin(address)": {
        "notice": "Set new admin"
      },
      "setSlotDelegate(uint8,address)": {
        "notice": "Allows slot owners to set a new slot delegate"
      },
      "setTaxRate(uint16,uint16)": {
        "notice": "Set new tax rate"
      },
      "slotBalance(uint8)": {
        "notice": "Get untaxed balance for current slot bid"
      },
      "slotBid(uint8)": {
        "notice": "Current bid for given slot"
      },
      "slotCost(uint8)": {
        "notice": "Get current cost to claim slot"
      },
      "slotDelegate(uint8)": {
        "notice": "Get current slot delegate"
      },
      "slotExpiration(uint8)": {
        "notice": "Expiration timestamp of current bid for specified slot index"
      },
      "slotForeclosed(uint8)": {
        "notice": "Returns true if a given slot bid has expired"
      },
      "slotOwner(uint8)": {
        "notice": "Get current owner of slot"
      },
      "stake(uint128)": {
        "notice": "Stake tokens"
      },
      "stakeWithPermit(uint128,uint256,uint8,bytes32,bytes32)": {
        "notice": "Stake tokens using permit for approval"
      },
      "stakedBalance(address)": {
        "notice": "Staked balance in contract"
      },
      "taxDenominator()": {
        "notice": "Denominator for tax rate"
      },
      "taxNumerator()": {
        "notice": "Numerator for tax rate"
      },
      "token()": {
        "notice": "Token used to reserve slot"
      },
      "unstake(uint128)": {
        "notice": "Unstake tokens"
      },
      "withdraw(uint128)": {
        "notice": "Withdraw locked tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13091,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13094,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 508,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "slotExpiration",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_uint64)"
      },
      {
        "astId": 513,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_slotDelegate",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 518,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_slotOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 524,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "slotBid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(Bid)503_storage)"
      },
      {
        "astId": 529,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "stakedBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 534,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "lockedBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 538,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20Extended)9598"
      },
      {
        "astId": 542,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "lockManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILockManager)10122"
      },
      {
        "astId": 545,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "admin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 548,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "taxNumerator",
        "offset": 20,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 551,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "taxDenominator",
        "offset": 22,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 554,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "MIN_BID",
        "offset": 0,
        "slot": "10",
        "type": "t_uint128"
      },
      {
        "astId": 557,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_NOT_ENTERED",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 560,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_ENTERED",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 563,
        "contract": "contracts/EdenNetwork.sol:EdenNetwork",
        "label": "_status",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Extended)9598": {
        "encoding": "inplace",
        "label": "contract IERC20Extended",
        "numberOfBytes": "20"
      },
      "t_contract(ILockManager)10122": {
        "encoding": "inplace",
        "label": "contract ILockManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(Bid)503_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct EdenNetwork.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)503_storage"
      },
      "t_mapping(t_uint8,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Bid)503_storage": {
        "encoding": "inplace",
        "label": "struct EdenNetwork.Bid",
        "members": [
          {
            "astId": 494,
            "contract": "contracts/EdenNetwork.sol:EdenNetwork",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 496,
            "contract": "contracts/EdenNetwork.sol:EdenNetwork",
            "label": "taxNumerator",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 498,
            "contract": "contracts/EdenNetwork.sol:EdenNetwork",
            "label": "taxDenominator",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 500,
            "contract": "contracts/EdenNetwork.sol:EdenNetwork",
            "label": "periodStart",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 502,
            "contract": "contracts/EdenNetwork.sol:EdenNetwork",
            "label": "bidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}